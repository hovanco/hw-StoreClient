{"ast":null,"code":"import types from './type';\nimport storeApi from '../../api/store-api';\nimport productApi from '../../api/product-api';\nimport orderApi from '../../api/order-api';\nimport warehouseApi from '../../api/warehouse-api';\nimport customerApi from '../../api/customer-api';\nimport * as stockApi from '../../api/stock-api';\nimport * as saleChannelApi from '../../api/sale-channel-api';\nconst {\n  getStores,\n  getCategoryByStore\n} = storeApi;\nconst {\n  getProducts,\n  getAttributes: getAttributesApi\n} = productApi;\nconst {\n  getOrder\n} = orderApi;\nconst {\n  getWarehouses: getWarehousesApi\n} = warehouseApi;\nconst {\n  getCustomers: getCustomersApi\n} = customerApi;\nexport const getStore = () => async dispatch => {\n  try {\n    const result = await getStores();\n    return dispatch({\n      type: types.SET_STORE,\n      payload: result\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getProduct = ({\n  id,\n  page,\n  limit,\n  search,\n  categoryId,\n  withQuantity\n}) => async dispatch => {\n  dispatch({\n    type: types.SET_PRODUCT_LOADING,\n    payload: true\n  });\n\n  try {\n    const result = await getProducts({\n      storeId: id,\n      page,\n      limit,\n      search,\n      categoryId,\n      withQuantity\n    });\n    dispatch({\n      type: types.SET_PRODUCTS,\n      payload: { ...result,\n        pagination: {\n          limit,\n          page,\n          total: result.total\n        }\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  } finally {\n    dispatch({\n      type: types.SET_PRODUCT_LOADING,\n      payload: false\n    });\n  }\n};\nexport const getCategoriesByStore = storeId => async dispatch => {\n  try {\n    const result = await getCategoryByStore(storeId);\n    dispatch({\n      type: types.SET_STORE_CATEGORIES,\n      payload: result\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getOrders = ({\n  id,\n  page = 1,\n  limit = 15,\n  status,\n  search,\n  source,\n  serviceId,\n  soft,\n  direction,\n  transportStatus,\n  customerId,\n  deliveryDate\n}) => async dispatch => {\n  dispatch({\n    type: types.SET_ORDER_LOADING,\n    payload: true\n  });\n\n  try {\n    const result = await getOrder({\n      id,\n      page,\n      limit,\n      status,\n      source,\n      serviceId,\n      search,\n      soft,\n      direction,\n      deliveryDate,\n      customerId\n    });\n    dispatch({\n      type: types.SET_ORDERS,\n      payload: { ...result,\n        pagination: {\n          limit,\n          page,\n          total: result.total\n        }\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getAttributes = storeId => async dispatch => {\n  dispatch({\n    type: types.SET_ATTRIBUTE_LOADING,\n    payload: true\n  });\n\n  try {\n    const result = await getAttributesApi(storeId);\n    dispatch({\n      type: types.SET_ATTRIBUTES,\n      payload: {\n        data: [...result]\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getWarehouses = storeId => async dispatch => {\n  try {\n    const result = await getWarehousesApi(storeId);\n    dispatch({\n      type: types.SET_WAREHOUSES,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getStocks = ({\n  storeId,\n  warehouseId,\n  productId,\n  categoryId,\n  brandId,\n  search,\n  page,\n  limit,\n  parentId\n}) => async dispatch => {\n  try {\n    dispatch({\n      type: types.SET_STOCK_LOADING,\n      payload: {\n        limit,\n        page\n      }\n    });\n    const result = await stockApi.getStocks({\n      storeId,\n      warehouseId,\n      productId,\n      categoryId,\n      brandId,\n      search,\n      page,\n      limit,\n      parentId\n    });\n    dispatch({\n      type: types.SET_STOCKS,\n      payload: {\n        data: result.data,\n        pagination: {\n          limit,\n          page,\n          total: result.total\n        }\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getCustomers = ({\n  storeId,\n  page,\n  limit,\n  sort,\n  direction,\n  source,\n  search,\n  dateOfBirth,\n  filterDateBy,\n  fromAt,\n  toAt,\n  gender\n}) => async dispatch => {\n  dispatch({\n    type: types.SET_CUSTOMERS_LOADING,\n    payload: {\n      page,\n      limit\n    }\n  });\n\n  try {\n    const result = await getCustomersApi({\n      storeId,\n      limit,\n      page,\n      source,\n      search,\n      sort,\n      direction,\n      dateOfBirth,\n      filterDateBy,\n      fromAt,\n      toAt,\n      gender\n    });\n    dispatch({\n      type: types.SET_CUSTOMERS,\n      payload: { ...result,\n        pagination: {\n          limit,\n          page,\n          total: result.total\n        }\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getEnableSaleChannels = () => async dispatch => {\n  try {\n    const result = await saleChannelApi.getEnableSaleChannels();\n    dispatch({\n      type: types.SET_ENABLE_SALE_CHANNELS,\n      payload: result\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const storeAction = {\n  getStore,\n  getProduct,\n  getCategoriesByStore,\n  getOrders,\n  getAttributes,\n  getWarehouses,\n  getStocks,\n  getCustomers,\n  getEnableSaleChannels\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/reducers/storeState/action.ts"],"names":["types","storeApi","productApi","orderApi","warehouseApi","customerApi","stockApi","saleChannelApi","getStores","getCategoryByStore","getProducts","getAttributes","getAttributesApi","getOrder","getWarehouses","getWarehousesApi","getCustomers","getCustomersApi","getStore","dispatch","result","type","SET_STORE","payload","error","console","getProduct","id","page","limit","search","categoryId","withQuantity","SET_PRODUCT_LOADING","storeId","SET_PRODUCTS","pagination","total","getCategoriesByStore","SET_STORE_CATEGORIES","getOrders","status","source","serviceId","soft","direction","transportStatus","customerId","deliveryDate","SET_ORDER_LOADING","SET_ORDERS","SET_ATTRIBUTE_LOADING","SET_ATTRIBUTES","data","SET_WAREHOUSES","getStocks","warehouseId","productId","brandId","parentId","SET_STOCK_LOADING","SET_STOCKS","sort","dateOfBirth","filterDateBy","fromAt","toAt","gender","SET_CUSTOMERS_LOADING","SET_CUSTOMERS","getEnableSaleChannels","SET_ENABLE_SALE_CHANNELS","storeAction"],"mappings":"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","sourcesContent":["import types from './type';\nimport { Dispatch } from 'redux';\nimport storeApi from '../../api/store-api';\nimport productApi from '../../api/product-api';\nimport orderApi from '../../api/order-api';\nimport warehouseApi from '../../api/warehouse-api';\nimport customerApi from '../../api/customer-api';\nimport * as stockApi from '../../api/stock-api';\nimport * as saleChannelApi from '../../api/sale-channel-api';\nimport { ICustomersParams } from '../../models';\n\nconst { getStores, getCategoryByStore } = storeApi;\nconst { getProducts, getAttributes: getAttributesApi } = productApi;\nconst { getOrder } = orderApi;\nconst { getWarehouses: getWarehousesApi } = warehouseApi;\nconst { getCustomers: getCustomersApi } = customerApi;\n\nexport const getStore = () => async (dispatch: Dispatch<any>) => {\n    try {\n        const result = await getStores();\n        return dispatch({\n            type: types.SET_STORE,\n            payload: result,\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nexport const getProduct = ({\n    id,\n    page,\n    limit,\n    search,\n    categoryId,\n    withQuantity,\n}: {\n    id: string;\n    page: number;\n    limit: number;\n    categoryId?: string;\n    search?: string;\n    withQuantity?: boolean;\n}) => async (dispatch: Dispatch<any>) => {\n    dispatch({\n        type: types.SET_PRODUCT_LOADING,\n        payload: true,\n    });\n    try {\n        const result = await getProducts({\n            storeId: id,\n            page,\n            limit,\n            search,\n            categoryId,\n            withQuantity,\n        });\n        dispatch({\n            type: types.SET_PRODUCTS,\n            payload: {\n                ...result,\n                pagination: {\n                    limit,\n                    page,\n                    total: result.total,\n                },\n            },\n        });\n    } catch (error) {\n        console.error(error);\n    } finally {\n        dispatch({\n            type: types.SET_PRODUCT_LOADING,\n            payload: false,\n        });\n    }\n};\n\nexport const getCategoriesByStore = (storeId: string) => async (dispatch: Dispatch<any>) => {\n    try {\n        const result = await getCategoryByStore(storeId);\n        dispatch({\n            type: types.SET_STORE_CATEGORIES,\n            payload: result,\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\nexport const getOrders = ({\n    id,\n    page = 1,\n    limit = 15,\n    status,\n    search,\n    source,\n    serviceId,\n    soft,\n    direction,\n    transportStatus,\n    customerId,\n    deliveryDate,\n}: {\n    id: string;\n    page?: number;\n    limit?: number;\n    status?: number;\n    search?: string;\n    source?: string;\n    serviceId?: number;\n    soft?: string;\n    direction?: string;\n    transportStatus?: string;\n    customerId?: string;\n    deliveryDate?: number;\n}) => async (dispatch: Dispatch<any>) => {\n    dispatch({\n        type: types.SET_ORDER_LOADING,\n        payload: true,\n    });\n    try {\n        const result = await getOrder({\n            id,\n            page,\n            limit,\n            status,\n            source,\n            serviceId,\n            search,\n            soft,\n            direction,\n            deliveryDate,\n            customerId,\n        });\n\n        dispatch({\n            type: types.SET_ORDERS,\n            payload: {\n                ...result,\n                pagination: {\n                    limit,\n                    page,\n                    total: result.total,\n                },\n            },\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nexport const getAttributes = (storeId: string) => async (dispatch: Dispatch<any>) => {\n    dispatch({\n        type: types.SET_ATTRIBUTE_LOADING,\n        payload: true,\n    });\n    try {\n        const result = await getAttributesApi(storeId);\n        dispatch({\n            type: types.SET_ATTRIBUTES,\n            payload: {\n                data: [...result],\n            },\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nexport const getWarehouses = (storeId: string) => async (dispatch: Dispatch<any>) => {\n    try {\n        const result = await getWarehousesApi(storeId);\n\n        dispatch({\n            type: types.SET_WAREHOUSES,\n            payload: result.data,\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nexport const getStocks = ({\n    storeId,\n    warehouseId,\n    productId,\n    categoryId,\n    brandId,\n    search,\n    page,\n    limit,\n    parentId,\n}: {\n    storeId: string;\n    warehouseId?: string;\n    productId?: string;\n    categoryId?: string;\n    brandId?: string;\n    search?: string;\n    page?: number;\n    limit?: number;\n    parentId?: string;\n}) => async (dispatch: Dispatch<any>) => {\n    try {\n        dispatch({\n            type: types.SET_STOCK_LOADING,\n            payload: { limit, page },\n        });\n\n        const result = await stockApi.getStocks({\n            storeId,\n            warehouseId,\n            productId,\n            categoryId,\n            brandId,\n            search,\n            page,\n            limit,\n            parentId,\n        });\n        dispatch({\n            type: types.SET_STOCKS,\n            payload: {\n                data: result.data,\n                pagination: {\n                    limit,\n                    page,\n                    total: result.total,\n                },\n            },\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nexport const getCustomers = ({\n    storeId,\n    page,\n    limit,\n    sort,\n    direction,\n    source,\n    search,\n    dateOfBirth,\n    filterDateBy,\n    fromAt,\n    toAt,\n    gender,\n}: ICustomersParams) => async (dispatch: any) => {\n    dispatch({\n        type: types.SET_CUSTOMERS_LOADING,\n        payload: { page, limit },\n    });\n\n    try {\n        const result = await getCustomersApi({\n            storeId,\n            limit,\n            page,\n            source,\n            search,\n            sort,\n            direction,\n            dateOfBirth,\n            filterDateBy,\n            fromAt,\n            toAt,\n            gender,\n        });\n        dispatch({\n            type: types.SET_CUSTOMERS,\n            payload: {\n                ...result,\n                pagination: {\n                    limit,\n                    page,\n                    total: result.total,\n                },\n            },\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nexport const getEnableSaleChannels = () => async (dispatch: any) => {\n    try {\n        const result = await saleChannelApi.getEnableSaleChannels();\n\n        dispatch({\n            type: types.SET_ENABLE_SALE_CHANNELS,\n            payload: result,\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nexport const storeAction = {\n    getStore,\n    getProduct,\n    getCategoriesByStore,\n    getOrders,\n    getAttributes,\n    getWarehouses,\n    getStocks,\n    getCustomers,\n    getEnableSaleChannels,\n};\n"]},"metadata":{},"sourceType":"module"}