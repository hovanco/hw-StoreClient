{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting/create-billing/state/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { message } from 'antd';\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { AliasPackage, createBuyOrder, createTransactionCode, EBillingPackageType, getHistoryPayment, getPackagesActive, getPendingBilling, Packages, BillingPeriods } from '../../../../api/billing-api';\nimport { convertPackages } from '../../../../helper/convert';\nimport { checkExpiredPackage, checkWarningTrialExpiration } from '../../../../helper/get-time';\nimport { hideLoading, hideWarningExperiedPackage, hideWarningExperiedTrial, showLoading, showWarningExperiedPackage, showWarningExperiedTrial } from './action';\nimport reducer, { initialReducer } from './reducer';\nimport types from './types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  state: initialReducer,\n  dispatch: () => {}\n};\nconst CreateBillingContext = /*#__PURE__*/createContext(initialContext);\nconst TIME_SHOW_FOR_PACKAGE = 10;\n\nconst ProviderBillingContext = ({\n  children,\n  packagesSelect,\n  billingCycle,\n  paymentMethod,\n  reorder\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialReducer);\n  return /*#__PURE__*/_jsxDEV(CreateBillingContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProviderBillingContext, \"VJ0NrqsrUUgLQmwbqOT1tAhbw88=\");\n\n_c = ProviderBillingContext;\n\nconst useBilling = () => {\n  _s2();\n\n  const value = useContext(CreateBillingContext);\n  const history = useHistory();\n  const storeId = useSelector(({\n    store\n  }) => store.data._id);\n  const storeCreateTime = useSelector(({\n    store\n  }) => store.data.createdAt);\n  const {\n    state,\n    dispatch\n  } = value;\n  /**\n   * init data for CreateBilling with param from url\n   * @param packagesSelectCode\n   * @param paymentMethod\n   * @param billingCycle\n   * @param reorder\n   */\n\n  const init = async (packagesSelectCode, paymentMethod, billingCycle, reorder) => {\n    try {\n      dispatch(showLoading());\n      await loadPackagesActive(false);\n      const currentPackage = state.packages.find(item => item.code === packagesSelectCode);\n      dispatch(hideLoading());\n      const initialState = {\n        paymentMethod\n      };\n\n      if (!reorder) {\n        initialState.packagesSelect = currentPackage ? [currentPackage] : [];\n        initialState.billingCycle = billingCycle || null;\n      }\n\n      dispatch({\n        type: types.INIT_STATE,\n        payload: initialState\n      });\n    } catch (error) {\n      dispatch(hideLoading());\n    }\n  };\n  /**\n   * Get list package and check experiod to show warning\n   * @param showLoad\n   */\n\n\n  const loadPackagesActive = async showLoad => {\n    var _pkgsActive$;\n\n    if (!storeId) return;\n    hideWarningExperiedTrial();\n    hideWarningExperiedPackage();\n    showLoad && dispatch(showLoading());\n    const pkgsActive = await getPackagesActive(storeId);\n    const pkgsInactive = await getPendingBilling(storeId);\n    const listName = [];\n    const listPackage = [];\n    if ((pkgsActive === null || pkgsActive === void 0 ? void 0 : pkgsActive.length) === 0) dispatch(showWarningExperiedTrial());\n    const packageTrial = pkgsActive.find(item => item.packageType === EBillingPackageType.Trial);\n\n    if (packageTrial && packageTrial.packageType === EBillingPackageType.Trial && checkWarningTrialExpiration(packageTrial.expiredAt)) {\n      dispatch(showWarningExperiedTrial());\n    }\n\n    const pkgsActiveConvert = convertPackages(pkgsActive);\n    pkgsActiveConvert.forEach(item => {\n      let duration = TIME_SHOW_FOR_PACKAGE;\n      const checkExpired = checkExpiredPackage(item.expiredAt, duration);\n\n      if (checkExpired) {\n        if (item.packageType === EBillingPackageType.Trial) {\n          listName.push(AliasPackage[EBillingPackageType.Trial]);\n        }\n\n        const pkg = Packages.find(pack => item.packageType === pack.code);\n        pkg && listPackage.push(pkg);\n        listName.push(AliasPackage[item.packageType]);\n        dispatch(showWarningExperiedPackage());\n      }\n    });\n    dispatch({\n      type: types.CHANGE_VALUE_FIELD,\n      payload: {\n        field: 'billingCycle',\n        value: (pkgsActive === null || pkgsActive === void 0 ? void 0 : (_pkgsActive$ = pkgsActive[0]) === null || _pkgsActive$ === void 0 ? void 0 : _pkgsActive$.period) || BillingPeriods.SixMonths\n      }\n    });\n    dispatch({\n      type: types.UPDATE_PACKAGES,\n      payload: listPackage\n    });\n    dispatch({\n      type: types.SET_PACKAGES_NEED_EXTENED,\n      payload: listPackage\n    });\n    dispatch({\n      type: types.SET_NAME_PACKAGES_EXPERIED,\n      payload: listName\n    });\n    dispatch({\n      type: types.GET_PACKAGES_ACTIVE,\n      payload: pkgsActive\n    });\n    dispatch({\n      type: types.GET_PACKAGES_INACTIVE,\n      payload: pkgsInactive\n    });\n    dispatch({\n      type: types.GET_ALL_PACKAGES,\n      payload: pkgsActive\n    });\n    await getListHistoryPayment();\n  };\n  /**\n   * update data for package selected\n   * @param data\n   */\n\n\n  const updatePackages = data => {\n    dispatch({\n      type: types.UPDATE_PACKAGES,\n      payload: data\n    });\n  };\n\n  const changeValueField = data => {\n    dispatch({\n      type: types.CHANGE_VALUE_FIELD,\n      payload: data\n    });\n  };\n\n  const changeCycleForPackage = data => {\n    dispatch({\n      type: types.CHANGE_CYCLE_FIELD,\n      payload: data\n    });\n  };\n\n  const initOrderState = data => {\n    dispatch({\n      type: types.INIT_STATE,\n      payload: data\n    });\n  };\n\n  const resetListNeedExtend = () => {\n    dispatch({\n      type: types.SET_PACKAGES_NEED_EXTENED,\n      payload: []\n    });\n  };\n\n  const getListHistoryPayment = async () => {\n    if (!storeId) return;\n    const listPayment = await getHistoryPayment(storeId);\n    dispatch({\n      type: types.GET_HISTORY_PAYMENT,\n      payload: listPayment\n    });\n  };\n  /**\n   * buy package\n   */\n\n\n  const createPayment = async () => {\n    try {\n      if (!storeId) return;\n      const transactionCode = await createTransactionCode(storeId, null);\n      const data = {\n        paymentType: state.paymentMethod,\n        period: state.billingCycle,\n        transactionCode,\n        packageType: state.packagesSelect.reduce((prevValue, item) => prevValue + item.code, 0)\n      };\n      await createBuyOrder(storeId, data);\n      message.success('Mua gói thành công');\n      await loadPackagesActive(false);\n      history.replace('/setting/billings/list');\n    } catch (error) {\n      message.error('Đã có lỗi xảy ra');\n    }\n  };\n\n  const genTransationCode = async () => {\n    try {\n      if (!storeId) return;\n      const transactionCode = await createTransactionCode(storeId, null);\n      setTransactionCode(transactionCode);\n    } catch (error) {\n      setTransactionCode();\n      message.error('Đã có lỗi xảy ra');\n    }\n  };\n\n  const setTransactionCode = (code = '') => {\n    dispatch({\n      type: types.SET_TRANSACTION_CODE,\n      payload: code\n    });\n  };\n\n  const resetTransactionCode = () => setTransactionCode();\n\n  const closeWaringExperiedPackage = () => dispatch(hideWarningExperiedPackage());\n\n  const closeWaringExperiedTrail = () => dispatch(hideWarningExperiedTrial());\n\n  return { ...state,\n    changeValueField,\n    initOrderState,\n    updatePackages,\n    changeCycleForPackage,\n    createPayment,\n    closeWaringExperiedPackage,\n    closeWaringExperiedTrail,\n    init,\n    loadPackagesActive,\n    genTransationCode,\n    resetTransactionCode,\n    resetListNeedExtend\n  };\n};\n\n_s2(useBilling, \"6irHUy6lI49pey+smi2k+ycZahs=\", false, function () {\n  return [useHistory, useSelector, useSelector];\n});\n\nexport { ProviderBillingContext as default, useBilling };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderBillingContext\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting/create-billing/state/context.tsx"],"names":["message","React","createContext","useContext","useReducer","useSelector","useHistory","AliasPackage","createBuyOrder","createTransactionCode","EBillingPackageType","getHistoryPayment","getPackagesActive","getPendingBilling","Packages","BillingPeriods","convertPackages","checkExpiredPackage","checkWarningTrialExpiration","hideLoading","hideWarningExperiedPackage","hideWarningExperiedTrial","showLoading","showWarningExperiedPackage","showWarningExperiedTrial","reducer","initialReducer","types","initialContext","state","dispatch","CreateBillingContext","TIME_SHOW_FOR_PACKAGE","ProviderBillingContext","children","packagesSelect","billingCycle","paymentMethod","reorder","useBilling","value","history","storeId","store","data","_id","storeCreateTime","createdAt","init","packagesSelectCode","loadPackagesActive","currentPackage","packages","find","item","code","initialState","type","INIT_STATE","payload","error","showLoad","pkgsActive","pkgsInactive","listName","listPackage","length","packageTrial","packageType","Trial","expiredAt","pkgsActiveConvert","forEach","duration","checkExpired","push","pkg","pack","CHANGE_VALUE_FIELD","field","period","SixMonths","UPDATE_PACKAGES","SET_PACKAGES_NEED_EXTENED","SET_NAME_PACKAGES_EXPERIED","GET_PACKAGES_ACTIVE","GET_PACKAGES_INACTIVE","GET_ALL_PACKAGES","getListHistoryPayment","updatePackages","changeValueField","changeCycleForPackage","CHANGE_CYCLE_FIELD","initOrderState","resetListNeedExtend","listPayment","GET_HISTORY_PAYMENT","createPayment","transactionCode","paymentType","reduce","prevValue","success","replace","genTransationCode","setTransactionCode","SET_TRANSACTION_CODE","resetTransactionCode","closeWaringExperiedPackage","closeWaringExperiedTrail","default"],"mappings":"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","sourcesContent":["import { message } from 'antd';\nimport React, { createContext, FC, ReactNode, useContext, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n    AliasPackage,\n    createBuyOrder,\n    createTransactionCode,\n    EBillingPackageType,\n    FormBuy,\n    getHistoryPayment,\n    getPackagesActive,\n    getPendingBilling,\n    Packages,\n    BillingPeriods\n} from '../../../../api/billing-api';\nimport { convertPackages } from '../../../../helper/convert';\nimport {\n    checkExpiredPackage,\n    checkExpiredTrialForLegacyStore,\n    checkWarningTrialExpiration,\n} from '../../../../helper/get-time';\nimport { IStoreState } from '../../../../reducers/storeState/reducer';\nimport { IPackageBiling } from '../../list-billings/package-biling';\nimport {\n    hideLoading,\n    hideWarningExperiedPackage,\n    hideWarningExperiedTrial,\n    showLoading,\n    showWarningExperiedPackage,\n    showWarningExperiedTrial,\n} from './action';\nimport { IContext, IPackage } from './interface';\nimport reducer, { initialReducer } from './reducer';\nimport types from './types';\n\nconst initialContext = {\n    state: initialReducer,\n    dispatch: () => {},\n};\n\nconst CreateBillingContext = createContext<IContext>(initialContext);\n\nconst TIME_SHOW_FOR_PACKAGE = 10;\n\ninterface Props {\n    children: ReactNode;\n    packagesSelect?: string;\n    billingCycle?: string;\n    paymentMethod?: number;\n    reorder?: boolean;\n}\n\nconst ProviderBillingContext: FC<Props> = ({\n    children,\n    packagesSelect,\n    billingCycle,\n    paymentMethod,\n    reorder,\n}) => {\n    const [state, dispatch] = useReducer(reducer, initialReducer);\n    return (\n        <CreateBillingContext.Provider value={{ state, dispatch }}>\n            {children}\n        </CreateBillingContext.Provider>\n    );\n};\n\nconst useBilling = () => {\n    const value = useContext(CreateBillingContext);\n    const history = useHistory();\n\n    const storeId = useSelector(({ store }: { store: IStoreState }) => store.data._id);\n    const storeCreateTime = useSelector(\n        ({ store }: { store: IStoreState }) => store.data.createdAt\n    );\n\n    const { state, dispatch } = value;\n    /**\n     * init data for CreateBilling with param from url\n     * @param packagesSelectCode\n     * @param paymentMethod\n     * @param billingCycle\n     * @param reorder\n     */\n    const init = async (\n        packagesSelectCode: number,\n        paymentMethod: number,\n        billingCycle: number,\n        reorder: boolean\n    ) => {\n        try {\n            dispatch(showLoading());\n            await loadPackagesActive(false);\n            const currentPackage = state.packages.find(\n                (item: IPackageBiling) => item.code === packagesSelectCode\n            );\n            dispatch(hideLoading());\n            const initialState: any = {\n                paymentMethod,\n            };\n            if (!reorder) {\n                initialState.packagesSelect = currentPackage ? [currentPackage] : [];\n                initialState.billingCycle = billingCycle || null;\n            }\n            dispatch({\n                type: types.INIT_STATE,\n                payload: initialState,\n            });\n        } catch (error) {\n            dispatch(hideLoading());\n        }\n    };\n    /**\n     * Get list package and check experiod to show warning\n     * @param showLoad\n     */\n    const loadPackagesActive = async (showLoad: boolean) => {\n        if (!storeId) return;\n        hideWarningExperiedTrial();\n        hideWarningExperiedPackage();\n        showLoad && dispatch(showLoading());\n        const pkgsActive: IPackage[] = await getPackagesActive(storeId);\n        const pkgsInactive: IPackage[] = await getPendingBilling(storeId);\n        const listName: string[] = [];\n        const listPackage: IPackageBiling[] = [];\n        if (pkgsActive?.length === 0) dispatch(showWarningExperiedTrial());\n        \n        const packageTrial = pkgsActive.find(\n            (item) => item.packageType === EBillingPackageType.Trial\n        );\n        if (packageTrial &&\n            packageTrial.packageType === EBillingPackageType.Trial &&\n            checkWarningTrialExpiration(packageTrial.expiredAt)) {\n                dispatch(showWarningExperiedTrial());\n            }\n        const pkgsActiveConvert = convertPackages(pkgsActive);\n        pkgsActiveConvert.forEach((item: IPackage) => {\n            let duration = TIME_SHOW_FOR_PACKAGE;\n            const checkExpired = checkExpiredPackage(item.expiredAt, duration);\n            if (checkExpired) {\n                if (item.packageType === EBillingPackageType.Trial) {\n                    listName.push(AliasPackage[EBillingPackageType.Trial])\n                }\n                const pkg = Packages.find(\n                    (pack: IPackageBiling) => item.packageType === pack.code\n                );\n                pkg && listPackage.push(pkg);\n                listName.push(AliasPackage[item.packageType]);\n                dispatch(showWarningExperiedPackage());\n            }\n        });\n        dispatch({\n            type: types.CHANGE_VALUE_FIELD,\n            payload: {\n                field: 'billingCycle',\n                value: pkgsActive?.[0]?.period || BillingPeriods.SixMonths,\n            },\n        });\n        dispatch({\n            type: types.UPDATE_PACKAGES,\n            payload: listPackage,\n        });\n        dispatch({\n            type: types.SET_PACKAGES_NEED_EXTENED,\n            payload: listPackage,\n        });\n        dispatch({\n            type: types.SET_NAME_PACKAGES_EXPERIED,\n            payload: listName,\n        });\n        dispatch({\n            type: types.GET_PACKAGES_ACTIVE,\n            payload: pkgsActive,\n        });\n        dispatch({\n            type: types.GET_PACKAGES_INACTIVE,\n            payload: pkgsInactive,\n        });\n        dispatch({\n            type: types.GET_ALL_PACKAGES,\n            payload: pkgsActive,\n        });\n        await getListHistoryPayment();\n    };\n    /**\n     * update data for package selected\n     * @param data\n     */\n    const updatePackages = (data: any) => {\n        dispatch({\n            type: types.UPDATE_PACKAGES,\n            payload: data,\n        });\n    };\n\n    const changeValueField = (data: { field: string; value: any }) => {\n        dispatch({\n            type: types.CHANGE_VALUE_FIELD,\n            payload: data,\n        });\n    };\n\n    const changeCycleForPackage = (data: number) => {\n        dispatch({\n            type: types.CHANGE_CYCLE_FIELD,\n            payload: data,\n        });\n    };\n\n    const initOrderState = (data: any) => {\n        dispatch({\n            type: types.INIT_STATE,\n            payload: data,\n        });\n    };\n\n    const resetListNeedExtend = () => {\n        dispatch({\n            type: types.SET_PACKAGES_NEED_EXTENED,\n            payload: [],\n        });\n    };\n\n    const getListHistoryPayment = async () => {\n        if (!storeId) return;\n        const listPayment = await getHistoryPayment(storeId);\n        dispatch({\n            type: types.GET_HISTORY_PAYMENT,\n            payload: listPayment,\n        });\n    }\n\n    /**\n     * buy package\n     */\n    const createPayment = async () => {\n        try {\n            if (!storeId) return;\n            const transactionCode = await createTransactionCode(storeId, null);\n            const data: FormBuy = {\n                paymentType: state.paymentMethod,\n                period: state.billingCycle,\n                transactionCode,\n                packageType: state.packagesSelect.reduce(\n                    (prevValue: number, item: IPackageBiling) => prevValue + item.code,\n                    0\n                ),\n            };\n            await createBuyOrder(storeId, data);\n            message.success('Mua gói thành công');\n            await loadPackagesActive(false);\n            history.replace('/setting/billings/list');\n        } catch (error) {\n            message.error('Đã có lỗi xảy ra');\n        }\n    };\n\n    const genTransationCode = async () => {\n        try {\n            if (!storeId) return;\n            const transactionCode = await createTransactionCode(storeId, null);\n            setTransactionCode(transactionCode);\n        } catch (error) {\n            setTransactionCode();\n            message.error('Đã có lỗi xảy ra');\n        }\n    };\n\n    const setTransactionCode = (code: string = '') => {\n        dispatch({\n            type: types.SET_TRANSACTION_CODE,\n            payload: code,\n        });\n    };\n\n    const resetTransactionCode = () => setTransactionCode();\n\n    const closeWaringExperiedPackage = () => dispatch(hideWarningExperiedPackage());\n    const closeWaringExperiedTrail = () => dispatch(hideWarningExperiedTrial());\n\n    return {\n        ...state,\n        changeValueField,\n        initOrderState,\n        updatePackages,\n        changeCycleForPackage,\n        createPayment,\n        closeWaringExperiedPackage,\n        closeWaringExperiedTrail,\n        init,\n        loadPackagesActive,\n        genTransationCode,\n        resetTransactionCode,\n        resetListNeedExtend,\n    };\n};\n\nexport { ProviderBillingContext as default, useBilling };\n"]},"metadata":{},"sourceType":"module"}