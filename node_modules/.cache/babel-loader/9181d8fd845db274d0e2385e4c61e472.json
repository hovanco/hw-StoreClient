{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting/general-information/state/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useReducer } from 'react';\nimport { getBillingPackages } from '../../../../api/billing-api';\nimport reducer, { initialReducer } from './reducer';\nimport types from './types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  state: initialReducer,\n  dispatch: () => {}\n};\nconst CreateBillingContext = /*#__PURE__*/createContext(initialContext);\n\nconst ProviderBillingContext = ({\n  children,\n  packagesSelect,\n  billingCycle\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialReducer);\n\n  const getPackages = async () => {\n    const response = await getBillingPackages();\n    const currentPackage = response.find(item => item.code === Number(packagesSelect));\n    const initialState = {\n      packagesSelect: currentPackage ? [currentPackage] : [],\n      billingCycle: billingCycle ? parseFloat(billingCycle) : null,\n      packages: response\n    };\n    dispatch({\n      type: types.INIT_STATE,\n      payload: initialState\n    });\n  };\n\n  useEffect(() => {\n    getPackages(); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CreateBillingContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProviderBillingContext, \"yJQjWISUpACQ0zYD4+uioiv8V1M=\");\n\n_c = ProviderBillingContext;\n\nconst useBilling = () => {\n  _s2();\n\n  const value = useContext(CreateBillingContext);\n  const {\n    state,\n    dispatch\n  } = value;\n\n  const updatePackages = data => {\n    let packagesSelect = [...state.packagesSelect];\n    const isExist = packagesSelect.some(item => item.code === data.code);\n\n    if (isExist) {\n      packagesSelect = packagesSelect.filter(item => item.code !== data.code);\n    } else {\n      packagesSelect.push(data);\n    }\n\n    dispatch({\n      type: types.UPDATE_PACKAGES,\n      payload: packagesSelect\n    });\n  };\n\n  const changeValueField = data => {\n    dispatch({\n      type: types.CHANGE_VALUE_FIELD,\n      payload: data\n    });\n  };\n\n  const initOrderState = data => {\n    dispatch({\n      type: types.INIT_STATE,\n      payload: data\n    });\n  };\n\n  return { ...state,\n    changeValueField,\n    initOrderState,\n    updatePackages\n  };\n};\n\n_s2(useBilling, \"ksutO2/Ix3UeCrGnhyM+QEP505Y=\");\n\nexport { ProviderBillingContext as default, useBilling };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderBillingContext\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting/general-information/state/context.tsx"],"names":["React","createContext","useContext","useEffect","useReducer","getBillingPackages","reducer","initialReducer","types","initialContext","state","dispatch","CreateBillingContext","ProviderBillingContext","children","packagesSelect","billingCycle","getPackages","response","currentPackage","find","item","code","Number","initialState","parseFloat","packages","type","INIT_STATE","payload","useBilling","value","updatePackages","data","isExist","some","filter","push","UPDATE_PACKAGES","changeValueField","CHANGE_VALUE_FIELD","initOrderState","default"],"mappings":"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","sourcesContent":["import React, { createContext, FC, ReactNode, useContext, useEffect, useReducer } from 'react';\nimport { getBillingPackages } from '../../../../api/billing-api';\nimport { IPackageBiling } from '../../list-billings/package-biling';\nimport { IContext } from './interface';\nimport reducer, { initialReducer } from './reducer';\nimport types from './types';\n\nconst initialContext = {\n    state: initialReducer,\n    dispatch: () => {},\n};\n\nconst CreateBillingContext = createContext<IContext>(initialContext);\n\ninterface Props {\n    children: ReactNode;\n    packagesSelect?: string;\n    billingCycle?: string;\n}\n\nconst ProviderBillingContext: FC<Props> = ({ children, packagesSelect, billingCycle }) => {\n    const [state, dispatch] = useReducer(reducer, initialReducer);\n\n    const getPackages = async () => {\n        const response = await getBillingPackages();\n        const currentPackage = response.find(\n            (item: IPackageBiling) => item.code === Number(packagesSelect)\n        );\n        const initialState = {\n            packagesSelect: currentPackage ? [currentPackage] : [],\n            billingCycle: billingCycle ? parseFloat(billingCycle) : null,\n            packages: response,\n        };\n        dispatch({\n            type: types.INIT_STATE,\n            payload: initialState,\n        });\n    };\n\n    useEffect(() => {\n        getPackages();\n        // eslint-disable-next-line\n    }, []);\n\n    return (\n        <CreateBillingContext.Provider value={{ state, dispatch }}>\n            {children}\n        </CreateBillingContext.Provider>\n    );\n};\n\nconst useBilling = () => {\n    const value = useContext(CreateBillingContext);\n\n    const { state, dispatch } = value;\n\n    const updatePackages = (data: any) => {\n        let packagesSelect = [...state.packagesSelect];\n        const isExist = packagesSelect.some((item) => item.code === data.code);\n        if (isExist) {\n            packagesSelect = packagesSelect.filter((item) => item.code !== data.code);\n        } else {\n            packagesSelect.push(data);\n        }\n        dispatch({\n            type: types.UPDATE_PACKAGES,\n            payload: packagesSelect,\n        });\n    };\n\n    const changeValueField = (data: { field: string; value: any }) => {\n        dispatch({\n            type: types.CHANGE_VALUE_FIELD,\n            payload: data,\n        });\n    };\n\n    const initOrderState = (data: any) => {\n        dispatch({\n            type: types.INIT_STATE,\n            payload: data,\n        });\n    };\n\n    return {\n        ...state,\n        changeValueField,\n        initOrderState,\n        updatePackages,\n    };\n};\n\nexport { ProviderBillingContext as default, useBilling };\n"]},"metadata":{},"sourceType":"module"}