{"ast":null,"code":"import axios from 'axios';\nimport queryString from 'query-string';\nimport constants from '../constants';\nimport authTypes from '../reducers/authState/authTypes';\nimport store from '../store';\nimport authApi from './auth-api';\nimport { checkToken, getToken, getTokenLocal, removeToken, setToken } from './token';\nconst axiosClient = axios.create({\n  baseURL: constants.URL_API,\n  headers: {\n    'content-type': 'application/json'\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(config => {\n  const accessToken = getToken('accessToken');\n\n  if (accessToken) {\n    config.headers['Authorization'] = 'Bearer ' + accessToken;\n  }\n\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n\n  if (error.response.status === 401 && !originalRequest._retry) {\n    const refreshToken = getToken('refreshToken');\n\n    if (refreshToken) {\n      const isValidRefreshToken = checkToken(refreshToken);\n\n      if (!isValidRefreshToken) {\n        return Promise.reject(error);\n      }\n\n      try {\n        const response = await authApi.refreshAccessToken(refreshToken);\n        const tokenLocal = getTokenLocal();\n        const {\n          accessToken\n        } = response;\n        setToken({\n          token: { ...tokenLocal,\n            accessToken\n          },\n          remember: true\n        });\n        store.dispatch({\n          type: authTypes.UPDATE_TOKEN,\n          payload: {\n            accessToken,\n            type: 'Bearer'\n          }\n        });\n        originalRequest._retry = true;\n        axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n        return axiosClient(originalRequest);\n      } catch (err) {\n        if (err.response.status === 401) {\n          removeToken();\n        }\n\n        return Promise.reject(err);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosClient;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/api/axios-client.ts"],"names":["axios","queryString","constants","authTypes","store","authApi","checkToken","getToken","getTokenLocal","removeToken","setToken","axiosClient","create","baseURL","URL_API","headers","paramsSerializer","params","stringify","interceptors","request","use","config","accessToken","response","error","originalRequest","status","_retry","refreshToken","isValidRefreshToken","Promise","reject","refreshAccessToken","tokenLocal","token","remember","dispatch","type","UPDATE_TOKEN","payload","defaults","common","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,aAA/B,EAA8CC,WAA9C,EAA2DC,QAA3D,QAA2E,SAA3E;AAEA,MAAMC,WAAW,GAAGX,KAAK,CAACY,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEX,SAAS,CAACY,OADU;AAE7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFoB;AAK7BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYhB,WAAW,CAACiB,SAAZ,CAAsBD,MAAtB;AALD,CAAb,CAApB;AAQAN,WAAW,CAACQ,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAsCC,MAAD,IAAY;AAC7C,QAAMC,WAAW,GAAGhB,QAAQ,CAAC,aAAD,CAA5B;;AAEA,MAAIgB,WAAJ,EAAiB;AACbD,IAAAA,MAAM,CAACP,OAAP,CAAe,eAAf,IAAkC,YAAYQ,WAA9C;AACH;;AACD,SAAOD,MAAP;AACH,CAPD;AASAX,WAAW,CAACQ,YAAZ,CAAyBK,QAAzB,CAAkCH,GAAlC,CACKG,QAAD,IAAc;AACV,SAAOA,QAAP;AACH,CAHL,EAKI,MAAOC,KAAP,IAAiB;AACb,QAAMC,eAAe,GAAGD,KAAK,CAACH,MAA9B;;AAEA,MAAIG,KAAK,CAACD,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACD,eAAe,CAACE,MAAtD,EAA8D;AAC1D,UAAMC,YAAY,GAAGtB,QAAQ,CAAC,cAAD,CAA7B;;AAEA,QAAIsB,YAAJ,EAAkB;AACd,YAAMC,mBAAmB,GAAGxB,UAAU,CAACuB,YAAD,CAAtC;;AAEA,UAAI,CAACC,mBAAL,EAA0B;AACtB,eAAOC,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACH;;AAED,UAAI;AACA,cAAMD,QAAQ,GAAG,MAAMnB,OAAO,CAAC4B,kBAAR,CAA2BJ,YAA3B,CAAvB;AACA,cAAMK,UAAU,GAAG1B,aAAa,EAAhC;AACA,cAAM;AAAEe,UAAAA;AAAF,YAAkBC,QAAxB;AAEAd,QAAAA,QAAQ,CAAC;AACLyB,UAAAA,KAAK,EAAE,EACH,GAAID,UADD;AAEHX,YAAAA;AAFG,WADF;AAKLa,UAAAA,QAAQ,EAAE;AALL,SAAD,CAAR;AAQAhC,QAAAA,KAAK,CAACiC,QAAN,CAAe;AACXC,UAAAA,IAAI,EAAEnC,SAAS,CAACoC,YADL;AAEXC,UAAAA,OAAO,EAAE;AACLjB,YAAAA,WADK;AAELe,YAAAA,IAAI,EAAE;AAFD;AAFE,SAAf;AAQAZ,QAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AACA5B,QAAAA,KAAK,CAACyC,QAAN,CAAe1B,OAAf,CAAuB2B,MAAvB,CAA8B,eAA9B,IAAkD,UAASnB,WAAY,EAAvE;AAEA,eAAOZ,WAAW,CAACe,eAAD,CAAlB;AACH,OAzBD,CAyBE,OAAOiB,GAAP,EAAY;AACV,YAAIA,GAAG,CAACnB,QAAJ,CAAaG,MAAb,KAAwB,GAA5B,EAAiC;AAC7BlB,UAAAA,WAAW;AACd;;AAED,eAAOsB,OAAO,CAACC,MAAR,CAAeW,GAAf,CAAP;AACH;AACJ;;AAED,WAAOZ,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACH;;AAED,SAAOM,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACH,CAxDL;AA2DA,eAAed,WAAf","sourcesContent":["import axios from 'axios';\nimport queryString from 'query-string';\nimport { IToken } from '../components/refresh-token/token';\nimport constants from '../constants';\nimport authTypes from '../reducers/authState/authTypes';\nimport store from '../store';\nimport authApi from './auth-api';\nimport { checkToken, getToken, getTokenLocal, removeToken, setToken } from './token';\n\nconst axiosClient = axios.create({\n    baseURL: constants.URL_API,\n    headers: {\n        'content-type': 'application/json',\n    },\n    paramsSerializer: (params) => queryString.stringify(params),\n});\n\naxiosClient.interceptors.request.use((config) => {\n    const accessToken = getToken('accessToken');\n\n    if (accessToken) {\n        config.headers['Authorization'] = 'Bearer ' + accessToken;\n    }\n    return config;\n});\n\naxiosClient.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n\n    async (error) => {\n        const originalRequest = error.config;\n\n        if (error.response.status === 401 && !originalRequest._retry) {\n            const refreshToken = getToken('refreshToken');\n\n            if (refreshToken) {\n                const isValidRefreshToken = checkToken(refreshToken);\n\n                if (!isValidRefreshToken) {\n                    return Promise.reject(error);\n                }\n\n                try {\n                    const response = await authApi.refreshAccessToken(refreshToken);\n                    const tokenLocal = getTokenLocal();\n                    const { accessToken } = response;\n\n                    setToken({\n                        token: {\n                            ...(tokenLocal as IToken),\n                            accessToken,\n                        },\n                        remember: true,\n                    });\n\n                    store.dispatch({\n                        type: authTypes.UPDATE_TOKEN,\n                        payload: {\n                            accessToken,\n                            type: 'Bearer',\n                        },\n                    });\n\n                    originalRequest._retry = true;\n                    axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n\n                    return axiosClient(originalRequest);\n                } catch (err) {\n                    if (err.response.status === 401) {\n                        removeToken();\n                    }\n\n                    return Promise.reject(err);\n                }\n            }\n\n            return Promise.reject(error);\n        }\n\n        return Promise.reject(error);\n    }\n);\n\nexport default axiosClient;\n"]},"metadata":{},"sourceType":"module"}