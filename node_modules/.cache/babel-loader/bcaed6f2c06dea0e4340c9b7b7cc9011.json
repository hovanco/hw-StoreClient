{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport authApi from '../api/auth-api';\nimport { getToken } from '../api/token';\nimport { getUserAction, logout } from '../reducers/authState/authAction';\nexport function useProgressAuth() {\n  _s();\n\n  const [progress, setProgress] = useState(true);\n  const dispatch = useDispatch();\n  const isAuth = useSelector(({\n    auth\n  }) => auth.isAuth);\n  const loading = useSelector(({\n    auth\n  }) => auth.loading);\n  useEffect(() => {\n    async function processAuth() {\n      const refreshToken = getToken('refreshToken');\n\n      if (window.location.pathname === '/save-token' || !refreshToken) {\n        return;\n      }\n\n      try {\n        const response = await authApi.existingRefreshToken(refreshToken);\n\n        if (!response.existingRefreshToken) {\n          dispatch(logout(false));\n          return;\n        }\n\n        dispatch(getUserAction());\n      } catch (error) {\n        dispatch(logout(false));\n      } finally {\n        setProgress(false);\n      }\n    }\n\n    if (isAuth) {\n      processAuth();\n    } else {\n      setProgress(false);\n    }\n  }, []);\n  return useMemo(() => ({\n    loading,\n    isAuth,\n    progress\n  }), [loading, isAuth, progress]);\n}\n\n_s(useProgressAuth, \"fPjpyQHzeeGZL6dHmdiyW0PWk6k=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/app-router/use-progress-auth.ts"],"names":["useEffect","useMemo","useState","useDispatch","useSelector","authApi","getToken","getUserAction","logout","useProgressAuth","progress","setProgress","dispatch","isAuth","auth","loading","processAuth","refreshToken","window","location","pathname","response","existingRefreshToken","error"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,kCAAtC;AAOA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAC9B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAU,IAAV,CAAxC;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,MAAM,GAAGT,WAAW,CAAC,CAAC;AAAEU,IAAAA;AAAF,GAAD,KAAyBA,IAAI,CAACD,MAA/B,CAA1B;AACA,QAAME,OAAO,GAAGX,WAAW,CAAC,CAAC;AAAEU,IAAAA;AAAF,GAAD,KAAyBA,IAAI,CAACC,OAA/B,CAA3B;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAegB,WAAf,GAA6B;AACzB,YAAMC,YAAY,GAAGX,QAAQ,CAAC,cAAD,CAA7B;;AAEA,UAAIY,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,aAA7B,IAA8C,CAACH,YAAnD,EAAiE;AAC7D;AACH;;AAED,UAAI;AACA,cAAMI,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,oBAAR,CAA6BL,YAA7B,CAAvB;;AAEA,YAAI,CAACI,QAAQ,CAACC,oBAAd,EAAoC;AAChCV,UAAAA,QAAQ,CAACJ,MAAM,CAAC,KAAD,CAAP,CAAR;AACA;AACH;;AAEDI,QAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;AACH,OATD,CASE,OAAOgB,KAAP,EAAc;AACZX,QAAAA,QAAQ,CAACJ,MAAM,CAAC,KAAD,CAAP,CAAR;AACH,OAXD,SAWU;AACNG,QAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ;;AAED,QAAIE,MAAJ,EAAY;AACRG,MAAAA,WAAW;AACd,KAFD,MAEO;AACHL,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ,GA7BQ,EA6BN,EA7BM,CAAT;AA+BA,SAAOV,OAAO,CAAC,OAAO;AAAEc,IAAAA,OAAF;AAAWF,IAAAA,MAAX;AAAmBH,IAAAA;AAAnB,GAAP,CAAD,EAAwC,CAACK,OAAD,EAAUF,MAAV,EAAkBH,QAAlB,CAAxC,CAAd;AACH;;GAtCeD,e;UAEKN,W,EACFC,W,EACCA,W","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport authApi from '../api/auth-api';\nimport { getToken } from '../api/token';\nimport { getUserAction, logout } from '../reducers/authState/authAction';\nimport { IStorageState } from '../reducers/authState/authReducer';\n\ninterface AuthState {\n    auth: IStorageState;\n}\n\nexport function useProgressAuth() {\n    const [progress, setProgress] = useState<boolean>(true);\n    const dispatch = useDispatch();\n    const isAuth = useSelector(({ auth }: AuthState) => auth.isAuth);\n    const loading = useSelector(({ auth }: AuthState) => auth.loading);\n\n    useEffect(() => {\n        async function processAuth() {\n            const refreshToken = getToken('refreshToken');\n\n            if (window.location.pathname === '/save-token' || !refreshToken) {\n                return;\n            }\n\n            try {\n                const response = await authApi.existingRefreshToken(refreshToken);\n\n                if (!response.existingRefreshToken) {\n                    dispatch(logout(false));\n                    return;\n                }\n\n                dispatch(getUserAction());\n            } catch (error) {\n                dispatch(logout(false));\n            } finally {\n                setProgress(false);\n            }\n        }\n\n        if (isAuth) {\n            processAuth();\n        } else {\n            setProgress(false);\n        }\n    }, []);\n\n    return useMemo(() => ({ loading, isAuth, progress }), [loading, isAuth, progress]);\n}\n"]},"metadata":{},"sourceType":"module"}