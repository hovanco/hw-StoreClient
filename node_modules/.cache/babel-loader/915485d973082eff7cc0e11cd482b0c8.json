{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/app-router/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { ConnectedRouter } from 'connected-react-router';\nimport React, { lazy, Suspense } from 'react';\nimport { useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Loading } from '../components';\nimport CreateStore from '../pages/create-store';\nimport { history } from '../store';\nimport { useProgressAuth } from './use-progress-auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthPage = /*#__PURE__*/lazy(_c = () => import('../pages/auth-page/AuthPage'));\n_c2 = AuthPage;\nconst Dashboard = /*#__PURE__*/lazy(_c3 = () => import('../pages/dashboard'));\n_c4 = Dashboard;\n\nfunction AppRouter() {\n  _s();\n\n  const store = useSelector(state => state.store.data);\n  const {\n    loading,\n    isAuth,\n    progress\n  } = useProgressAuth();\n\n  if (loading && isAuth || progress) {\n    return /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (1 > 0) {\n    return /*#__PURE__*/_jsxDEV(CreateStore, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    forceRefresh: true,\n    children: /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(Loading, {\n        full: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 33\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(ConnectedRouter, {\n        history: history,\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          render: () => {\n            if (isAuth) {\n              if (!store._id) return /*#__PURE__*/_jsxDEV(CreateStore, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 56\n              }, this);\n              return /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 40\n              }, this);\n            }\n\n            return /*#__PURE__*/_jsxDEV(AuthPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 36\n            }, this);\n          },\n          path: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AppRouter, \"agP/URT6VS3Fmp4EoVoQ39mZf7M=\", false, function () {\n  return [useSelector, useProgressAuth];\n});\n\n_c5 = AppRouter;\nexport default AppRouter;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AuthPage$lazy\");\n$RefreshReg$(_c2, \"AuthPage\");\n$RefreshReg$(_c3, \"Dashboard$lazy\");\n$RefreshReg$(_c4, \"Dashboard\");\n$RefreshReg$(_c5, \"AppRouter\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/app-router/index.tsx"],"names":["ConnectedRouter","React","lazy","Suspense","useSelector","BrowserRouter","Router","Route","Loading","CreateStore","history","useProgressAuth","AuthPage","Dashboard","AppRouter","store","state","data","loading","isAuth","progress","_id"],"mappings":";;;AAAA,SAASA,eAAT,QAAgC,wBAAhC;AACA,OAAOC,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,QAA+C,kBAA/C;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,SAASC,eAAT,QAAgC,qBAAhC;;AAEA,MAAMC,QAAQ,gBAAGV,IAAI,MAAC,MAAM,OAAO,6BAAP,CAAP,CAArB;MAAMU,Q;AACN,MAAMC,SAAS,gBAAGX,IAAI,OAAC,MAAM,OAAO,oBAAP,CAAP,CAAtB;MAAMW,S;;AAGN,SAASC,SAAT,GAAqB;AAAA;;AACjB,QAAMC,KAAK,GAAGX,WAAW,CAAEY,KAAD,IAAmBA,KAAK,CAACD,KAAN,CAAYE,IAAhC,CAAzB;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA;AAAnB,MAAgCT,eAAe,EAArD;;AAIA,MAAKO,OAAO,IAAIC,MAAZ,IAAuBC,QAA3B,EAAqC;AACjC,wBAAO,QAAC,OAAD;AAAS,MAAA,IAAI;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAG,IAAI,CAAP,EAAU;AACN,wBAAO,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI,QAAC,MAAD;AAAQ,IAAA,YAAY,EAAE,IAAtB;AAAA,2BACI,QAAC,QAAD;AAAU,MAAA,QAAQ,eAAE,QAAC,OAAD;AAAS,QAAA,IAAI;AAAb;AAAA;AAAA;AAAA;AAAA,cAApB;AAAA,6BACI,QAAC,eAAD;AAAiB,QAAA,OAAO,EAAEV,OAA1B;AAAA,+BACI,QAAC,KAAD;AACI,UAAA,MAAM,EAAE,MAAM;AACV,gBAAIS,MAAJ,EAAY;AACR,kBAAI,CAACJ,KAAK,CAACM,GAAX,EAAgB,oBAAO,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,sBAAP;AAEhB,kCAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AAED,gCAAO,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,WATL;AAUI,UAAA,IAAI,EAAC;AAVT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GAlCQP,S;UACSV,W,EACwBO,e;;;MAFjCG,S;AAoCT,eAAeA,SAAf","sourcesContent":["import { ConnectedRouter } from 'connected-react-router';\nimport React, { lazy, Suspense } from 'react';\nimport { useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Loading } from '../components';\nimport CreateStore from '../pages/create-store';\nimport { history } from '../store';\nimport { IState } from '../store/rootReducer';\nimport { useProgressAuth } from './use-progress-auth';\n\nconst AuthPage = lazy(() => import('../pages/auth-page/AuthPage'));\nconst Dashboard = lazy(() => import('../pages/dashboard'));\n\n\nfunction AppRouter() {\n    const store = useSelector((state: IState) => state.store.data);\n    const { loading, isAuth, progress } = useProgressAuth();\n\n    \n\n    if ((loading && isAuth) || progress) {\n        return <Loading full />;\n    }\n\n    if(1 > 0) {\n        return <CreateStore />;\n    }\n\n    return (\n        <Router forceRefresh={true}>\n            <Suspense fallback={<Loading full />}>\n                <ConnectedRouter history={history}>\n                    <Route\n                        render={() => {\n                            if (isAuth) {\n                                if (!store._id) return <CreateStore />;\n\n                                return <Dashboard />;\n                            }\n\n                            return <AuthPage />;\n                        }}\n                        path='/'\n                    />\n                </ConnectedRouter>\n            </Suspense>\n        </Router>\n    );\n}\n\nexport default AppRouter;\n"]},"metadata":{},"sourceType":"module"}