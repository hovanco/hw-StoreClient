{"ast":null,"code":"import { uniqBy } from 'lodash';\nimport types from './type';\nexport const initialReducer = {\n  attributes: [],\n  attributeOptions: [],\n  variants: [],\n  stocks: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case types.SET_ATTRIBUTES:\n      return { ...state,\n        attributes: action.payload\n      };\n\n    case types.ADD_ATTRIBUTES:\n      return { ...state,\n        attributes: uniqBy([...state.attributes, action.payload], '_id')\n      };\n\n    case types.SET_ATTRIBUTE_OPTIONS:\n      return { ...state,\n        attributeOptions: action.payload\n      };\n\n    case types.SET_VARIANTS:\n      {\n        return { ...state,\n          variants: action.payload\n        };\n      }\n\n    case types.SET_STOCKS:\n      {\n        return { ...state,\n          stocks: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/context/reducer.ts"],"names":["uniqBy","types","initialReducer","attributes","attributeOptions","variants","stocks","reducer","state","action","type","SET_ATTRIBUTES","payload","ADD_ATTRIBUTES","SET_ATTRIBUTE_OPTIONS","SET_VARIANTS","SET_STOCKS"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,OAAOC,KAAP,MAAkB,QAAlB;AAEA,OAAO,MAAMC,cAAsB,GAAG;AAClCC,EAAAA,UAAU,EAAE,EADsB;AAElCC,EAAAA,gBAAgB,EAAE,EAFgB;AAGlCC,EAAAA,QAAQ,EAAE,EAHwB;AAIlCC,EAAAA,MAAM,EAAE;AAJ0B,CAA/B;;AAOP,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAgBC,MAAhB,KAAoC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,KAAK,CAACU,cAAX;AACI,aAAO,EACH,GAAGH,KADA;AAEHL,QAAAA,UAAU,EAAEM,MAAM,CAACG;AAFhB,OAAP;;AAKJ,SAAKX,KAAK,CAACY,cAAX;AACI,aAAO,EACH,GAAGL,KADA;AAEHL,QAAAA,UAAU,EAAEH,MAAM,CAAC,CAAC,GAAGQ,KAAK,CAACL,UAAV,EAAsBM,MAAM,CAACG,OAA7B,CAAD,EAAwC,KAAxC;AAFf,OAAP;;AAKJ,SAAKX,KAAK,CAACa,qBAAX;AACI,aAAO,EACH,GAAGN,KADA;AAEHJ,QAAAA,gBAAgB,EAAEK,MAAM,CAACG;AAFtB,OAAP;;AAKJ,SAAKX,KAAK,CAACc,YAAX;AAAyB;AACrB,eAAO,EACH,GAAGP,KADA;AAEHH,UAAAA,QAAQ,EAAEI,MAAM,CAACG;AAFd,SAAP;AAIH;;AAED,SAAKX,KAAK,CAACe,UAAX;AAAuB;AACnB,eAAO,EACH,GAAGR,KADA;AAEHF,UAAAA,MAAM,EAAEG,MAAM,CAACG;AAFZ,SAAP;AAIH;;AAED;AACI,aAAOJ,KAAP;AAlCR;AAoCH,CArCD;;AAuCA,eAAeD,OAAf","sourcesContent":["import { uniqBy } from 'lodash';\nimport { IState, IAction } from './interface';\nimport types from './type';\n\nexport const initialReducer: IState = {\n    attributes: [],\n    attributeOptions: [],\n    variants: [],\n    stocks: [],\n};\n\nconst reducer = (state: IState, action: IAction) => {\n    switch (action.type) {\n        case types.SET_ATTRIBUTES:\n            return {\n                ...state,\n                attributes: action.payload,\n            };\n\n        case types.ADD_ATTRIBUTES:\n            return {\n                ...state,\n                attributes: uniqBy([...state.attributes, action.payload], '_id'),\n            };\n\n        case types.SET_ATTRIBUTE_OPTIONS:\n            return {\n                ...state,\n                attributeOptions: action.payload,\n            };\n\n        case types.SET_VARIANTS: {\n            return {\n                ...state,\n                variants: action.payload,\n            };\n        }\n\n        case types.SET_STOCKS: {\n            return {\n                ...state,\n                stocks: action.payload,\n            };\n        }\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}