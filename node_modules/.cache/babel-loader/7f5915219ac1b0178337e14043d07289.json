{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/report/report-customer/state/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useMemo, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport reportApi from '../../../../api/report-api';\nimport { initalState, reducer } from './reducer';\nimport types from './types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst intialContext = {\n  state: initalState,\n  dispatch: () => {}\n};\nconst ContextReportCustomer = /*#__PURE__*/createContext(intialContext);\n\nconst ProviderReportCustomer = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initalState);\n  const value = useMemo(() => ({\n    state,\n    dispatch\n  }), [state, dispatch]);\n  return /*#__PURE__*/_jsxDEV(ContextReportCustomer.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProviderReportCustomer, \"iARMRqoqMZeW/YMJzqU+kayAfEo=\");\n\n_c = ProviderReportCustomer;\n\nconst useCustomerReport = () => {\n  _s2();\n\n  const store = useSelector(state => state.store.data);\n  const value = useContext(ContextReportCustomer);\n  const {\n    state,\n    dispatch\n  } = value;\n\n  const loadData = async ({\n    filter,\n    startTime,\n    endTime\n  }) => {\n    let isLoadDatta = false;\n    dispatch({\n      type: types.LOADING\n    });\n    isLoadDatta = isLoadDatta ? false : true;\n\n    if (isLoadDatta) {\n      try {\n        const response = await reportApi.reportDetail({\n          type: 'customer',\n          storeId: store._id,\n          // startTime: 1601485200000,\n          // endTime: 1604163599999,\n          startTime,\n          endTime,\n          filter\n        });\n        dispatch({\n          type: types.LOAD_DATA_REPORT_CUSTOMER,\n          payload: response\n        });\n      } catch {\n        dispatch({\n          type: types.LOAD_DATA_REPORT_CUSTOMER,\n          payload: []\n        });\n      } finally {\n        isLoadDatta = false;\n      }\n    }\n  };\n\n  const changeTime = times => {\n    dispatch({\n      type: types.CHANGE_TIME,\n      payload: times\n    });\n  };\n\n  const selectFilter = filter => {\n    dispatch({\n      type: types.SELECT_TYPE,\n      payload: filter\n    });\n  };\n\n  return { ...state,\n    selectFilter,\n    loadData,\n    changeTime\n  };\n};\n\n_s2(useCustomerReport, \"UDMAgZiYKm3/sTe6wJDnifGQIP0=\", false, function () {\n  return [useSelector];\n});\n\nexport { ProviderReportCustomer, useCustomerReport };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderReportCustomer\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/report/report-customer/state/context.tsx"],"names":["React","createContext","useContext","useMemo","useReducer","useSelector","reportApi","initalState","reducer","types","intialContext","state","dispatch","ContextReportCustomer","ProviderReportCustomer","children","value","useCustomerReport","store","data","loadData","filter","startTime","endTime","isLoadDatta","type","LOADING","response","reportDetail","storeId","_id","LOAD_DATA_REPORT_CUSTOMER","payload","changeTime","times","CHANGE_TIME","selectFilter","SELECT_TYPE"],"mappings":"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","sourcesContent":["import React, { createContext, FC, ReactNode, useContext, useMemo, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport reportApi from '../../../../api/report-api';\nimport { IState } from '../../../../store/rootReducer';\nimport { EFilter, IContext } from './interface';\nimport { initalState, reducer } from './reducer';\nimport types from './types';\n\nconst intialContext = {\n    state: initalState,\n    dispatch: () => {},\n};\nconst ContextReportCustomer = createContext<IContext>(intialContext);\n\ninterface Props {\n    children: ReactNode;\n}\n\nconst ProviderReportCustomer: FC<Props> = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initalState);\n\n    const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n    return (\n        <ContextReportCustomer.Provider value={value}>{children}</ContextReportCustomer.Provider>\n    );\n};\n\nconst useCustomerReport = () => {\n    const store = useSelector((state: IState) => state.store.data);\n    const value = useContext(ContextReportCustomer);\n\n    const { state, dispatch } = value;\n\n    const loadData = async ({\n        filter,\n        startTime,\n        endTime,\n    }: {\n        filter: EFilter;\n        startTime: number;\n        endTime: number;\n    }) => {\n        let isLoadDatta = false;\n\n        dispatch({\n            type: types.LOADING,\n        });\n\n        isLoadDatta = isLoadDatta ? false : true;\n\n        if (isLoadDatta) {\n            try {\n                const response = await reportApi.reportDetail({\n                    type: 'customer',\n                    storeId: store._id as string,\n                    // startTime: 1601485200000,\n                    // endTime: 1604163599999,\n                    startTime,\n                    endTime,\n                    filter,\n                });\n\n                dispatch({\n                    type: types.LOAD_DATA_REPORT_CUSTOMER,\n                    payload: response,\n                });\n            } catch {\n                dispatch({\n                    type: types.LOAD_DATA_REPORT_CUSTOMER,\n                    payload: [],\n                });\n            } finally {\n                isLoadDatta = false;\n            }\n        }\n    };\n\n    const changeTime = (times: { startTime: number; endTime: number }) => {\n        dispatch({\n            type: types.CHANGE_TIME,\n            payload: times,\n        });\n    };\n\n    const selectFilter = (filter: EFilter) => {\n        dispatch({\n            type: types.SELECT_TYPE,\n            payload: filter,\n        });\n    };\n\n    return {\n        ...state,\n        selectFilter,\n        loadData,\n        changeTime,\n    };\n};\n\nexport { ProviderReportCustomer, useCustomerReport };\n"]},"metadata":{},"sourceType":"module"}