{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/inventory/inventory-list/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext, createContext, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { storeAction } from '../../../reducers/storeState/action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFilter = {\n  search: undefined,\n  categoryId: undefined,\n  warehouseId: '',\n  isVariant: true\n};\nconst initialPagination = {\n  page: 1,\n  limit: 20,\n  total: undefined\n};\nconst InventoryTableContext = /*#__PURE__*/createContext({\n  filter: initialFilter,\n  pagination: initialPagination,\n  setFilter: filter => filter,\n  setPagination: pagination => pagination,\n  toggleRefeshData: false,\n  setToggleRefreshData: toggleRefeshData => toggleRefeshData\n});\nexport const InventoryTableProvider = ({\n  children\n}) => {\n  _s();\n\n  const [filter, setFilter] = useState(initialFilter);\n  const [pagination, setPagination] = useState(initialPagination);\n  const [toggleRefeshData, setToggleRefreshData] = useState(false);\n  const dispatch = useDispatch();\n  const storeObj = useSelector(({\n    store\n  }) => store.data);\n  const product = useSelector(({\n    store\n  }) => store.product);\n\n  const getStocks = storeId => {\n    dispatch(storeAction.getStocks({\n      storeId: storeId,\n      limit: pagination.limit,\n      page: pagination.page,\n      categoryId: filter.categoryId,\n      search: filter.search,\n      warehouseId: filter.warehouseId\n    }));\n  };\n\n  useEffect(() => {\n    setFilter({ ...filter,\n      warehouseId: storeObj.warehouseId\n    }); // eslint-disable-next-line\n  }, [storeObj._id]);\n  useEffect(() => {\n    if (storeObj._id && filter.warehouseId) getStocks(storeObj._id); // eslint-disable-next-line\n  }, [storeObj._id, pagination.page, pagination.limit, filter, toggleRefeshData]);\n  useEffect(() => {\n    if (pagination.total !== product.pagination.total) setPagination({ ...pagination,\n      total: product.pagination.total\n    }); // eslint-disable-next-line\n  }, [product.pagination]);\n  const value = useMemo(() => ({\n    filter,\n    pagination,\n    setFilter,\n    setPagination,\n    toggleRefeshData,\n    setToggleRefreshData\n  }), [filter, pagination, setFilter, setPagination, toggleRefeshData, setToggleRefreshData]);\n  return /*#__PURE__*/_jsxDEV(InventoryTableContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InventoryTableProvider, \"N2meekbu2DWOOK/3wHHIgvnt16A=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = InventoryTableProvider;\nexport const useInventoryTable = () => {\n  _s2();\n\n  const {\n    filter,\n    pagination,\n    setFilter,\n    setPagination,\n    setToggleRefreshData,\n    toggleRefeshData\n  } = useContext(InventoryTableContext);\n\n  const pageChange = page => setPagination({ ...pagination,\n    page\n  });\n\n  const searchChange = search => setFilter({ ...filter,\n    search\n  });\n\n  const warehouseChange = warehouseId => setFilter({ ...filter,\n    warehouseId\n  });\n\n  const refreshData = () => setToggleRefreshData(!toggleRefeshData);\n\n  const advanceFilterChange = ({\n    status,\n    categoryId,\n    brandId\n  }) => {\n    setFilter({ ...filter,\n      status,\n      categoryId,\n      brandId\n    });\n  };\n\n  return {\n    filter,\n    pagination,\n    pageChange,\n    searchChange,\n    warehouseChange,\n    advanceFilterChange,\n    refreshData\n  };\n};\n\n_s2(useInventoryTable, \"qn68Xus12RTTpfNRu0jGuunvd2k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"InventoryTableProvider\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/inventory/inventory-list/context.tsx"],"names":["React","useEffect","useState","useContext","createContext","useMemo","useSelector","useDispatch","storeAction","initialFilter","search","undefined","categoryId","warehouseId","isVariant","initialPagination","page","limit","total","InventoryTableContext","filter","pagination","setFilter","setPagination","toggleRefeshData","setToggleRefreshData","InventoryTableProvider","children","dispatch","storeObj","store","data","product","getStocks","storeId","_id","value","useInventoryTable","pageChange","searchChange","warehouseChange","refreshData","advanceFilterChange","status","brandId"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useState, useContext, createContext, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IStoreState } from '../../../reducers/storeState/reducer';\nimport { storeAction } from '../../../reducers/storeState/action';\n\ninterface IFilter {\n    search?: string;\n    categoryId?: string;\n    warehouseId: string;\n    isVariant: boolean;\n    brandId?: string;\n    status?: string;\n}\n\ninterface IPagination {\n    page: number;\n    limit: number;\n    total?: number;\n}\n\nconst initialFilter: IFilter = {\n    search: undefined,\n    categoryId: undefined,\n    warehouseId: '',\n    isVariant: true,\n};\n\nconst initialPagination: IPagination = {\n    page: 1,\n    limit: 20,\n    total: undefined,\n};\n\nconst InventoryTableContext = createContext({\n    filter: initialFilter,\n    pagination: initialPagination,\n    setFilter: (filter: any) => filter,\n    setPagination: (pagination: any) => pagination,\n    toggleRefeshData: false,\n    setToggleRefreshData: (toggleRefeshData: any) => toggleRefeshData,\n});\n\ninterface Props {\n    children: JSX.Element;\n}\n\nexport const InventoryTableProvider: FC<Props> = ({ children }) => {\n    const [filter, setFilter] = useState<IFilter>(initialFilter);\n    const [pagination, setPagination] = useState<IPagination>(initialPagination);\n    const [toggleRefeshData, setToggleRefreshData] = useState<boolean>(false);\n\n    const dispatch = useDispatch();\n\n    const storeObj = useSelector(({ store }: { store: IStoreState }) => store.data);\n\n    const product = useSelector(({ store }: { store: IStoreState }) => store.product);\n\n    const getStocks = (storeId: string) => {\n        dispatch(\n            storeAction.getStocks({\n                storeId: storeId,\n                limit: pagination.limit,\n                page: pagination.page,\n                categoryId: filter.categoryId as string,\n                search: filter.search as string,\n                warehouseId: filter.warehouseId,\n            })\n        );\n    };\n\n    useEffect(() => {\n        setFilter({ ...filter, warehouseId: storeObj.warehouseId as string });\n        // eslint-disable-next-line\n    }, [storeObj._id]);\n\n    useEffect(() => {\n        if (storeObj._id && filter.warehouseId) getStocks(storeObj._id as string);\n        // eslint-disable-next-line\n    }, [storeObj._id, pagination.page, pagination.limit, filter, toggleRefeshData]);\n\n    useEffect(() => {\n        if (pagination.total !== product.pagination.total)\n            setPagination({ ...pagination, total: product.pagination.total });\n        // eslint-disable-next-line\n    }, [product.pagination]);\n\n    const value = useMemo(\n        () => ({\n            filter,\n            pagination,\n            setFilter,\n            setPagination,\n            toggleRefeshData,\n            setToggleRefreshData,\n        }),\n        [filter, pagination, setFilter, setPagination, toggleRefeshData, setToggleRefreshData]\n    );\n\n    return (\n        <InventoryTableContext.Provider value={value}>{children}</InventoryTableContext.Provider>\n    );\n};\n\nexport const useInventoryTable = () => {\n    const {\n        filter,\n        pagination,\n        setFilter,\n        setPagination,\n        setToggleRefreshData,\n        toggleRefeshData,\n    } = useContext(InventoryTableContext);\n\n    const pageChange = (page: number) => setPagination({ ...pagination, page });\n\n    const searchChange = (search: string) => setFilter({ ...filter, search });\n\n    const warehouseChange = (warehouseId: string) => setFilter({ ...filter, warehouseId });\n\n    const refreshData = () => setToggleRefreshData(!toggleRefeshData);\n\n    const advanceFilterChange = ({\n        status,\n        categoryId,\n        brandId,\n    }: {\n        status?: string;\n        categoryId?: string;\n        brandId?: string;\n    }) => {\n        setFilter({ ...filter, status, categoryId, brandId });\n    };\n\n    return {\n        filter,\n        pagination,\n        pageChange,\n        searchChange,\n        warehouseChange,\n        advanceFilterChange,\n        refreshData,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}