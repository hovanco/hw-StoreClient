{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/delivery/list/components/deliveries-table/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Checkbox, message, Modal } from 'antd';\nimport { pick } from 'lodash';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { InsaTable, SaleChannelLabel } from '../../../../../components';\nimport orderApi from '../../../../../api/order-api';\nimport { getAddress } from '../../../../../helper';\nimport OrderLabelStatus from '../../../../order/components/order-label-status';\nimport { useOrdersContext } from '../../../../order/list/state/context';\nimport ShipService from '../ship-service';\nimport DeliveriesAction from './deliveries-action';\nimport './deliveries-table.less';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DeliveriesTable = () => {\n  _s();\n\n  const [widthTable, setWidthTable] = useState(0);\n  const [loadingRemoveOrders, setLoadingRemoveOrders] = useState(false);\n  const history = useHistory();\n  const isCollapsed = useSelector(state => state.global.isCollapsed);\n  const store = useSelector(({\n    store\n  }) => store.data);\n  const loading = useSelector(({\n    store\n  }) => store.order.loading);\n  const orders = useSelector(({\n    store\n  }) => store.order.data);\n  const {\n    progress,\n    page,\n    changePagination,\n    limit,\n    fetchDataCallback,\n    search,\n    source,\n    serviceId,\n    status,\n    soft,\n    deliveryDate\n  } = useOrdersContext();\n  const pagination = useSelector(({\n    store\n  }) => store.order.pagination);\n\n  const onChangePagination = (pageNumber, pageSize) => {\n    changePagination({\n      page: pageNumber,\n      limit: pageSize || 20\n    });\n  };\n\n  const handleRowClick = record => {\n    history.push(`/delivery/detail/${record._id}`);\n  };\n\n  const columns = [{\n    title: 'Ngày đóng gói',\n    align: 'center',\n    dataIndex: 'createdAt',\n    render: text => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: moment(text).format('DD/MM/YYYY')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 39\n    }, this)\n  }, {\n    title: 'Mã đơn hàng',\n    align: 'center',\n    dataIndex: 'code',\n    key: 'code',\n    render: code => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"blue-text\",\n      children: code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 39\n    }, this)\n  }, {\n    title: 'Tên người nhận',\n    align: 'center',\n    dataIndex: 'customer',\n    key: 'name',\n    render: customer => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: customer === null || customer === void 0 ? void 0 : customer.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 35\n    }, this)\n  }, {\n    title: 'Địa chỉ người nhận',\n    align: 'center',\n    dataIndex: 'customer',\n    key: 'address',\n    render: customer => {\n      if (!customer.provinceName) return '---';\n      return getAddress({ ...pick(customer, ['address', 'wardName', 'districtName', 'provinceName'])\n      });\n    }\n  }, {\n    title: 'SĐT người nhận',\n    align: 'center',\n    dataIndex: 'customer',\n    key: 'phoneNo',\n    render: customer => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: customer === null || customer === void 0 ? void 0 : customer.phoneNo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 35\n    }, this)\n  }, {\n    title: 'Đơn vị giao hàng',\n    align: 'center',\n    dataIndex: 'deliveryOptions',\n    render: deliveryOptions => /*#__PURE__*/_jsxDEV(ShipService, {\n      deliveryOptions: deliveryOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 42\n    }, this)\n  }, {\n    title: 'Ngày giao hàng',\n    align: 'center',\n    dataIndex: 'deliveredAt',\n    key: 'deliveredAt',\n    render: deliveredAt => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: deliveredAt ? moment(deliveredAt).format('DD/MM/YYYY') : '---'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this)\n  }, {\n    title: 'Nguồn',\n    align: 'center',\n    dataIndex: 'source',\n    key: 'source',\n    render: source => /*#__PURE__*/_jsxDEV(SaleChannelLabel, {\n      channelId: source\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 33\n    }, this)\n  }, {\n    title: 'Trạng Thái',\n    align: 'center',\n    dataIndex: 'status',\n    render: status => {\n      return /*#__PURE__*/_jsxDEV(OrderLabelStatus, {\n        status: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 24\n      }, this);\n    }\n  }];\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n\n  const onSelectChange = selectedRowKeysInCurrentPage => {\n    let selectedRowKeysBeforeInCurrentPage = [];\n    orders.forEach(order => {\n      if (selectedRowKeys.includes(order._id)) {\n        selectedRowKeysBeforeInCurrentPage.push(order._id);\n      }\n    });\n    const selectedRowInOtherPage = selectedRowKeys.filter(key => !selectedRowKeysBeforeInCurrentPage.includes(key));\n    setSelectedRowKeys([...selectedRowInOtherPage, ...selectedRowKeysInCurrentPage]);\n  };\n\n  const selectAll = () => {\n    const orderKeys = orders.map(order => order._id);\n    setSelectedRowKeys(orderKeys);\n  };\n\n  const removeAllSelect = () => {\n    setSelectedRowKeys([]);\n  };\n\n  const removeOrderSelect = () => {\n    Modal.confirm({\n      title: 'Xóa Đơn Hàng?',\n      content: `Bạn chắc chắn muốn xóa đơn hàng?`,\n      okText: 'Xóa',\n      okType: 'danger',\n      cancelText: 'Hủy',\n\n      onOk() {\n        if (store._id) {\n          setLoadingRemoveOrders(true);\n          Promise.all(selectedRowKeys.map(async orderId => {\n            await orderApi.removeOrder({\n              storeId: store._id,\n              orderId\n            });\n            return true;\n          })).then(() => {\n            message.success(`Đã xóa ${selectedRowKeys.length} đơn hàng`);\n            setSelectedRowKeys([]);\n            fetchDataCallback({\n              page,\n              limit,\n              status,\n              search,\n              source,\n              serviceId,\n              soft\n            });\n          }).catch(error => {\n            message.error('Lỗi xóa đơn hàng');\n          }).finally(() => {\n            setLoadingRemoveOrders(false);\n          });\n        }\n      }\n\n    });\n  };\n\n  function handleMenuClick(e) {\n    switch (e.key) {\n      case 'remove':\n        removeOrderSelect();\n        break;\n\n      case 'unselect':\n        setSelectedRowKeys([]);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  const renderColumnTitle = () => {\n    if (selectedRowKeys.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Checkbox, {\n        onClick: selectAll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(DeliveriesAction, {\n      widthTable: widthTable,\n      loadingRemoveOrders: loadingRemoveOrders,\n      selectedRowKeys: selectedRowKeys,\n      handleMenuClick: handleMenuClick,\n      removeAllSelect: removeAllSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this);\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n    columnTitle: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 30\n      },\n      children: renderColumnTitle()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 22\n    }, this)\n  };\n  useEffect(() => {\n    if (!progress) {\n      fetchDataCallback({\n        status,\n        search,\n        page,\n        source,\n        serviceId,\n        deliveryDate\n      });\n    }\n  }, [status, search, page, source, serviceId, deliveryDate, progress]);\n  useEffect(() => {\n    var _document;\n\n    const antTableHeadEle = (_document = document) === null || _document === void 0 ? void 0 : _document.querySelector('.order-tbl .ant-table-thead');\n    let orderActionsWidth = antTableHeadEle ? antTableHeadEle.clientWidth : 0;\n    setWidthTable(orderActionsWidth);\n  }, [selectedRowKeys]);\n  useEffect(() => {\n    if (selectedRowKeys.length > 0) {\n      setWidthTable(isCollapsed ? widthTable + 120 : widthTable - 120);\n    }\n  }, [isCollapsed]);\n  return /*#__PURE__*/_jsxDEV(InsaTable, {\n    loading: loading,\n    rowSelection: rowSelection,\n    columns: columns,\n    isShowTotal: true,\n    scroll: {\n      x: 1200\n    },\n    dataSource: orders.map(e => ({ ...e,\n      key: e._id\n    })),\n    bordered: true,\n    pagination: {\n      pageSize: limit,\n      current: Number(page),\n      total: pagination.total,\n      onChange: onChangePagination\n    },\n    onRow: (record, rownIndex) => {\n      return {\n        onClick: event => {\n          handleRowClick(record);\n        }\n      };\n    },\n    name: \"Danh s\\xE1ch \\u0111\\u01A1n h\\xE0ng\",\n    className: \"order-tbl hover\",\n    hasDefaultColumn: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DeliveriesTable, \"4DRGg6Z6zeVL4MRmCj75KF40L0M=\", false, function () {\n  return [useHistory, useSelector, useSelector, useSelector, useSelector, useOrdersContext, useSelector];\n});\n\n_c = DeliveriesTable;\nexport default DeliveriesTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeliveriesTable\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/delivery/list/components/deliveries-table/index.tsx"],"names":["Checkbox","message","Modal","pick","moment","React","useEffect","useState","useSelector","useHistory","InsaTable","SaleChannelLabel","orderApi","getAddress","OrderLabelStatus","useOrdersContext","ShipService","DeliveriesAction","DeliveriesTable","widthTable","setWidthTable","loadingRemoveOrders","setLoadingRemoveOrders","history","isCollapsed","state","global","store","data","loading","order","orders","progress","page","changePagination","limit","fetchDataCallback","search","source","serviceId","status","soft","deliveryDate","pagination","onChangePagination","pageNumber","pageSize","handleRowClick","record","push","_id","columns","title","align","dataIndex","render","text","format","key","code","customer","name","provinceName","phoneNo","deliveryOptions","deliveredAt","selectedRowKeys","setSelectedRowKeys","onSelectChange","selectedRowKeysInCurrentPage","selectedRowKeysBeforeInCurrentPage","forEach","includes","selectedRowInOtherPage","filter","selectAll","orderKeys","map","removeAllSelect","removeOrderSelect","confirm","content","okText","okType","cancelText","onOk","Promise","all","orderId","removeOrder","storeId","then","success","length","catch","error","finally","handleMenuClick","e","renderColumnTitle","rowSelection","onChange","columnTitle","width","antTableHeadEle","document","querySelector","orderActionsWidth","clientWidth","x","current","Number","total","rownIndex","onClick","event"],"mappings":"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","sourcesContent":["import { Checkbox, message, Modal } from 'antd';\nimport { ColumnType } from 'antd/lib/table';\nimport { pick } from 'lodash';\nimport moment from 'moment';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { InsaTable, SaleChannelLabel } from '../../../../../components';\nimport orderApi from '../../../../../api/order-api';\nimport { getAddress } from '../../../../../helper';\nimport { IOrder } from '../../../../../models';\nimport { IStoreState } from '../../../../../reducers/storeState/reducer';\nimport { IState } from '../../../../../store/rootReducer';\nimport OrderLabelStatus from '../../../../order/components/order-label-status';\nimport { useOrdersContext } from '../../../../order/list/state/context';\nimport ShipService from '../ship-service';\nimport DeliveriesAction from './deliveries-action';\n\nimport './deliveries-table.less';\n\ninterface Props {}\n\nconst DeliveriesTable: FC<Props> = () => {\n    const [widthTable, setWidthTable] = useState<number>(0);\n    const [loadingRemoveOrders, setLoadingRemoveOrders] = useState<boolean>(false);\n    const history = useHistory();\n\n    const isCollapsed = useSelector((state: IState) => state.global.isCollapsed);\n    const store = useSelector(({ store }: { store: IStoreState }) => store.data);\n    const loading = useSelector(({ store }: { store: IStoreState }) => store.order.loading);\n    const orders = useSelector(({ store }: { store: IStoreState }) => store.order.data);\n    const {\n        progress,\n        page,\n        changePagination,\n        limit,\n        fetchDataCallback,\n        search,\n        source,\n        serviceId,\n        status,\n        soft,\n        deliveryDate,\n    } = useOrdersContext();\n    const pagination = useSelector(({ store }: { store: IStoreState }) => store.order.pagination);\n\n    const onChangePagination = (pageNumber: number, pageSize?: number) => {\n        changePagination({\n            page: pageNumber,\n            limit: pageSize || 20,\n        });\n    };\n\n    const handleRowClick = (record: IOrder) => {\n        history.push(`/delivery/detail/${record._id}`);\n    };\n\n    const columns: ColumnType<IOrder>[] = [\n        {\n            title: 'Ngày đóng gói',\n            align: 'center',\n            dataIndex: 'createdAt',\n            render: (text: string) => <span>{moment(text).format('DD/MM/YYYY')}</span>,\n        },\n        {\n            title: 'Mã đơn hàng',\n            align: 'center',\n            dataIndex: 'code',\n            key: 'code',\n            render: (code: string) => <span className=\"blue-text\">{code}</span>,\n        },\n        {\n            title: 'Tên người nhận',\n            align: 'center',\n            dataIndex: 'customer',\n            key: 'name',\n            render: (customer) => <span>{customer?.name}</span>,\n        },\n        {\n            title: 'Địa chỉ người nhận',\n            align: 'center',\n            dataIndex: 'customer',\n            key: 'address',\n            render: (customer) => {\n                if (!customer.provinceName) return '---';\n                return getAddress({\n                    ...pick(customer, ['address', 'wardName', 'districtName', 'provinceName']),\n                });\n            },\n        },\n        {\n            title: 'SĐT người nhận',\n            align: 'center',\n            dataIndex: 'customer',\n            key: 'phoneNo',\n            render: (customer) => <span>{customer?.phoneNo}</span>,\n        },\n        {\n            title: 'Đơn vị giao hàng',\n            align: 'center',\n            dataIndex: 'deliveryOptions',\n            render: (deliveryOptions) => <ShipService deliveryOptions={deliveryOptions} />,\n        },\n        {\n            title: 'Ngày giao hàng',\n            align: 'center',\n            dataIndex: 'deliveredAt',\n            key: 'deliveredAt',\n            render: (deliveredAt) => (\n                <span>{deliveredAt ? moment(deliveredAt).format('DD/MM/YYYY') : '---'}</span>\n            ),\n        },\n        {\n            title: 'Nguồn',\n            align: 'center',\n            dataIndex: 'source',\n            key: 'source',\n            render: (source) => <SaleChannelLabel channelId={source} />,\n        },\n        {\n            title: 'Trạng Thái',\n            align: 'center',\n            dataIndex: 'status',\n            render: (status) => {\n                return <OrderLabelStatus status={status} />;\n            },\n        },\n    ];\n\n    const [selectedRowKeys, setSelectedRowKeys] = useState<any>([]);\n\n    const onSelectChange = (selectedRowKeysInCurrentPage: any) => {\n        let selectedRowKeysBeforeInCurrentPage: string[] = [];\n\n        orders.forEach((order) => {\n            if (selectedRowKeys.includes(order._id)) {\n                selectedRowKeysBeforeInCurrentPage.push(order._id);\n            }\n        });\n\n        const selectedRowInOtherPage = selectedRowKeys.filter(\n            (key: string) => !selectedRowKeysBeforeInCurrentPage.includes(key)\n        );\n\n        setSelectedRowKeys([...selectedRowInOtherPage, ...selectedRowKeysInCurrentPage]);\n    };\n\n    const selectAll = () => {\n        const orderKeys = orders.map((order: IOrder) => order._id);\n        setSelectedRowKeys(orderKeys);\n    };\n\n    const removeAllSelect = () => {\n        setSelectedRowKeys([]);\n    };\n\n    const removeOrderSelect = () => {\n        Modal.confirm({\n            title: 'Xóa Đơn Hàng?',\n            content: `Bạn chắc chắn muốn xóa đơn hàng?`,\n            okText: 'Xóa',\n            okType: 'danger',\n            cancelText: 'Hủy',\n\n            onOk() {\n                if (store._id) {\n                    setLoadingRemoveOrders(true);\n                    Promise.all(\n                        selectedRowKeys.map(async (orderId: string) => {\n                            await orderApi.removeOrder({\n                                storeId: store._id as string,\n                                orderId,\n                            });\n\n                            return true;\n                        })\n                    )\n                        .then(() => {\n                            message.success(`Đã xóa ${selectedRowKeys.length} đơn hàng`);\n                            setSelectedRowKeys([]);\n\n                            fetchDataCallback({\n                                page,\n                                limit,\n                                status,\n                                search,\n                                source,\n                                serviceId,\n                                soft,\n                            });\n                        })\n                        .catch((error) => {\n                            message.error('Lỗi xóa đơn hàng');\n                        })\n                        .finally(() => {\n                            setLoadingRemoveOrders(false);\n                        });\n                }\n            },\n        });\n    };\n\n    function handleMenuClick(e: any) {\n        switch (e.key) {\n            case 'remove':\n                removeOrderSelect();\n                break;\n            case 'unselect':\n                setSelectedRowKeys([]);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const renderColumnTitle = () => {\n        if (selectedRowKeys.length === 0) {\n            return <Checkbox onClick={selectAll} />;\n        }\n\n        return (\n            <DeliveriesAction\n                widthTable={widthTable}\n                loadingRemoveOrders={loadingRemoveOrders}\n                selectedRowKeys={selectedRowKeys}\n                handleMenuClick={handleMenuClick}\n                removeAllSelect={removeAllSelect}\n            />\n        );\n    };\n\n    const rowSelection = {\n        selectedRowKeys,\n        onChange: onSelectChange,\n        columnTitle: <div style={{ width: 30 }}>{renderColumnTitle()}</div>,\n    };\n\n    useEffect(() => {\n        if (!progress) {\n            fetchDataCallback({ status, search, page, source, serviceId, deliveryDate });\n        }\n    }, [status, search, page, source, serviceId, deliveryDate, progress]);\n\n    useEffect(() => {\n        const antTableHeadEle: HTMLTableHeaderCellElement | null = document?.querySelector(\n            '.order-tbl .ant-table-thead'\n        );\n        let orderActionsWidth: number = antTableHeadEle ? antTableHeadEle.clientWidth : 0;\n\n        setWidthTable(orderActionsWidth);\n    }, [selectedRowKeys]);\n\n    useEffect(() => {\n        if (selectedRowKeys.length > 0) {\n            setWidthTable(isCollapsed ? widthTable + 120 : widthTable - 120);\n        }\n    }, [isCollapsed]);\n\n    return (\n        <InsaTable\n            loading={loading}\n            rowSelection={rowSelection}\n            columns={columns}\n            isShowTotal\n            scroll={{ x: 1200 }}\n            dataSource={orders.map((e) => ({\n                ...e,\n                key: e._id,\n            }))}\n            bordered\n            pagination={{\n                pageSize: limit,\n                current: Number(page),\n                total: pagination.total,\n                onChange: onChangePagination,\n            }}\n            onRow={(record, rownIndex) => {\n                return {\n                    onClick: (event) => {\n                        handleRowClick(record);\n                    },\n                };\n            }}\n            name=\"Danh sách đơn hàng\"\n            className=\"order-tbl hover\"\n            hasDefaultColumn={false}\n        />\n    );\n};\n\nexport default DeliveriesTable;\n"]},"metadata":{},"sourceType":"module"}