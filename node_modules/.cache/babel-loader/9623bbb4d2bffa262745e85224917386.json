{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/homepage/components/user-guide-setting/btn-add-pos-channel.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport storeApi from '../../../../api/store-api';\nimport { InsaButton } from '../../../../components';\nimport { POS_URL } from '../../../../configs/vars';\nimport { SaleChannelId } from '../../../../models';\nimport types from '../../../../reducers/storeState/type';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BtnAddPosChannel = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const store = useSelector(state => state.store.data);\n\n  const gotoPosChannel = () => {\n    window.open(POS_URL, '_blank');\n  };\n\n  const addPosChannel = async () => {\n    var _store$saleChannels;\n\n    if ((_store$saleChannels = store.saleChannels) === null || _store$saleChannels === void 0 ? void 0 : _store$saleChannels.includes(SaleChannelId.POS)) {\n      gotoPosChannel();\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const newStore = await storeApi.updateStore(store._id, {\n        saleChannels: [...(store.saleChannels || []), SaleChannelId.POS]\n      });\n      dispatch({\n        type: types.SET_STORE,\n        payload: newStore\n      });\n      setLoading(false);\n      gotoPosChannel();\n      return;\n    } catch (error) {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(InsaButton, {\n    type: \"primary\",\n    onClick: addPosChannel,\n    loading: loading,\n    children: \"Tr\\u1EA3i nghi\\u1EC7m ngay\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BtnAddPosChannel, \"aMHTLrDyrRm/WMdZXqaA+gWBiuY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = BtnAddPosChannel;\nexport default BtnAddPosChannel;\n\nvar _c;\n\n$RefreshReg$(_c, \"BtnAddPosChannel\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/homepage/components/user-guide-setting/btn-add-pos-channel.tsx"],"names":["React","useState","useDispatch","useSelector","storeApi","InsaButton","POS_URL","SaleChannelId","types","BtnAddPosChannel","dispatch","loading","setLoading","store","state","data","gotoPosChannel","window","open","addPosChannel","saleChannels","includes","POS","newStore","updateStore","_id","type","SET_STORE","payload","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,OAAOC,KAAP,MAAkB,sCAAlB;;;AAEA,MAAMC,gBAAoB,GAAG,MAAM;AAAA;;AAC/B,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAU,KAAV,CAAtC;AACA,QAAMY,KAAK,GAAGV,WAAW,CAAEW,KAAD,IAAmBA,KAAK,CAACD,KAAN,CAAYE,IAAhC,CAAzB;;AAEA,QAAMC,cAAc,GAAG,MAAM;AACzBC,IAAAA,MAAM,CAACC,IAAP,CAAYZ,OAAZ,EAAqB,QAArB;AACH,GAFD;;AAIA,QAAMa,aAAa,GAAG,YAAY;AAAA;;AAC9B,+BAAIN,KAAK,CAACO,YAAV,wDAAI,oBAAoBC,QAApB,CAA6Bd,aAAa,CAACe,GAA3C,CAAJ,EAAqD;AACjDN,MAAAA,cAAc;AACd;AACH;;AAED,QAAI;AACAJ,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMW,QAAQ,GAAG,MAAMnB,QAAQ,CAACoB,WAAT,CAAqBX,KAAK,CAACY,GAA3B,EAA0C;AAC7DL,QAAAA,YAAY,EAAE,CAAC,IAAIP,KAAK,CAACO,YAAN,IAAsB,EAA1B,CAAD,EAAgCb,aAAa,CAACe,GAA9C;AAD+C,OAA1C,CAAvB;AAIAZ,MAAAA,QAAQ,CAAC;AACLgB,QAAAA,IAAI,EAAElB,KAAK,CAACmB,SADP;AAELC,QAAAA,OAAO,EAAEL;AAFJ,OAAD,CAAR;AAKAX,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAI,MAAAA,cAAc;AACd;AACH,KAfD,CAeE,OAAOa,KAAP,EAAc;AACZjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAxBD;;AA0BA,sBACI,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,SAAjB;AAA2B,IAAA,OAAO,EAAEO,aAApC;AAAmD,IAAA,OAAO,EAAER,OAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAxCD;;GAAMF,gB;UACeP,W,EAEHC,W;;;KAHZM,gB;AA0CN,eAAeA,gBAAf","sourcesContent":["import React, { FC, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport storeApi from '../../../../api/store-api';\nimport { InsaButton } from '../../../../components';\nimport { POS_URL } from '../../../../configs/vars';\nimport { SaleChannelId } from '../../../../models';\nimport { IState } from '../../../../store/rootReducer';\nimport types from '../../../../reducers/storeState/type';\n\nconst BtnAddPosChannel: FC = () => {\n    const dispatch = useDispatch();\n    const [loading, setLoading] = useState<boolean>(false);\n    const store = useSelector((state: IState) => state.store.data);\n\n    const gotoPosChannel = () => {\n        window.open(POS_URL, '_blank');\n    };\n\n    const addPosChannel = async () => {\n        if (store.saleChannels?.includes(SaleChannelId.POS)) {\n            gotoPosChannel();\n            return;\n        }\n\n        try {\n            setLoading(true);\n\n            const newStore = await storeApi.updateStore(store._id as string, {\n                saleChannels: [...(store.saleChannels || []), SaleChannelId.POS],\n            });\n\n            dispatch({\n                type: types.SET_STORE,\n                payload: newStore,\n            });\n\n            setLoading(false);\n            gotoPosChannel();\n            return;\n        } catch (error) {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <InsaButton type=\"primary\" onClick={addPosChannel} loading={loading}>\n            Trải nghiệm ngay\n        </InsaButton>\n    );\n};\n\nexport default BtnAddPosChannel;\n"]},"metadata":{},"sourceType":"module"}