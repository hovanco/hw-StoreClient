{"ast":null,"code":"import storeApi from '../../api/store-api';\nconst {\n  createStore,\n  updateStore\n} = storeApi;\nexport let ETypeForm;\n\n(function (ETypeForm) {\n  ETypeForm[\"NEW\"] = \"1\";\n  ETypeForm[\"EDIT\"] = \"2\";\n})(ETypeForm || (ETypeForm = {}));\n\nconst size = 'large';\nconst style = {\n  width: '100%'\n};\n\nconst FormCreateStore = ({\n  type = ETypeForm.NEW\n}) => {// const dispatch = useDispatch();\n  // const store = useSelector((state: IState) => state.store.data);\n  // const [form] = useForm();\n  // const location = useLocation();\n  // const regexPhone = /^((\\+84|84|02[0-9])|(0[3|5|7|8|9]))+([0-9]{8})\\b/;\n  // const [disabled, setDisabled] = useState(false);\n  // const [name, setName] = useState(\"\");\n  // const [address, setAddress] = useState(\"\");\n  // const [phoneNo, setPhoneNo] = useState(\"\");\n  // useEffect(() => {\n  //     if (name === \"\" || regexPhone.test(phoneNo) === false || address === \"\") {\n  //         setDisabled(true);\n  //     } else {\n  //         setDisabled(false);\n  //     }\n  // }, [name, phoneNo, address]);\n  // const handleChange = (e) => {\n  //     const { name, value } = e.target;\n  //     console.log(name);\n  //     console.log(\"sdt :\",name.phoneNo);\n  //     console.log(\"name :\",name.name);\n  //     console.log(\"address :\",name.address);\n  //     switch(name) {\n  //         case 'name':\n  //           setName(value);\n  //           console.log(\"name: \", typeof(name));\n  //           break;\n  //         case 'address':\n  //             setAddress(value);\n  //             break;\n  //         case 'phoneNo':\n  //           setPhoneNo(value);\n  //           break;\n  //         default:\n  //     }\n  // };\n  // const onFinish = (values: ETypeForm) => {\n  //     console.log(\"Success:\", values);\n  //     console.log(\"Ok roi ban nha\");\n  //     setDisabled(false);\n  // };\n  // const onFinishFailed = (errorInfo: ValidateErrorEntity) => {\n  //     console.log(\"Failed:\", errorInfo);\n  //     console.log(\"Fail roi ban oi\");\n  //     setDisabled(true);\n  // };\n  // // const [progress, setProgress] = useState<boolean>(true);\n  // // const [loading, setLoading] = useState<boolean>(false);\n  // // const [province, setProvince] = useState<string | undefined>(() => {\n  // //     if (store) {\n  // //         return store.province as string;\n  // //     }\n  // //     return undefined;\n  // // });\n  // // const [district, setDistrict] = useState<string | undefined>(() => {\n  // //     if (store) {\n  // //         return store.district as string;\n  // //     }\n  // //     return undefined;\n  // // });\n  // // const { loadingProvince, provinces } = useProvices();\n  // // const { loadingDistrict, districts } = useDistricts(province, true);\n  // // const { loadingWard, wards } = useWards({ province, district, loading: true });\n  // // const onChangeProvince = (value: string) => {\n  // //     setProvince(value);\n  // //     setDistrict(undefined)\n  // //     removeField('district');\n  // //     removeField('ward')\n  // // };\n  // // const onChangeDistrict = (value: string) => {\n  // //     setDistrict(value);\n  // //     removeField('ward');\n  // // };\n  // // const removeField = (field: string) => {\n  // //     form.setFieldsValue({\n  // //         [field]: undefined,\n  // //     });\n  // // };\n  // // const createNewStore = async (values: IDataCreateStore) => {\n  // //     try {\n  // //         if (localStorage.getItem('shortLiveToken') !== null)\n  // //             values.saleChannels = [SaleChannelId.FACEBOOK];\n  // //         const querySearch: {\n  // //             saleChannel?: SaleChannelId;\n  // //         } = queryString.parse(location.search.replace('?', ''));\n  // //         let data = values;\n  // //         if (querySearch.saleChannel && validChannel(querySearch.saleChannel)) {\n  // //             data = {\n  // //                 ...values,\n  // //                 saleChannels: [querySearch.saleChannel],\n  // //             };\n  // //         }\n  // //         const result = await createStore(data);\n  // //         await updateUserStorePreference({\n  // //             storeId: result._id,\n  // //             hideNewUserGuide: false,\n  // //         });\n  // //         dispatch({\n  // //             type: types.SET_STORE,\n  // //             payload: result,\n  // //         });\n  // //     } catch (error) {\n  // //         if (get(error, 'response.status') === 409) {\n  // //             return message.error('Tên cửa hàng đã tồn tại. Vui lòng nhập tên khác');\n  // //         }\n  // //         return message.error('Lỗi tạo cửa hàng');\n  // //     } finally {\n  // //         setLoading(false);\n  // //     }\n  // // };\n  // // const editStore = async (values: IDataCreateStore) => {\n  // //     try {\n  // //         const result = await updateStore(store._id as string, {\n  // //             ...values,\n  // //         });\n  // //         dispatch({\n  // //             type: types.SET_STORE,\n  // //             payload: result,\n  // //         });\n  // //     } catch (error) {\n  // //         message.error('Lỗi chỉnh sửa cửa hàng');\n  // //     } finally {\n  // //         setLoading(false);\n  // //     }\n  // // };\n  // // const onFinish = (values: IDataCreateStore) => {\n  // //     setLoading(true);\n  // //     if (type === ETypeForm.NEW) {\n  // //         createNewStore(values);\n  // //     } else {\n  // //         editStore(values);\n  // //     }\n  // // };\n  // // useEffect(() => {\n  // //     if (\n  // //         (!loadingDistrict && !loadingWard && type === ETypeForm.EDIT) ||\n  // //         type === ETypeForm.NEW\n  // //     ) {\n  // //         setProgress(false);\n  // //     }\n  // // }, [loadingDistrict, loadingWard, type]);\n  // // if (progress) {\n  // //     return (\n  // //         <div style={{ height: 320 }}>\n  // //             <Loading full />\n  // //         </div>\n  // //     );\n  // // }\n  // return (\n  //     <Form\n  //         layout=\"vertical\"\n  //         // form={form}\n  //         // // onFinish={onFinish}\n  //         // initialValues={{\n  //         //     ...pick(store, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n  //         // }}\n  //         // form={form}\n  //         onFinish={onFinish}\n  //         onFinishFailed={onFinishFailed}\n  //     >\n  //         <Form.Item\n  //             name=\"name\"\n  //             label=\"Tên cửa hàng\"\n  //             rules={[{ required: true, message: 'Vui lòng nhập Tên cửa hàng' }]}\n  //         >\n  //             <Input\n  //                 size={size}\n  //                 placeholder=\"Tên cửa hàng\"\n  //                 autoFocus\n  //                 name=\"name\"\n  //                 value={name}\n  //                 onChange={handleChange}\n  //             />\n  //         </Form.Item>\n  //         <Form.Item\n  //             name=\"phoneNo\"\n  //             label=\"Số điện thoại\"\n  //             rules={[\n  //                 { required: true, message: 'Vui lòng nhập Số điện thoại' },\n  //                 {\n  //                     validator: rules.validatePhone,\n  //                 },\n  //             ]}\n  //         >\n  //             <Input\n  //                 style={style}\n  //                 size={size}\n  //                 placeholder=\"Số điện thoại cửa hàng\"\n  //                 pattern={`${regexPhone}`}\n  //                 name=\"phoneNo\"\n  //                 value={phoneNo}\n  //                 onChange={handleChange}\n  //             />\n  //         </Form.Item>\n  //         {/* <Row gutter={15}>\n  //             <Col md={8}>\n  //                 <Form.Item\n  //                     name=\"province\"\n  //                     label=\"Tỉnh/thành phố\"\n  //                     rules={[\n  //                         {\n  //                             required: true,\n  //                             message: 'Chọn tỉnh/thành phố',\n  //                         },\n  //                     ]}\n  //                 >\n  //                     <Select\n  //                         showSearch\n  //                         style={{ width: '100%' }}\n  //                         optionFilterProp=\"children\"\n  //                         onChange={onChangeProvince}\n  //                         filterOption={(input: string, option: any) =>\n  //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n  //                         }\n  //                         loading={loadingProvince}\n  //                         onFocus={disabledAutosuggestion}\n  //                         placeholder=\"Chọn tỉnh/thành phố\"\n  //                     >\n  //                         <Select.Option value={'-1'} key={'-1'} disabled>\n  //                             Chọn tỉnh/thành phố\n  //                         </Select.Option>\n  //                         {map(provinces, (province: Province) => (\n  //                             <Select.Option value={province.code} key={province.code}>\n  //                                 {province.name}\n  //                             </Select.Option>\n  //                         ))}\n  //                     </Select>\n  //                 </Form.Item>\n  //             </Col>\n  //             <Col md={8}>\n  //                 <Form.Item\n  //                     name=\"district\"\n  //                     label=\"Quận/huyện\"\n  //                     rules={[{ required: true, message: 'Chọn quận/huyện' }]}\n  //                 >\n  //                     <Select\n  //                         size={size}\n  //                         placeholder=\"Chọn quận/huyện\"\n  //                         onChange={onChangeDistrict}\n  //                         showSearch\n  //                         filterOption={(input, option: any) =>\n  //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n  //                         }\n  //                         disabled={!province}\n  //                         loading={loadingDistrict}\n  //                         onFocus={disabledAutosuggestion}\n  //                     >\n  //                         <Select.Option value={'-1'} key={'-1'} disabled>\n  //                             Chọn quận/huyện\n  //                         </Select.Option>\n  //                         {map(districts, (district: District) => (\n  //                             <Select.Option value={district.code} key={district.code}>\n  //                                 {district.name}\n  //                             </Select.Option>\n  //                         ))}\n  //                     </Select>\n  //                 </Form.Item>\n  //             </Col>\n  //             <Col md={8}>\n  //                 <Form.Item\n  //                     name=\"ward\"\n  //                     label=\"Xã/phường\"\n  //                     rules={[{ required: true, message: 'Chọn xã/phường' }]}\n  //                 >\n  //                     <Select\n  //                         size={size}\n  //                         placeholder=\"Chọn xã/phường\"\n  //                         showSearch\n  //                         filterOption={(input, option: any) =>\n  //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n  //                         }\n  //                         disabled={!district}\n  //                         loading={loadingWard}\n  //                         onFocus={disabledAutosuggestion}\n  //                     >\n  //                         <Select.Option value={'-1'} key={'-1'} disabled>\n  //                             Chọn xã/phường\n  //                         </Select.Option>\n  //                         {map(wards, (ward: Ward) => {\n  //                             return (\n  //                                 <Select.Option value={ward.code} key={ward.code}>\n  //                                     {ward.name}\n  //                                 </Select.Option>\n  //                             );\n  //                         })}\n  //                     </Select>\n  //                 </Form.Item>\n  //             </Col>\n  //         </Row> */}\n  //         <Form.Item\n  //             name=\"address\"\n  //             rules={[{ required: true, message: 'Vui lòng nhập Địa chỉ' }]}\n  //             label=\"Địa chỉ\"\n  //         >\n  //             <Input.TextArea\n  //                 autoComplete=\"off\"\n  //                 placeholder=\"Điền địa chỉ cửa hàng\"\n  //                 rows={3}\n  //                 name=\"address\"\n  //                 value={address}\n  //                 onChange={handleChange}\n  //             ></Input.TextArea>\n  //         </Form.Item>\n  //         {/* <Form.Item>\n  //             <Button type=\"primary\" size={size} htmlType=\"submit\" block  disabled={disabled} >\n  //                 {type === ETypeForm.EDIT ? 'Chỉnh sửa cửa hàng' : 'Tạo cửa hàng'}\n  //             </Button>\n  //         </Form.Item> */}\n  //         <Form.Item className=\"submit\">\n  //           <Button type=\"primary\" htmlType=\"submit\" block disabled={disabled}>\n  //             Login\n  //           </Button>\n  //         </Form.Item>\n  //     </Form>\n  // );\n};\n\n_c = FormCreateStore;\nexport default FormCreateStore;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormCreateStore\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/create-store/form-create-store.tsx"],"names":["storeApi","createStore","updateStore","ETypeForm","size","style","width","FormCreateStore","type","NEW"],"mappings":"AAQA,OAAOA,QAAP,MAA2C,qBAA3C;AAgBA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAA+BF,QAArC;AAEA,WAAYG,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AASZ,MAAMC,IAAI,GAAG,OAAb;AACA,MAAMC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAd;;AAGA,MAAMC,eAA0B,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAGL,SAAS,CAACM;AAAnB,CAAD,KAA8B,CAC7D;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CA1XD;;KAAMF,e;AA4XN,eAAeA,eAAf","sourcesContent":["import { Button, Col, Form, Input, message, Row, Select } from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\nimport { get, map, pick } from 'lodash';\nimport * as queryString from 'querystring';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { setFlagsFromString } from 'v8';\nimport storeApi, { IDataCreateStore } from '../../api/store-api';\nimport { updateUserStorePreference } from '../../api/user-store-preference-api';\nimport { Loading } from '../../components';\nimport { disabledAutosuggestion, validChannel } from '../../helper';\nimport rules from '../../helper/rules';\nimport { useDistricts, useProvices, useWards } from '../../hook/useLocation';\nimport { SaleChannelId } from '../../models';\nimport types from '../../reducers/storeState/type';\nimport { IState } from '../../store/rootReducer';\nimport { District, Province, Ward } from './interface';\n\nimport { ValidateErrorEntity } from \"rc-field-form/es/interface\";\nimport { UnlockOutlined, UserOutlined } from '@ant-design/icons';\n\n\n\nconst { createStore, updateStore } = storeApi;\n\nexport enum ETypeForm {\n    NEW = '1',\n    EDIT = '2',\n}\ninterface Props {\n    type?: ETypeForm;\n}\n\n\nconst size = 'large';\nconst style = { width: '100%' };\n\n\nconst FormCreateStore: FC<Props> = ({ type = ETypeForm.NEW }) => {\n    // const dispatch = useDispatch();\n    // const store = useSelector((state: IState) => state.store.data);\n    // const [form] = useForm();\n    // const location = useLocation();\n\n    // const regexPhone = /^((\\+84|84|02[0-9])|(0[3|5|7|8|9]))+([0-9]{8})\\b/;\n\n\n\n   \n    // const [disabled, setDisabled] = useState(false);\n    // const [name, setName] = useState(\"\");\n    // const [address, setAddress] = useState(\"\");\n    // const [phoneNo, setPhoneNo] = useState(\"\");\n\n\n    \n    // useEffect(() => {\n    //     if (name === \"\" || regexPhone.test(phoneNo) === false || address === \"\") {\n    //         setDisabled(true);\n    //     } else {\n    //         setDisabled(false);\n    //     }\n    // }, [name, phoneNo, address]);\n\n\n    // const handleChange = (e) => {\n\n    //     const { name, value } = e.target;\n\n    //     console.log(name);\n    //     console.log(\"sdt :\",name.phoneNo);\n    //     console.log(\"name :\",name.name);\n    //     console.log(\"address :\",name.address);\n\n\n\n    //     switch(name) {\n    //         case 'name':\n    //           setName(value);\n    //           console.log(\"name: \", typeof(name));\n    //           break;\n    //         case 'address':\n    //             setAddress(value);\n    //             break;\n    //         case 'phoneNo':\n    //           setPhoneNo(value);\n    //           break;\n    //         default:\n    //     }\n\n\n    // };\n\n    \n\n    // const onFinish = (values: ETypeForm) => {\n    //     console.log(\"Success:\", values);\n    //     console.log(\"Ok roi ban nha\");\n    //     setDisabled(false);\n    // };\n\n    // const onFinishFailed = (errorInfo: ValidateErrorEntity) => {\n    //     console.log(\"Failed:\", errorInfo);\n    //     console.log(\"Fail roi ban oi\");\n    //     setDisabled(true);\n    // };\n\n\n\n\n\n\n\n\n    // // const [progress, setProgress] = useState<boolean>(true);\n    // // const [loading, setLoading] = useState<boolean>(false);\n    // // const [province, setProvince] = useState<string | undefined>(() => {\n    // //     if (store) {\n    // //         return store.province as string;\n    // //     }\n    // //     return undefined;\n    // // });\n    // // const [district, setDistrict] = useState<string | undefined>(() => {\n    // //     if (store) {\n    // //         return store.district as string;\n    // //     }\n    // //     return undefined;\n    // // });\n\n    // // const { loadingProvince, provinces } = useProvices();\n    // // const { loadingDistrict, districts } = useDistricts(province, true);\n    // // const { loadingWard, wards } = useWards({ province, district, loading: true });\n\n    // // const onChangeProvince = (value: string) => {\n    // //     setProvince(value);\n    // //     setDistrict(undefined)\n    // //     removeField('district');\n    // //     removeField('ward')\n    // // };\n\n    // // const onChangeDistrict = (value: string) => {\n    // //     setDistrict(value);\n\n    // //     removeField('ward');\n    // // };\n\n    // // const removeField = (field: string) => {\n    // //     form.setFieldsValue({\n    // //         [field]: undefined,\n    // //     });\n    // // };\n\n    // // const createNewStore = async (values: IDataCreateStore) => {\n    // //     try {\n    // //         if (localStorage.getItem('shortLiveToken') !== null)\n    // //             values.saleChannels = [SaleChannelId.FACEBOOK];\n\n    // //         const querySearch: {\n    // //             saleChannel?: SaleChannelId;\n    // //         } = queryString.parse(location.search.replace('?', ''));\n\n    // //         let data = values;\n\n    // //         if (querySearch.saleChannel && validChannel(querySearch.saleChannel)) {\n    // //             data = {\n    // //                 ...values,\n    // //                 saleChannels: [querySearch.saleChannel],\n    // //             };\n    // //         }\n\n    // //         const result = await createStore(data);\n\n    // //         await updateUserStorePreference({\n    // //             storeId: result._id,\n    // //             hideNewUserGuide: false,\n    // //         });\n\n    // //         dispatch({\n    // //             type: types.SET_STORE,\n    // //             payload: result,\n    // //         });\n    // //     } catch (error) {\n    // //         if (get(error, 'response.status') === 409) {\n    // //             return message.error('Tên cửa hàng đã tồn tại. Vui lòng nhập tên khác');\n    // //         }\n    // //         return message.error('Lỗi tạo cửa hàng');\n    // //     } finally {\n    // //         setLoading(false);\n    // //     }\n    // // };\n\n    // // const editStore = async (values: IDataCreateStore) => {\n    // //     try {\n    // //         const result = await updateStore(store._id as string, {\n    // //             ...values,\n    // //         });\n\n    // //         dispatch({\n    // //             type: types.SET_STORE,\n    // //             payload: result,\n    // //         });\n    // //     } catch (error) {\n    // //         message.error('Lỗi chỉnh sửa cửa hàng');\n    // //     } finally {\n    // //         setLoading(false);\n    // //     }\n    // // };\n\n    // // const onFinish = (values: IDataCreateStore) => {\n    // //     setLoading(true);\n    // //     if (type === ETypeForm.NEW) {\n    // //         createNewStore(values);\n    // //     } else {\n    // //         editStore(values);\n    // //     }\n    // // };\n\n    // // useEffect(() => {\n    // //     if (\n    // //         (!loadingDistrict && !loadingWard && type === ETypeForm.EDIT) ||\n    // //         type === ETypeForm.NEW\n    // //     ) {\n    // //         setProgress(false);\n    // //     }\n    // // }, [loadingDistrict, loadingWard, type]);\n\n    // // if (progress) {\n    // //     return (\n    // //         <div style={{ height: 320 }}>\n    // //             <Loading full />\n    // //         </div>\n    // //     );\n    // // }\n\n    // return (\n    //     <Form\n    //         layout=\"vertical\"\n    //         // form={form}\n    //         // // onFinish={onFinish}\n    //         // initialValues={{\n    //         //     ...pick(store, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n    //         // }}\n\n    //         // form={form}\n    //         onFinish={onFinish}\n    //         onFinishFailed={onFinishFailed}\n\n    //     >\n    //         <Form.Item\n    //             name=\"name\"\n    //             label=\"Tên cửa hàng\"\n    //             rules={[{ required: true, message: 'Vui lòng nhập Tên cửa hàng' }]}\n    //         >\n    //             <Input\n    //                 size={size}\n    //                 placeholder=\"Tên cửa hàng\"\n    //                 autoFocus\n\n    //                 name=\"name\"\n    //                 value={name}\n    //                 onChange={handleChange}\n    //             />\n    //         </Form.Item>\n\n    //         <Form.Item\n    //             name=\"phoneNo\"\n    //             label=\"Số điện thoại\"\n    //             rules={[\n    //                 { required: true, message: 'Vui lòng nhập Số điện thoại' },\n    //                 {\n    //                     validator: rules.validatePhone,\n    //                 },\n    //             ]}\n    //         >\n    //             <Input\n    //                 style={style}\n    //                 size={size}\n    //                 placeholder=\"Số điện thoại cửa hàng\"\n\n                    \n    //                 pattern={`${regexPhone}`}\n    //                 name=\"phoneNo\"\n    //                 value={phoneNo}\n    //                 onChange={handleChange}\n    //             />\n    //         </Form.Item>\n\n    //         {/* <Row gutter={15}>\n    //             <Col md={8}>\n    //                 <Form.Item\n    //                     name=\"province\"\n    //                     label=\"Tỉnh/thành phố\"\n    //                     rules={[\n    //                         {\n    //                             required: true,\n    //                             message: 'Chọn tỉnh/thành phố',\n    //                         },\n    //                     ]}\n    //                 >\n    //                     <Select\n    //                         showSearch\n    //                         style={{ width: '100%' }}\n    //                         optionFilterProp=\"children\"\n    //                         onChange={onChangeProvince}\n    //                         filterOption={(input: string, option: any) =>\n    //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    //                         }\n    //                         loading={loadingProvince}\n    //                         onFocus={disabledAutosuggestion}\n    //                         placeholder=\"Chọn tỉnh/thành phố\"\n    //                     >\n    //                         <Select.Option value={'-1'} key={'-1'} disabled>\n    //                             Chọn tỉnh/thành phố\n    //                         </Select.Option>\n\n    //                         {map(provinces, (province: Province) => (\n    //                             <Select.Option value={province.code} key={province.code}>\n    //                                 {province.name}\n    //                             </Select.Option>\n    //                         ))}\n    //                     </Select>\n    //                 </Form.Item>\n    //             </Col>\n\n    //             <Col md={8}>\n    //                 <Form.Item\n    //                     name=\"district\"\n    //                     label=\"Quận/huyện\"\n    //                     rules={[{ required: true, message: 'Chọn quận/huyện' }]}\n\n\n    //                 >\n    //                     <Select\n    //                         size={size}\n    //                         placeholder=\"Chọn quận/huyện\"\n    //                         onChange={onChangeDistrict}\n    //                         showSearch\n    //                         filterOption={(input, option: any) =>\n    //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    //                         }\n    //                         disabled={!province}\n    //                         loading={loadingDistrict}\n    //                         onFocus={disabledAutosuggestion}\n    //                     >\n    //                         <Select.Option value={'-1'} key={'-1'} disabled>\n    //                             Chọn quận/huyện\n    //                         </Select.Option>\n    //                         {map(districts, (district: District) => (\n    //                             <Select.Option value={district.code} key={district.code}>\n    //                                 {district.name}\n    //                             </Select.Option>\n    //                         ))}\n    //                     </Select>\n    //                 </Form.Item>\n    //             </Col>\n\n    //             <Col md={8}>\n    //                 <Form.Item\n    //                     name=\"ward\"\n    //                     label=\"Xã/phường\"\n    //                     rules={[{ required: true, message: 'Chọn xã/phường' }]}\n    //                 >\n    //                     <Select\n    //                         size={size}\n    //                         placeholder=\"Chọn xã/phường\"\n    //                         showSearch\n    //                         filterOption={(input, option: any) =>\n    //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    //                         }\n    //                         disabled={!district}\n    //                         loading={loadingWard}\n    //                         onFocus={disabledAutosuggestion}\n    //                     >\n    //                         <Select.Option value={'-1'} key={'-1'} disabled>\n    //                             Chọn xã/phường\n    //                         </Select.Option>\n    //                         {map(wards, (ward: Ward) => {\n    //                             return (\n    //                                 <Select.Option value={ward.code} key={ward.code}>\n    //                                     {ward.name}\n    //                                 </Select.Option>\n    //                             );\n    //                         })}\n    //                     </Select>\n    //                 </Form.Item>\n    //             </Col>\n    //         </Row> */}\n\n    //         <Form.Item\n    //             name=\"address\"\n    //             rules={[{ required: true, message: 'Vui lòng nhập Địa chỉ' }]}\n    //             label=\"Địa chỉ\"\n    //         >\n    //             <Input.TextArea\n    //                 autoComplete=\"off\"\n    //                 placeholder=\"Điền địa chỉ cửa hàng\"\n    //                 rows={3}\n\n    //                 name=\"address\"\n    //                 value={address}\n    //                 onChange={handleChange}\n    //             ></Input.TextArea>\n    //         </Form.Item>\n\n    //         {/* <Form.Item>\n    //             <Button type=\"primary\" size={size} htmlType=\"submit\" block  disabled={disabled} >\n    //                 {type === ETypeForm.EDIT ? 'Chỉnh sửa cửa hàng' : 'Tạo cửa hàng'}\n    //             </Button>\n    //         </Form.Item> */}\n    //         <Form.Item className=\"submit\">\n    //           <Button type=\"primary\" htmlType=\"submit\" block disabled={disabled}>\n    //             Login\n    //           </Button>\n    //         </Form.Item>\n    //     </Form>\n    // );\n};\n\nexport default FormCreateStore;\n"]},"metadata":{},"sourceType":"module"}