{"ast":null,"code":"import { push } from 'connected-react-router';\nimport axios from '../api/axios-client';\nimport authTypes from '../reducers/authState/authTypes';\nexport const onApiUnauthenticated = () => next => action => {\n  if (action.type === 'API_UNAUTHENTICATED') {\n    return next(push('/login'));\n  }\n\n  return next(action);\n};\nconst typesUpdateToken = [authTypes.LOGIN_SUCCESSS, authTypes.UPDATE_TOKEN];\nexport const onAuthSuccess = () => next => action => {\n  if (typesUpdateToken.includes(action.type)) {\n    const {\n      accessToken,\n      type\n    } = action.payload;\n    axios.defaults.headers.common.Authorization = `${type} ${accessToken}`;\n  } else if (action.type === authTypes.LOGIN_FAILED) {\n    delete axios.defaults.headers.Authorization;\n  }\n\n  return next(action);\n};\nexport const checkAuthOnRehydrate = () => next => action => {\n  if (action.type === 'persist/REHYDRATE') {\n    if (action.payload && action.payload.auth && action.payload.auth.token) {\n      const {\n        token\n      } = action.payload.auth;\n      axios.defaults.headers.common.Authorization = `${token.type} ${token.accessToken}`;\n    } else {\n      delete axios.defaults.headers.Authorization;\n    }\n  }\n\n  return next(action);\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/middleware/auth.ts"],"names":["push","axios","authTypes","onApiUnauthenticated","next","action","type","typesUpdateToken","LOGIN_SUCCESSS","UPDATE_TOKEN","onAuthSuccess","includes","accessToken","payload","defaults","headers","common","Authorization","LOGIN_FAILED","checkAuthOnRehydrate","auth","token"],"mappings":"AAAA,SAASA,IAAT,QAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AAGA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,IAAD,IAAgBC,MAAD,IAAyB;AAC9E,MAAIA,MAAM,CAACC,IAAP,KAAgB,qBAApB,EAA2C;AACvC,WAAOF,IAAI,CAACJ,IAAI,CAAC,QAAD,CAAL,CAAX;AACH;;AAED,SAAOI,IAAI,CAACC,MAAD,CAAX;AACH,CANM;AAQP,MAAME,gBAAgB,GAAG,CAACL,SAAS,CAACM,cAAX,EAA2BN,SAAS,CAACO,YAArC,CAAzB;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAON,IAAD,IAAgBC,MAAD,IAAyB;AACvE,MAAIE,gBAAgB,CAACI,QAAjB,CAA0BN,MAAM,CAACC,IAAjC,CAAJ,EAA4C;AACxC,UAAM;AAAEM,MAAAA,WAAF;AAAeN,MAAAA;AAAf,QAAwBD,MAAM,CAACQ,OAArC;AAEAZ,IAAAA,KAAK,CAACa,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA+C,GAAEX,IAAK,IAAGM,WAAY,EAArE;AACH,GAJD,MAIO,IAAIP,MAAM,CAACC,IAAP,KAAgBJ,SAAS,CAACgB,YAA9B,EAA4C;AAC/C,WAAOjB,KAAK,CAACa,QAAN,CAAeC,OAAf,CAAuBE,aAA9B;AACH;;AAED,SAAOb,IAAI,CAACC,MAAD,CAAX;AACH,CAVM;AAYP,OAAO,MAAMc,oBAAoB,GAAG,MAAOf,IAAD,IAAgBC,MAAD,IAAyB;AAC9E,MAAIA,MAAM,CAACC,IAAP,KAAgB,mBAApB,EAAyC;AACrC,QAAID,MAAM,CAACQ,OAAP,IAAkBR,MAAM,CAACQ,OAAP,CAAeO,IAAjC,IAAyCf,MAAM,CAACQ,OAAP,CAAeO,IAAf,CAAoBC,KAAjE,EAAwE;AACpE,YAAM;AAAEA,QAAAA;AAAF,UAAYhB,MAAM,CAACQ,OAAP,CAAeO,IAAjC;AACAnB,MAAAA,KAAK,CAACa,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA+C,GAAEI,KAAK,CAACf,IAAK,IAAGe,KAAK,CAACT,WAAY,EAAjF;AACH,KAHD,MAGO;AACH,aAAOX,KAAK,CAACa,QAAN,CAAeC,OAAf,CAAuBE,aAA9B;AACH;AACJ;;AAED,SAAOb,IAAI,CAACC,MAAD,CAAX;AACH,CAXM","sourcesContent":["import { push } from 'connected-react-router';\nimport axios from '../api/axios-client';\nimport authTypes from '../reducers/authState/authTypes';\nimport { ReduxAction } from '../types';\n\nexport const onApiUnauthenticated = () => (next: any) => (action: ReduxAction) => {\n    if (action.type === 'API_UNAUTHENTICATED') {\n        return next(push('/login'));\n    }\n\n    return next(action);\n};\n\nconst typesUpdateToken = [authTypes.LOGIN_SUCCESSS, authTypes.UPDATE_TOKEN];\n\nexport const onAuthSuccess = () => (next: any) => (action: ReduxAction) => {\n    if (typesUpdateToken.includes(action.type)) {\n        const { accessToken, type } = action.payload;\n\n        axios.defaults.headers.common.Authorization = `${type} ${accessToken}`;\n    } else if (action.type === authTypes.LOGIN_FAILED) {\n        delete axios.defaults.headers.Authorization;\n    }\n\n    return next(action);\n};\n\nexport const checkAuthOnRehydrate = () => (next: any) => (action: ReduxAction) => {\n    if (action.type === 'persist/REHYDRATE') {\n        if (action.payload && action.payload.auth && action.payload.auth.token) {\n            const { token } = action.payload.auth;\n            axios.defaults.headers.common.Authorization = `${token.type} ${token.accessToken}`;\n        } else {\n            delete axios.defaults.headers.Authorization;\n        }\n    }\n\n    return next(action);\n};\n"]},"metadata":{},"sourceType":"module"}