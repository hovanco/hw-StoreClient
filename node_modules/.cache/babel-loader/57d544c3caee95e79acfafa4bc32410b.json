{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/inventory/inventory-list/advance-filter/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { find, isEqual } from 'lodash';\nimport { Col, Popover, Row, Select, Space } from 'antd';\nimport RComponent from './components';\nimport iconTrash from \"../../../../assets/images/ic-trash-blue.svg\";\nimport { InsaButton } from '../../../../components';\nimport { CaretDownOutlined } from '@ant-design/icons';\nimport dataFilterInventory from './data';\nimport { useInventoryTable } from '../context';\nimport './index.less';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AdvanceFilter = () => {\n  _s();\n\n  const [visible, setVisible] = useState(false);\n  const [localFilter, setLocalFilter] = useState([]);\n  const [filterOptions, setFilterOptions] = useState(dataFilterInventory);\n  const {\n    filter,\n    advanceFilterChange\n  } = useInventoryTable();\n  useEffect(() => {\n    let {\n      status,\n      categoryId,\n      brandId\n    } = filter;\n    const filtersToggle = [];\n    let newLocalFilter = localFilter.map(item => {\n      if (item.id === 'status') {\n        if (item.value && !status) {\n          filtersToggle.push('status');\n        }\n\n        return { ...item,\n          value: status\n        };\n      }\n\n      if (item.id === 'categoryId') {\n        if (item.value && !categoryId) {\n          filtersToggle.push('categoryId');\n        }\n\n        return { ...item,\n          value: categoryId\n        };\n      }\n\n      if (item.id === 'brandId') {\n        if (item.value && !brandId) {\n          filtersToggle.push('brandId');\n        }\n\n        return { ...item,\n          value: brandId\n        };\n      }\n\n      return item;\n    }).filter(item => item.value !== undefined);\n    if (!isEqual(newLocalFilter, localFilter)) setLocalFilter(newLocalFilter);\n    toggleUseStatusFilterOptionById(filtersToggle); // eslint-disable-next-line\n  }, [filter.status, filter.categoryId, filter.brandId]);\n\n  const toggle = () => setVisible(!visible);\n\n  const addNewFilterItem = key => {\n    let newFilterItem = find(filterOptionsNotUsed, ['id', key]);\n\n    if (newFilterItem) {\n      setLocalFilter([...localFilter, newFilterItem]);\n      toggleUseStatusFilterOptionById([newFilterItem.id]);\n    }\n  };\n\n  const filterOptionsNotUsed = useMemo(() => {\n    return filterOptions.filter(item => !item.used);\n  }, [filterOptions]);\n\n  const toggleUseStatusFilterOptionById = filterOptionId => {\n    let newFilterOptions = filterOptions.map(item => {\n      if (filterOptionId.includes(item.id)) return { ...item,\n        used: !item.used\n      };\n      return item;\n    });\n    setFilterOptions(newFilterOptions);\n  };\n\n  const changeFilterItem = (oldKey, newKey) => {\n    let newLocalFilter = localFilter.map(item => {\n      if (item.id === oldKey) return { ...item,\n        id: newKey,\n        value: undefined\n      };\n      return item;\n    });\n    setLocalFilter(newLocalFilter);\n    toggleUseStatusFilterOptionById([oldKey, newKey]);\n  };\n\n  const removeFilterItem = key => {\n    let newLocalFilter = localFilter.filter(item => item.id !== key);\n    setLocalFilter(newLocalFilter);\n    toggleUseStatusFilterOptionById([key]);\n  };\n\n  const applyFilter = () => {\n    let newFilterContext = localFilter.filter(i => i.value !== undefined).reduce((prevValue, currValue) => {\n      return { ...prevValue,\n        [currValue.id]: currValue.value\n      };\n    }, {});\n    advanceFilterChange(newFilterContext);\n    toggle();\n  };\n\n  const filterValueChange = filterItem => {\n    let newLocalFilter = localFilter.map(item => {\n      if (item.id === filterItem.id) return filterItem;\n      return item;\n    });\n    setLocalFilter(newLocalFilter);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Popover, {\n    title: \"\",\n    arrowContent: null,\n    style: {\n      width: 460\n    },\n    trigger: \"click\",\n    visible: visible,\n    onVisibleChange: toggle,\n    overlayClassName: \"advance-filter-modal\",\n    content: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          width: 460\n        },\n        gutter: [0, 8],\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          span: 24,\n          children: /*#__PURE__*/_jsxDEV(Space, {\n            direction: \"vertical\",\n            children: localFilter.map(item => /*#__PURE__*/_jsxDEV(Row, {\n              gutter: 8,\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                className: \"filter-key-col\",\n                children: /*#__PURE__*/_jsxDEV(Select, {\n                  style: {\n                    minWidth: 136\n                  },\n                  value: item.id,\n                  onChange: value => changeFilterItem(item.id, value),\n                  suffixIcon: /*#__PURE__*/_jsxDEV(CaretDownOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 61\n                  }, this),\n                  children: filterOptions.filter(option => {\n                    return option.id === item.id || !option.used;\n                  }).map(option => /*#__PURE__*/_jsxDEV(Select.Option, {\n                    value: option.id,\n                    children: option.name\n                  }, option.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                flex: 1,\n                className: \"filter-value-col\",\n                children: /*#__PURE__*/_jsxDEV(RComponent, {\n                  filter: item,\n                  onChange: filterValueChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                className: \"filter-action-col\",\n                children: /*#__PURE__*/_jsxDEV(InsaButton, {\n                  icon: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: iconTrash,\n                    alt: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 55\n                  }, this),\n                  onClick: () => removeFilterItem(item.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this), localFilter.length < filterOptions.length && /*#__PURE__*/_jsxDEV(Col, {\n          span: 24,\n          children: /*#__PURE__*/_jsxDEV(Space, {\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              style: {\n                minWidth: 136\n              },\n              value: 'root',\n              onChange: addNewFilterItem,\n              suffixIcon: /*#__PURE__*/_jsxDEV(CaretDownOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 53\n              }, this),\n              children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n                value: \"root\",\n                children: \"Th\\xEAm b\\u1ED9 l\\u1ECDc\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 41\n              }, this), filterOptionsNotUsed.map(item => /*#__PURE__*/_jsxDEV(Select.Option, {\n                value: item.id,\n                children: item.name\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 45\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          span: 24,\n          children: /*#__PURE__*/_jsxDEV(InsaButton, {\n            style: {\n              backgroundColor: '#6c6fbf',\n              color: '#fff',\n              width: 136\n            },\n            onClick: applyFilter,\n            children: \"L\\u1ECDc\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)\n    }, void 0, false),\n    children: /*#__PURE__*/_jsxDEV(InsaButton, {\n      children: \"L\\u1ECDc s\\u1EA3n ph\\u1EA9m\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AdvanceFilter, \"MJuyyE8W8SOFR44k3ZcsBIdpf20=\", false, function () {\n  return [useInventoryTable];\n});\n\n_c = AdvanceFilter;\nexport default AdvanceFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvanceFilter\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/inventory/inventory-list/advance-filter/index.tsx"],"names":["React","useState","useMemo","useEffect","find","isEqual","Col","Popover","Row","Select","Space","RComponent","InsaButton","CaretDownOutlined","dataFilterInventory","useInventoryTable","AdvanceFilter","visible","setVisible","localFilter","setLocalFilter","filterOptions","setFilterOptions","filter","advanceFilterChange","status","categoryId","brandId","filtersToggle","newLocalFilter","map","item","id","value","push","undefined","toggleUseStatusFilterOptionById","toggle","addNewFilterItem","key","newFilterItem","filterOptionsNotUsed","used","filterOptionId","newFilterOptions","includes","changeFilterItem","oldKey","newKey","removeFilterItem","applyFilter","newFilterContext","i","reduce","prevValue","currValue","filterValueChange","filterItem","width","minWidth","option","name","iconTrash","length","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { FC, useState, useMemo, useEffect } from 'react';\n\nimport { find, isEqual } from 'lodash';\n\nimport { Col, Popover, Row, Select, Space } from 'antd';\nimport RComponent from './components';\nimport iconTrash from '../../../../assets/images/ic-trash-blue.svg';\nimport { InsaButton } from '../../../../components';\nimport { CaretDownOutlined } from '@ant-design/icons';\n\nimport dataFilterInventory, { IFilterOption } from './data';\nimport { useInventoryTable } from '../context';\n\nimport './index.less';\n\ninterface Props {}\n\nexport interface ILocalFilter extends IFilterOption {\n    value?: any;\n}\n\nconst AdvanceFilter: FC<Props> = () => {\n    const [visible, setVisible] = useState<boolean>(false);\n    const [localFilter, setLocalFilter] = useState<ILocalFilter[]>([]);\n    const [filterOptions, setFilterOptions] = useState<IFilterOption[]>(dataFilterInventory);\n\n    const { filter, advanceFilterChange } = useInventoryTable();\n\n    useEffect(() => {\n        let { status, categoryId, brandId } = filter;\n\n        const filtersToggle: string[] = [];\n        let newLocalFilter = localFilter\n            .map((item: ILocalFilter) => {\n                if (item.id === 'status') {\n                    if (item.value && !status) {\n                        filtersToggle.push('status');\n                    }\n                    return { ...item, value: status };\n                }\n                if (item.id === 'categoryId') {\n                    if (item.value && !categoryId) {\n                        filtersToggle.push('categoryId');\n                    }\n                    return { ...item, value: categoryId };\n                }\n                if (item.id === 'brandId') {\n                    if (item.value && !brandId) {\n                        filtersToggle.push('brandId');\n                    }\n                    return { ...item, value: brandId };\n                }\n\n                return item;\n            })\n            .filter((item: ILocalFilter) => item.value !== undefined);\n\n        if (!isEqual(newLocalFilter, localFilter)) setLocalFilter(newLocalFilter);\n\n        toggleUseStatusFilterOptionById(filtersToggle);\n        // eslint-disable-next-line\n    }, [filter.status, filter.categoryId, filter.brandId]);\n\n    const toggle = () => setVisible(!visible);\n\n    const addNewFilterItem = (key: string) => {\n        let newFilterItem: any = find(filterOptionsNotUsed, ['id', key]);\n\n        if (newFilterItem) {\n            setLocalFilter([...localFilter, newFilterItem]);\n            toggleUseStatusFilterOptionById([newFilterItem.id]);\n        }\n    };\n\n    const filterOptionsNotUsed = useMemo(() => {\n        return filterOptions.filter((item: IFilterOption) => !item.used);\n    }, [filterOptions]);\n\n    const toggleUseStatusFilterOptionById = (filterOptionId: string[]) => {\n        let newFilterOptions = filterOptions.map((item: IFilterOption) => {\n            if (filterOptionId.includes(item.id)) return { ...item, used: !item.used };\n\n            return item;\n        });\n\n        setFilterOptions(newFilterOptions);\n    };\n\n    const changeFilterItem = (oldKey: string, newKey: string) => {\n        let newLocalFilter = localFilter.map((item: ILocalFilter) => {\n            if (item.id === oldKey) return { ...item, id: newKey, value: undefined };\n\n            return item;\n        });\n\n        setLocalFilter(newLocalFilter);\n        toggleUseStatusFilterOptionById([oldKey, newKey]);\n    };\n\n    const removeFilterItem = (key: string) => {\n        let newLocalFilter = localFilter.filter((item: ILocalFilter) => item.id !== key);\n\n        setLocalFilter(newLocalFilter);\n        toggleUseStatusFilterOptionById([key]);\n    };\n\n    const applyFilter = () => {\n        let newFilterContext = localFilter\n            .filter((i: ILocalFilter) => i.value !== undefined)\n            .reduce((prevValue, currValue) => {\n                return { ...prevValue, [currValue.id]: currValue.value };\n            }, {});\n\n        advanceFilterChange(newFilterContext);\n        toggle();\n    };\n\n    const filterValueChange = (filterItem: ILocalFilter) => {\n        let newLocalFilter = localFilter.map((item: ILocalFilter) => {\n            if (item.id === filterItem.id) return filterItem;\n\n            return item;\n        });\n\n        setLocalFilter(newLocalFilter);\n    };\n\n    return (\n        <Popover\n            title=\"\"\n            arrowContent={null}\n            style={{ width: 460 }}\n            trigger=\"click\"\n            visible={visible}\n            onVisibleChange={toggle}\n            overlayClassName=\"advance-filter-modal\"\n            content={\n                <>\n                    <Row style={{ width: 460 }} gutter={[0, 8]}>\n                        <Col span={24}>\n                            <Space direction=\"vertical\">\n                                {localFilter.map((item: ILocalFilter) => (\n                                    <Row gutter={8}>\n                                        <Col className=\"filter-key-col\">\n                                            <Select\n                                                style={{ minWidth: 136 }}\n                                                value={item.id}\n                                                onChange={(value: string) =>\n                                                    changeFilterItem(item.id, value)\n                                                }\n                                                suffixIcon={<CaretDownOutlined />}\n                                            >\n                                                {filterOptions\n                                                    .filter((option: IFilterOption) => {\n                                                        return (\n                                                            option.id === item.id || !option.used\n                                                        );\n                                                    })\n                                                    .map((option: IFilterOption) => (\n                                                        <Select.Option\n                                                            value={option.id}\n                                                            key={option.id}\n                                                        >\n                                                            {option.name}\n                                                        </Select.Option>\n                                                    ))}\n                                            </Select>\n                                        </Col>\n                                        <Col flex={1} className=\"filter-value-col\">\n                                            <RComponent\n                                                filter={item}\n                                                onChange={filterValueChange}\n                                            />\n                                        </Col>\n                                        <Col className=\"filter-action-col\">\n                                            <InsaButton\n                                                icon={<img src={iconTrash} alt=\"icon\" />}\n                                                onClick={() => removeFilterItem(item.id)}\n                                            ></InsaButton>\n                                        </Col>\n                                    </Row>\n                                ))}\n                            </Space>\n                        </Col>\n                        {localFilter.length < filterOptions.length && (\n                            <Col span={24}>\n                                <Space>\n                                    <Select\n                                        style={{ minWidth: 136 }}\n                                        value={'root'}\n                                        onChange={addNewFilterItem}\n                                        suffixIcon={<CaretDownOutlined />}\n                                    >\n                                        <Select.Option value=\"root\">Thêm bộ lọc</Select.Option>\n                                        {filterOptionsNotUsed.map((item: IFilterOption) => (\n                                            <Select.Option value={item.id} key={item.id}>\n                                                {item.name}\n                                            </Select.Option>\n                                        ))}\n                                    </Select>\n                                </Space>\n                            </Col>\n                        )}\n\n                        <Col span={24}>\n                            <InsaButton\n                                style={{\n                                    backgroundColor: '#6c6fbf',\n                                    color: '#fff',\n                                    width: 136,\n                                }}\n                                onClick={applyFilter}\n                            >\n                                Lọc\n                            </InsaButton>\n                        </Col>\n                    </Row>\n                </>\n            }\n        >\n            <InsaButton>Lọc sản phẩm</InsaButton>\n        </Popover>\n    );\n};\nexport default AdvanceFilter;\n"]},"metadata":{},"sourceType":"module"}