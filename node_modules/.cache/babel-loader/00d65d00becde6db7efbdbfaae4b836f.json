{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport locationApi from '../api/location-api';\n\nconst useProvices = () => {\n  _s();\n\n  const [provinces, setProvinces] = useState([]);\n  const [loadingProvince, setLoadingProvince] = useState(true);\n  useEffect(() => {\n    async function getListProvinces() {\n      try {\n        const response = await locationApi.getProvinces();\n        setProvinces(response);\n      } catch (error) {\n        setProvinces([]);\n      } finally {\n        setLoadingProvince(false);\n      }\n    }\n\n    getListProvinces();\n  }, []);\n  return {\n    provinces,\n    loadingProvince\n  };\n};\n\n_s(useProvices, \"E2XqBnaySWVvLrbqLcEHQyTOMWw=\");\n\nconst useDistricts = (province, loading) => {\n  _s2();\n\n  const [districts, setDistricts] = useState([]);\n  const [loadingDistrict, setLoadingDistrict] = useState(loading || false);\n  useEffect(() => {\n    async function getListDistricts() {\n      if (!province) {\n        setLoadingDistrict(false);\n        return;\n      }\n\n      setLoadingDistrict(true);\n\n      try {\n        const response = await locationApi.getDistricts(province);\n        setDistricts(response);\n      } catch (error) {\n        setDistricts([]);\n      } finally {\n        setLoadingDistrict(false);\n      }\n    }\n\n    getListDistricts();\n  }, [province]);\n  return {\n    districts,\n    loadingDistrict\n  };\n};\n\n_s2(useDistricts, \"yAEtaJ+YQsqirPGx2EzZGEy5fpI=\");\n\nconst useWards = ({\n  province,\n  district,\n  loading\n}) => {\n  _s3();\n\n  const [wards, setWards] = useState([]);\n  const [loadingWard, setLoadingWard] = useState(loading || false);\n  useEffect(() => {\n    async function getListWard() {\n      if (!province || !district) {\n        setLoadingWard(false);\n        return;\n      }\n\n      setLoadingWard(true);\n\n      try {\n        const response = await locationApi.getWards({\n          provinceId: province,\n          districtId: district\n        });\n        setWards(response);\n      } catch (error) {\n        setWards([]);\n      } finally {\n        setLoadingWard(false);\n      }\n    }\n\n    getListWard();\n  }, [district, province]);\n  return {\n    wards,\n    loadingWard\n  };\n};\n\n_s3(useWards, \"G915gSpNY+f+rla89n82fRwdzlo=\");\n\nexport { useProvices, useDistricts, useWards };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/hook/useLocation.tsx"],"names":["useEffect","useState","locationApi","useProvices","provinces","setProvinces","loadingProvince","setLoadingProvince","getListProvinces","response","getProvinces","error","useDistricts","province","loading","districts","setDistricts","loadingDistrict","setLoadingDistrict","getListDistricts","getDistricts","useWards","district","wards","setWards","loadingWard","setLoadingWard","getListWard","getWards","provinceId","districtId"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,qBAAxB;;AA+BA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAa,EAAb,CAA1C;AACA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAU,IAAV,CAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeQ,gBAAf,GAAkC;AAC9B,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMP,WAAW,CAACQ,YAAZ,EAAvB;AAEAL,QAAAA,YAAY,CAACI,QAAD,CAAZ;AACH,OAJD,CAIE,OAAOE,KAAP,EAAc;AACZN,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACH,OAND,SAMU;AACNE,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH;AACJ;;AACDC,IAAAA,gBAAgB;AACnB,GAbQ,EAaN,EAbM,CAAT;AAeA,SAAO;AACHJ,IAAAA,SADG;AAEHE,IAAAA;AAFG,GAAP;AAIH,CAvBD;;GAAMH,W;;AAyBN,MAAMS,YAAY,GAAG,CAACC,QAAD,EAAoBC,OAApB,KAA0C;AAAA;;AAC3D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAa,EAAb,CAA1C;AAEA,QAAM,CAACgB,eAAD,EAAkBC,kBAAlB,IAAwCjB,QAAQ,CAAUa,OAAO,IAAI,KAArB,CAAtD;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAemB,gBAAf,GAAkC;AAC9B,UAAI,CAACN,QAAL,EAAe;AACXK,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACA;AACH;;AAEDA,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;;AAEA,UAAI;AACA,cAAMT,QAAQ,GAAG,MAAMP,WAAW,CAACkB,YAAZ,CAAyBP,QAAzB,CAAvB;AAEAG,QAAAA,YAAY,CAACP,QAAD,CAAZ;AACH,OAJD,CAIE,OAAOE,KAAP,EAAc;AACZK,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACH,OAND,SAMU;AACNE,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH;AACJ;;AAEDC,IAAAA,gBAAgB;AACnB,GArBQ,EAqBN,CAACN,QAAD,CArBM,CAAT;AAuBA,SAAO;AACHE,IAAAA,SADG;AAEHE,IAAAA;AAFG,GAAP;AAIH,CAhCD;;IAAML,Y;;AAkCN,MAAMS,QAAQ,GAAG,CAAC;AACdR,EAAAA,QADc;AAEdS,EAAAA,QAFc;AAGdR,EAAAA;AAHc,CAAD,KAQX;AAAA;;AACF,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM,CAACwB,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAUa,OAAO,IAAI,KAArB,CAA9C;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAe2B,WAAf,GAA6B;AACzB,UAAI,CAACd,QAAD,IAAa,CAACS,QAAlB,EAA4B;AACxBI,QAAAA,cAAc,CAAC,KAAD,CAAd;AACA;AACH;;AACDA,MAAAA,cAAc,CAAC,IAAD,CAAd;;AACA,UAAI;AACA,cAAMjB,QAAQ,GAAG,MAAMP,WAAW,CAAC0B,QAAZ,CAAqB;AACxCC,UAAAA,UAAU,EAAEhB,QAD4B;AAExCiB,UAAAA,UAAU,EAAER;AAF4B,SAArB,CAAvB;AAKAE,QAAAA,QAAQ,CAACf,QAAD,CAAR;AACH,OAPD,CAOE,OAAOE,KAAP,EAAc;AACZa,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,OATD,SASU;AACNE,QAAAA,cAAc,CAAC,KAAD,CAAd;AACH;AACJ;;AACDC,IAAAA,WAAW;AACd,GArBQ,EAqBN,CAACL,QAAD,EAAWT,QAAX,CArBM,CAAT;AAuBA,SAAO;AACHU,IAAAA,KADG;AAEHE,IAAAA;AAFG,GAAP;AAIH,CAvCD;;IAAMJ,Q;;AAyCN,SAASlB,WAAT,EAAsBS,YAAtB,EAAoCS,QAApC","sourcesContent":["import { useEffect, useState } from 'react';\nimport locationApi from '../api/location-api';\n\nexport interface Province {\n    code: string;\n    name: string;\n    name_with_type: string;\n    slug: string;\n    type: string;\n}\n\nexport interface District {\n    code: string;\n    name: string;\n    name_with_type: string;\n    parent_code: string;\n    path: string;\n    path_with_type: string;\n    slug: string;\n    type: string;\n}\nexport interface Ward {\n    code: string;\n    name: string;\n    name_with_type: string;\n    parent_code: string;\n    path: string;\n    path_with_type: string;\n    slug: string;\n    type: string;\n}\n\nconst useProvices = () => {\n    const [provinces, setProvinces] = useState<Province[]>([]);\n    const [loadingProvince, setLoadingProvince] = useState<boolean>(true);\n\n    useEffect(() => {\n        async function getListProvinces() {\n            try {\n                const response = await locationApi.getProvinces();\n\n                setProvinces(response);\n            } catch (error) {\n                setProvinces([]);\n            } finally {\n                setLoadingProvince(false);\n            }\n        }\n        getListProvinces();\n    }, []);\n\n    return {\n        provinces,\n        loadingProvince,\n    };\n};\n\nconst useDistricts = (province?: string, loading?: boolean) => {\n    const [districts, setDistricts] = useState<District[]>([]);\n\n    const [loadingDistrict, setLoadingDistrict] = useState<boolean>(loading || false);\n\n    useEffect(() => {\n        async function getListDistricts() {\n            if (!province) {\n                setLoadingDistrict(false);\n                return;\n            }\n\n            setLoadingDistrict(true);\n\n            try {\n                const response = await locationApi.getDistricts(province);\n\n                setDistricts(response);\n            } catch (error) {\n                setDistricts([]);\n            } finally {\n                setLoadingDistrict(false);\n            }\n        }\n\n        getListDistricts();\n    }, [province]);\n\n    return {\n        districts,\n        loadingDistrict,\n    };\n};\n\nconst useWards = ({\n    province,\n    district,\n    loading,\n}: {\n    province?: string;\n    district?: string;\n    loading?: boolean;\n}) => {\n    const [wards, setWards] = useState<Ward[]>([]);\n    const [loadingWard, setLoadingWard] = useState<boolean>(loading || false);\n\n    useEffect(() => {\n        async function getListWard() {\n            if (!province || !district) {\n                setLoadingWard(false);\n                return;\n            }\n            setLoadingWard(true);\n            try {\n                const response = await locationApi.getWards({\n                    provinceId: province,\n                    districtId: district,\n                });\n\n                setWards(response);\n            } catch (error) {\n                setWards([]);\n            } finally {\n                setLoadingWard(false);\n            }\n        }\n        getListWard();\n    }, [district, province]);\n\n    return {\n        wards,\n        loadingWard,\n    };\n};\n\nexport { useProvices, useDistricts, useWards };\n"]},"metadata":{},"sourceType":"module"}