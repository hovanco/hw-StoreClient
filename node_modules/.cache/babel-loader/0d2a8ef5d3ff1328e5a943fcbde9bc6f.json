{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/create-store/form-create-store.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Form, Input, message, Row, Select } from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\nimport { get, map } from 'lodash';\nimport * as queryString from 'querystring';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport storeApi from '../../api/store-api';\nimport { updateUserStorePreference } from '../../api/user-store-preference-api';\nimport { Loading } from '../../components';\nimport { disabledAutosuggestion, validChannel } from '../../helper';\nimport rules from '../../helper/rules';\nimport { useDistricts, useProvices, useWards } from '../../hook/useLocation';\nimport { SaleChannelId } from '../../models';\nimport types from '../../reducers/storeState/type';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  createStore,\n  updateStore\n} = storeApi;\nexport let ETypeForm;\n\n(function (ETypeForm) {\n  ETypeForm[\"NEW\"] = \"1\";\n  ETypeForm[\"EDIT\"] = \"2\";\n})(ETypeForm || (ETypeForm = {}));\n\nconst size = 'large';\nconst style = {\n  width: '100%'\n};\n\nconst FormCreateStore = ({\n  type = ETypeForm.NEW\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const store = useSelector(state => state.store.data);\n  const [form] = useForm();\n  const location = useLocation();\n  const [, forceUpdate] = useState({}); // const onFinishFailed = (errorInfo: ValidateErrorEntity) => {\n  //     console.log(\"Failed:\", errorInfo);\n  //     console.log(\"Fail roi ban oi\");\n  // };\n\n  const [progress, setProgress] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [province, setProvince] = useState(() => {\n    if (store) {\n      return store.province;\n    }\n\n    return undefined;\n  });\n  const [district, setDistrict] = useState(() => {\n    if (store) {\n      return store.district;\n    }\n\n    return undefined;\n  });\n  const {\n    loadingProvince,\n    provinces\n  } = useProvices();\n  const {\n    loadingDistrict,\n    districts\n  } = useDistricts(province, true);\n  const {\n    loadingWard,\n    wards\n  } = useWards({\n    province,\n    district,\n    loading: true\n  });\n\n  const onChangeProvince = value => {\n    setProvince(value);\n    setDistrict(undefined);\n    removeField('district');\n    removeField('ward');\n  };\n\n  const onChangeDistrict = value => {\n    setDistrict(value);\n    removeField('ward');\n  };\n\n  const removeField = field => {\n    form.setFieldsValue({\n      [field]: undefined\n    });\n  };\n\n  const createNewStore = async values => {\n    try {\n      if (localStorage.getItem('shortLiveToken') !== null) values.saleChannels = [SaleChannelId.FACEBOOK];\n      const querySearch = queryString.parse(location.search.replace('?', ''));\n      let data = values;\n\n      if (querySearch.saleChannel && validChannel(querySearch.saleChannel)) {\n        data = { ...values,\n          saleChannels: [querySearch.saleChannel]\n        };\n      }\n\n      const result = await createStore(data);\n      await updateUserStorePreference({\n        storeId: result._id,\n        hideNewUserGuide: false\n      });\n      dispatch({\n        type: types.SET_STORE,\n        payload: result\n      });\n    } catch (error) {\n      if (get(error, 'response.status') === 409) {\n        return message.error('Tên cửa hàng đã tồn tại. Vui lòng nhập tên khác');\n      }\n\n      return message.error('Lỗi tạo cửa hàng');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const editStore = async values => {\n    try {\n      const result = await updateStore(store._id, { ...values\n      });\n      dispatch({\n        type: types.SET_STORE,\n        payload: result\n      });\n    } catch (error) {\n      message.error('Lỗi chỉnh sửa cửa hàng');\n    } finally {\n      setLoading(false);\n    }\n  }; // const onFinish = (values: IDataCreateStore) => {\n  //     setLoading(true);\n  //     if (type === ETypeForm.NEW) {\n  //         createNewStore(values);\n  //     } else {\n  //         editStore(values);\n  //     }\n  //     form.resetFields();\n  // };\n\n\n  const onFinish = values => {\n    console.log(\"Success:\", values);\n    console.log(\"Ok roi ban nha\");\n    form.resetFields();\n  };\n\n  useEffect(() => {\n    if (!loadingDistrict && !loadingWard && type === ETypeForm.EDIT || type === ETypeForm.NEW) {\n      setProgress(false);\n    }\n  }, [loadingDistrict, loadingWard, type]);\n  useEffect(() => {\n    forceUpdate({});\n  }, []);\n\n  if (progress) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 320\n      },\n      children: /*#__PURE__*/_jsxDEV(Loading, {\n        full: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this);\n  } // const disabled = form.getFieldsError()\n  // .filter(({ errors }) => errors.length).length;\n\n\n  console.log(disabled);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    layout: \"vertical\" // initialValues={{\n    //     ...pick(store, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n    // }}\n    ,\n    form: form,\n    onFinish: onFinish,\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"name\",\n      label: \"T\\xEAn c\\u1EEDa h\\xE0ng\",\n      rules: [{\n        required: true,\n        message: 'Vui lòng nhập Tên cửa hàng'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        size: size,\n        placeholder: \"T\\xEAn c\\u1EEDa h\\xE0ng\",\n        autoFocus: true,\n        name: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"phoneNo\",\n      label: \"S\\u1ED1 \\u0111i\\u1EC7n tho\\u1EA1i\",\n      rules: [{\n        required: true,\n        message: 'Vui lòng nhập Số điện thoại'\n      }, {\n        validator: rules.validatePhone\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        style: style,\n        size: size,\n        placeholder: \"S\\u1ED1 \\u0111i\\u1EC7n tho\\u1EA1i c\\u1EEDa h\\xE0ng\",\n        name: \"phoneNo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 15,\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"province\",\n          label: \"T\\u1EC9nh/th\\xE0nh ph\\u1ED1\",\n          rules: [{\n            required: true,\n            message: 'Chọn tỉnh/thành phố'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            showSearch: true,\n            style: {\n              width: '100%'\n            },\n            optionFilterProp: \"children\",\n            onChange: onChangeProvince,\n            filterOption: (input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n            loading: loadingProvince,\n            onFocus: disabledAutosuggestion,\n            placeholder: \"Ch\\u1ECDn t\\u1EC9nh/th\\xE0nh ph\\u1ED1\",\n            children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n              value: '-1',\n              disabled: true,\n              children: \"Ch\\u1ECDn t\\u1EC9nh/th\\xE0nh ph\\u1ED1\"\n            }, '-1', false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 29\n            }, this), map(provinces, province => /*#__PURE__*/_jsxDEV(Select.Option, {\n              value: province.code,\n              children: province.name\n            }, province.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"district\",\n          label: \"Qu\\u1EADn/huy\\u1EC7n\",\n          rules: [{\n            required: true,\n            message: 'Chọn quận/huyện'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            size: size,\n            placeholder: \"Ch\\u1ECDn qu\\u1EADn/huy\\u1EC7n\",\n            onChange: onChangeDistrict,\n            showSearch: true,\n            filterOption: (input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n            disabled: !province,\n            loading: loadingDistrict,\n            onFocus: disabledAutosuggestion,\n            children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n              value: '-1',\n              disabled: true,\n              children: \"Ch\\u1ECDn qu\\u1EADn/huy\\u1EC7n\"\n            }, '-1', false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 29\n            }, this), map(districts, district => /*#__PURE__*/_jsxDEV(Select.Option, {\n              value: district.code,\n              children: district.name\n            }, district.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"ward\",\n          label: \"X\\xE3/ph\\u01B0\\u1EDDng\",\n          rules: [{\n            required: true,\n            message: 'Chọn xã/phường'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            size: size,\n            placeholder: \"Ch\\u1ECDn x\\xE3/ph\\u01B0\\u1EDDng\",\n            showSearch: true,\n            filterOption: (input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n            disabled: !district,\n            loading: loadingWard,\n            onFocus: disabledAutosuggestion,\n            children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n              value: '-1',\n              disabled: true,\n              children: \"Ch\\u1ECDn x\\xE3/ph\\u01B0\\u1EDDng\"\n            }, '-1', false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 29\n            }, this), map(wards, ward => {\n              return /*#__PURE__*/_jsxDEV(Select.Option, {\n                value: ward.code,\n                children: ward.name\n              }, ward.code, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 37\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"address\",\n      rules: [{\n        required: true,\n        message: 'Vui lòng nhập Địa chỉ'\n      }],\n      label: \"\\u0110\\u1ECBa ch\\u1EC9\",\n      children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n        autoComplete: \"off\",\n        placeholder: \"\\u0110i\\u1EC1n \\u0111\\u1ECBa ch\\u1EC9 c\\u1EEDa h\\xE0ng\",\n        rows: 3,\n        name: \"address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      shouldUpdate: true,\n      children: () => /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        size: size,\n        htmlType: \"submit\",\n        block: true,\n        disabled: !form.isFieldsTouched(true) || !!form.getFieldsError().filter(({\n          errors\n        }) => errors.length).length,\n        children: type === ETypeForm.EDIT ? 'Chỉnh sửa cửa hàng' : 'Tạo cửa hàng'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormCreateStore, \"sbVNKzmHEumEUtajqozgyqVx7QM=\", false, function () {\n  return [useDispatch, useSelector, useForm, useLocation, useProvices, useDistricts, useWards];\n});\n\n_c = FormCreateStore;\nexport default FormCreateStore; // ////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n///////////////////////////////////////////////////\n// import { Button, Col, Form, Input, message, Row, Select } from 'antd';\n// import { useForm } from 'antd/lib/form/Form';\n// import { get, map, pick } from 'lodash';\n// import * as queryString from 'querystring';\n// import React, { FC, useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { useLocation } from 'react-router-dom';\n// import storeApi, { IDataCreateStore } from '../../api/store-api';\n// import { updateUserStorePreference } from '../../api/user-store-preference-api';\n// import { Loading } from '../../components';\n// import { disabledAutosuggestion, validChannel } from '../../helper';\n// import rules from '../../helper/rules';\n// import { useDistricts, useProvices, useWards } from '../../hook/useLocation';\n// import { SaleChannelId } from '../../models';\n// import types from '../../reducers/storeState/type';\n// import { IState } from '../../store/rootReducer';\n// import { District, Province, Ward } from './interface';\n// import { ValidateErrorEntity } from \"rc-field-form/es/interface\";\n// const { createStore, updateStore } = storeApi;\n// export enum ETypeForm {\n//     NEW = '1',\n//     EDIT = '2',\n// }\n// interface Props {\n//     type?: ETypeForm;\n// }\n// const size = 'large';\n// const style = { width: '100%' };\n// const FormCreateStore: FC<Props> = ({ type = ETypeForm.NEW }) => {\n//     const dispatch = useDispatch();\n//     const store = useSelector((state: IState) => state.store.data);\n//     const [form] = useForm();\n//     const location = useLocation();\n//     const [progress, setProgress] = useState<boolean>(true);\n//     const [loading, setLoading] = useState<boolean>(false);\n//     const [province, setProvince] = useState<string | undefined>(() => {\n//         if (store) {\n//             return store.province as string;\n//         }\n//         return undefined;\n//     });\n//     const [district, setDistrict] = useState<string | undefined>(() => {\n//         if (store) {\n//             return store.district as string;\n//         }\n//         return undefined;\n//     });\n//     const { loadingProvince, provinces } = useProvices();\n//     const { loadingDistrict, districts } = useDistricts(province, true);\n//     const { loadingWard, wards } = useWards({ province, district, loading: true });\n//     const onFinish2 = (values: ETypeForm) => {\n//         console.log(\"Success:\", values);\n//         console.log(\"Type phoneNo:\", typeof (values));\n//         console.log(\"Ok roi ban nha\");\n//         // setDisabled();\n//     };\n//     const onFinishFailed = (errorInfo: ValidateErrorEntity) => {\n//         console.log(\"Failed:\", errorInfo);\n//         console.log(\"Fail roi ban oi\");\n//         // setDisabled(true);\n//     };\n//     const onChangeProvince = (value: string) => {\n//         setProvince(value);\n//         setDistrict(undefined)\n//         removeField('district');\n//         removeField('ward')\n//     };\n//     const onChangeDistrict = (value: string) => {\n//         setDistrict(value);\n//         removeField('ward');\n//     };\n//     const removeField = (field: string) => {\n//         form.setFieldsValue({\n//             [field]: undefined,\n//         });\n//     };\n//     const createNewStore = async (values: IDataCreateStore) => {\n//         try {\n//             if (localStorage.getItem('shortLiveToken') !== null)\n//                 values.saleChannels = [SaleChannelId.FACEBOOK];\n//             const querySearch: {\n//                 saleChannel?: SaleChannelId;\n//             } = queryString.parse(location.search.replace('?', ''));\n//             let data = values;\n//             if (querySearch.saleChannel && validChannel(querySearch.saleChannel)) {\n//                 data = {\n//                     ...values,\n//                     saleChannels: [querySearch.saleChannel],\n//                 };\n//             }\n//             const result = await createStore(data);\n//             await updateUserStorePreference({\n//                 storeId: result._id,\n//                 hideNewUserGuide: false,\n//             });\n//             dispatch({\n//                 type: types.SET_STORE,\n//                 payload: result,\n//             });\n//         } catch (error) {\n//             if (get(error, 'response.status') === 409) {\n//                 return message.error('Tên cửa hàng đã tồn tại. Vui lòng nhập tên khác');\n//             }\n//             return message.error('Lỗi tạo cửa hàng');\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n//     const editStore = async (values: IDataCreateStore) => {\n//         try {\n//             const result = await updateStore(store._id as string, {\n//                 ...values,\n//             });\n//             dispatch({\n//                 type: types.SET_STORE,\n//                 payload: result,\n//             });\n//         } catch (error) {\n//             message.error('Lỗi chỉnh sửa cửa hàng');\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n//     const onFinish = (values: IDataCreateStore) => {\n//         setLoading(true);\n//         if (type === ETypeForm.NEW) {\n//             createNewStore(values);\n//         } else {\n//             editStore(values);\n//         }\n//     };\n//     useEffect(() => {\n//         if (\n//             (!loadingDistrict && !loadingWard && type === ETypeForm.EDIT) ||\n//             type === ETypeForm.NEW\n//         ) {\n//             setProgress(false);\n//         }\n//     }, [loadingDistrict, loadingWard, type]);\n//     if (progress) {\n//         return (\n//             <div style={{ height: 320 }}>\n//                 <Loading full />\n//             </div>\n//         );\n//     }\n//     return (\n//         <Form\n//             layout=\"vertical\"\n//             form={form}\n//             onFinish={onFinish2}\n//             initialValues={{\n//                 ...pick(store, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n//             }}\n//         >\n//             <Form.Item\n//                 name=\"name\"\n//                 label=\"Tên cửa hàng\"\n//                 rules={[{ required: true, message: 'Vui lòng nhập Tên cửa hàng' }]}\n//             >\n//                 <Input size={size} placeholder=\"Tên cửa hàng\" autoFocus />\n//             </Form.Item>\n//             <Form.Item\n//                 name=\"phoneNo\"\n//                 label=\"Số điện thoại\"\n//                 rules={[\n//                     { required: true, message: 'Vui lòng nhập Số điện thoại' },\n//                     {\n//                         validator: rules.validatePhone,\n//                     },\n//                 ]}\n//             >\n//                 <Input style={style} size={size} placeholder=\"Số điện thoại cửa hàng\" />\n//             </Form.Item>\n//             <Row gutter={15}>\n//                 <Col md={8}>\n//                     <Form.Item\n//                         name=\"province\"\n//                         label=\"Tỉnh/thành phố\"\n//                         rules={[\n//                             {\n//                                 required: true,\n//                                 message: 'Chọn tỉnh/thành phố',\n//                             },\n//                         ]}\n//                     >\n//                         <Select\n//                             showSearch\n//                             style={{ width: '100%' }}\n//                             optionFilterProp=\"children\"\n//                             onChange={onChangeProvince}\n//                             filterOption={(input: string, option: any) =>\n//                                 option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n//                             }\n//                             loading={loadingProvince}\n//                             onFocus={disabledAutosuggestion}\n//                             placeholder=\"Chọn tỉnh/thành phố\"\n//                         >\n//                             <Select.Option value={'-1'} key={'-1'} disabled>\n//                                 Chọn tỉnh/thành phố\n//                             </Select.Option>\n//                             {map(provinces, (province: Province) => (\n//                                 <Select.Option value={province.code} key={province.code}>\n//                                     {province.name}\n//                                 </Select.Option>\n//                             ))}\n//                         </Select>\n//                     </Form.Item>\n//                 </Col>\n//                 <Col md={8}>\n//                     <Form.Item\n//                         name=\"district\"\n//                         label=\"Quận/huyện\"\n//                         rules={[{ required: true, message: 'Chọn quận/huyện' }]}\n//                     >\n//                         <Select\n//                             size={size}\n//                             placeholder=\"Chọn quận/huyện\"\n//                             onChange={onChangeDistrict}\n//                             showSearch\n//                             filterOption={(input, option: any) =>\n//                                 option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n//                             }\n//                             disabled={!province}\n//                             loading={loadingDistrict}\n//                             onFocus={disabledAutosuggestion}\n//                         >\n//                             <Select.Option value={'-1'} key={'-1'} disabled>\n//                                 Chọn quận/huyện\n//                             </Select.Option>\n//                             {map(districts, (district: District) => (\n//                                 <Select.Option value={district.code} key={district.code}>\n//                                     {district.name}\n//                                 </Select.Option>\n//                             ))}\n//                         </Select>\n//                     </Form.Item>\n//                 </Col>\n//                 <Col md={8}>\n//                     <Form.Item\n//                         name=\"ward\"\n//                         label=\"Xã/phường\"\n//                         rules={[{ required: true, message: 'Chọn xã/phường' }]}\n//                     >\n//                         <Select\n//                             size={size}\n//                             placeholder=\"Chọn xã/phường\"\n//                             showSearch\n//                             filterOption={(input, option: any) =>\n//                                 option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n//                             }\n//                             disabled={!district}\n//                             loading={loadingWard}\n//                             onFocus={disabledAutosuggestion}\n//                         >\n//                             <Select.Option value={'-1'} key={'-1'} disabled>\n//                                 Chọn xã/phường\n//                             </Select.Option>\n//                             {map(wards, (ward: Ward) => {\n//                                 return (\n//                                     <Select.Option value={ward.code} key={ward.code}>\n//                                         {ward.name}\n//                                     </Select.Option>\n//                                 );\n//                             })}\n//                         </Select>\n//                     </Form.Item>\n//                 </Col>\n//             </Row>\n//             <Form.Item\n//                 name=\"address\"\n//                 rules={[{ required: true, message: 'Vui lòng nhập Địa chỉ' }]}\n//                 label=\"Địa chỉ\"\n//             >\n//                 <Input.TextArea\n//                     autoComplete=\"off\"\n//                     placeholder=\"Điền địa chỉ cửa hàng\"\n//                     rows={3}\n//                 ></Input.TextArea>\n//             </Form.Item>\n//             <Form.Item>\n//                 <Button type=\"primary\" size={size} htmlType=\"submit\" block loading={loading}>\n//                     {type === ETypeForm.EDIT ? 'Chỉnh sửa cửa hàng' : 'Tạo cửa hàng'}\n//                 </Button>\n//             </Form.Item>\n//         </Form>\n//     );\n// };\n// export default FormCreateStore;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormCreateStore\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/create-store/form-create-store.tsx"],"names":["Button","Col","Form","Input","message","Row","Select","useForm","get","map","queryString","React","useEffect","useState","useDispatch","useSelector","useLocation","storeApi","updateUserStorePreference","Loading","disabledAutosuggestion","validChannel","rules","useDistricts","useProvices","useWards","SaleChannelId","types","createStore","updateStore","ETypeForm","size","style","width","FormCreateStore","type","NEW","dispatch","store","state","data","form","location","forceUpdate","progress","setProgress","loading","setLoading","province","setProvince","undefined","district","setDistrict","loadingProvince","provinces","loadingDistrict","districts","loadingWard","wards","onChangeProvince","value","removeField","onChangeDistrict","field","setFieldsValue","createNewStore","values","localStorage","getItem","saleChannels","FACEBOOK","querySearch","parse","search","replace","saleChannel","result","storeId","_id","hideNewUserGuide","SET_STORE","payload","error","editStore","onFinish","console","log","resetFields","EDIT","height","disabled","required","validator","validatePhone","input","option","children","toLowerCase","indexOf","code","name","ward","isFieldsTouched","getFieldsError","filter","errors","length"],"mappings":"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;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { Button, Col, Form, Input, message, Row, Select } from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\nimport { get, map, pick } from 'lodash';\nimport * as queryString from 'querystring';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { setFlagsFromString } from 'v8';\nimport storeApi, { IDataCreateStore } from '../../api/store-api';\nimport { updateUserStorePreference } from '../../api/user-store-preference-api';\nimport { Loading } from '../../components';\nimport { disabledAutosuggestion, validChannel } from '../../helper';\nimport rules from '../../helper/rules';\nimport { useDistricts, useProvices, useWards } from '../../hook/useLocation';\nimport { SaleChannelId } from '../../models';\nimport types from '../../reducers/storeState/type';\nimport { IState } from '../../store/rootReducer';\nimport { District, Province, Ward } from './interface';\n\nconst { createStore, updateStore } = storeApi;\n\nexport enum ETypeForm {\n    NEW = '1',\n    EDIT = '2',\n}\ninterface Props {\n    type?: ETypeForm;\n}\n\nconst size = 'large';\nconst style = { width: '100%' };\n\nconst FormCreateStore: FC<Props> = ({ type = ETypeForm.NEW }) => {\n    const dispatch = useDispatch();\n    const store = useSelector((state: IState) => state.store.data);\n    const [form] = useForm();\n    const location = useLocation();\n    const [, forceUpdate] = useState({});\n\n    // const onFinishFailed = (errorInfo: ValidateErrorEntity) => {\n    //     console.log(\"Failed:\", errorInfo);\n    //     console.log(\"Fail roi ban oi\");\n    // };\n\n    const [progress, setProgress] = useState<boolean>(true);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [province, setProvince] = useState<string | undefined>(() => {\n        if (store) {\n            return store.province as string;\n        }\n        return undefined;\n    });\n    const [district, setDistrict] = useState<string | undefined>(() => {\n        if (store) {\n            return store.district as string;\n        }\n        return undefined;\n    });\n\n    const { loadingProvince, provinces } = useProvices();\n    const { loadingDistrict, districts } = useDistricts(province, true);\n    const { loadingWard, wards } = useWards({ province, district, loading: true });\n\n    const onChangeProvince = (value: string) => {\n        setProvince(value);\n        setDistrict(undefined)\n        removeField('district');\n        removeField('ward')\n    };\n\n    const onChangeDistrict = (value: string) => {\n        setDistrict(value);\n\n        removeField('ward');\n    };\n\n    const removeField = (field: string) => {\n        form.setFieldsValue({\n            [field]: undefined,\n        });\n    };\n\n    const createNewStore = async (values: IDataCreateStore) => {\n        try {\n            if (localStorage.getItem('shortLiveToken') !== null)\n                values.saleChannels = [SaleChannelId.FACEBOOK];\n\n            const querySearch: {\n                saleChannel?: SaleChannelId;\n            } = queryString.parse(location.search.replace('?', ''));\n\n            let data = values;\n\n            if (querySearch.saleChannel && validChannel(querySearch.saleChannel)) {\n                data = {\n                    ...values,\n                    saleChannels: [querySearch.saleChannel],\n                };\n            }\n\n            const result = await createStore(data);\n\n            await updateUserStorePreference({\n                storeId: result._id,\n                hideNewUserGuide: false,\n            });\n\n            dispatch({\n                type: types.SET_STORE,\n                payload: result,\n            });\n        } catch (error) {\n            if (get(error, 'response.status') === 409) {\n                return message.error('Tên cửa hàng đã tồn tại. Vui lòng nhập tên khác');\n            }\n            return message.error('Lỗi tạo cửa hàng');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const editStore = async (values: IDataCreateStore) => {\n        try {\n            const result = await updateStore(store._id as string, {\n                ...values,\n            });\n\n            dispatch({\n                type: types.SET_STORE,\n                payload: result,\n            });\n        } catch (error) {\n            message.error('Lỗi chỉnh sửa cửa hàng');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // const onFinish = (values: IDataCreateStore) => {\n    //     setLoading(true);\n    //     if (type === ETypeForm.NEW) {\n    //         createNewStore(values);\n    //     } else {\n    //         editStore(values);\n    //     }\n    //     form.resetFields();\n    // };\n\n    const onFinish = (values: ETypeForm) => {\n        console.log(\"Success:\", values);\n        console.log(\"Ok roi ban nha\");\n        form.resetFields();\n    };\n\n    useEffect(() => {\n        if (\n            (!loadingDistrict && !loadingWard && type === ETypeForm.EDIT) ||\n            type === ETypeForm.NEW\n        ) {\n            setProgress(false);\n        }\n    }, [loadingDistrict, loadingWard, type]);\n\n    useEffect(() => {\n        forceUpdate({});\n    }, []);\n\n    if (progress) {\n        return (\n            <div style={{ height: 320 }}>\n                <Loading full />\n            </div>\n        );\n    }\n\n    // const disabled = form.getFieldsError()\n    // .filter(({ errors }) => errors.length).length;\n\n    console.log(disabled);\n    \n\n    return (\n        <Form\n            layout=\"vertical\"\n            // initialValues={{\n            //     ...pick(store, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n            // }}\n            form={form}\n            onFinish={onFinish}\n        >\n            <Form.Item\n                name=\"name\"\n                label=\"Tên cửa hàng\"\n                rules={[{ required: true, message: 'Vui lòng nhập Tên cửa hàng' }]}\n            >\n                <Input\n                    size={size}\n                    placeholder=\"Tên cửa hàng\"\n                    autoFocus\n\n                    name=\"name\"\n                />\n            </Form.Item>\n\n            <Form.Item\n                name=\"phoneNo\"\n                label=\"Số điện thoại\"\n                rules={[\n                    { required: true, message: 'Vui lòng nhập Số điện thoại' },\n                    {\n                        validator: rules.validatePhone,\n                    },\n                ]}\n            >\n                <Input\n                    style={style}\n                    size={size}\n                    placeholder=\"Số điện thoại cửa hàng\"\n                    name=\"phoneNo\"\n                />\n            </Form.Item>\n\n            <Row gutter={15}>\n                <Col md={8}>\n                    <Form.Item\n                        name=\"province\"\n                        label=\"Tỉnh/thành phố\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Chọn tỉnh/thành phố',\n                            },\n                        ]}\n                    >\n                        <Select\n                            showSearch\n                            style={{ width: '100%' }}\n                            optionFilterProp=\"children\"\n                            onChange={onChangeProvince}\n                            filterOption={(input: string, option: any) =>\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                            }\n                            loading={loadingProvince}\n                            onFocus={disabledAutosuggestion}\n                            placeholder=\"Chọn tỉnh/thành phố\"\n                        >\n                            <Select.Option value={'-1'} key={'-1'} disabled>\n                                Chọn tỉnh/thành phố\n                            </Select.Option>\n\n                            {map(provinces, (province: Province) => (\n                                <Select.Option value={province.code} key={province.code}>\n                                    {province.name}\n                                </Select.Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                </Col>\n\n                <Col md={8}>\n                    <Form.Item\n                        name=\"district\"\n                        label=\"Quận/huyện\"\n                        rules={[{ required: true, message: 'Chọn quận/huyện' }]}\n\n\n                    >\n                        <Select\n                            size={size}\n                            placeholder=\"Chọn quận/huyện\"\n                            onChange={onChangeDistrict}\n                            showSearch\n                            filterOption={(input, option: any) =>\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                            }\n                            disabled={!province}\n                            loading={loadingDistrict}\n                            onFocus={disabledAutosuggestion}\n                        >\n                            <Select.Option value={'-1'} key={'-1'} disabled>\n                                Chọn quận/huyện\n                            </Select.Option>\n                            {map(districts, (district: District) => (\n                                <Select.Option value={district.code} key={district.code}>\n                                    {district.name}\n                                </Select.Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                </Col>\n\n                <Col md={8}>\n                    <Form.Item\n                        name=\"ward\"\n                        label=\"Xã/phường\"\n                        rules={[{ required: true, message: 'Chọn xã/phường' }]}\n                    >\n                        <Select\n                            size={size}\n                            placeholder=\"Chọn xã/phường\"\n                            showSearch\n                            filterOption={(input, option: any) =>\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                            }\n                            disabled={!district}\n                            loading={loadingWard}\n                            onFocus={disabledAutosuggestion}\n                        >\n                            <Select.Option value={'-1'} key={'-1'} disabled>\n                                Chọn xã/phường\n                            </Select.Option>\n                            {map(wards, (ward: Ward) => {\n                                return (\n                                    <Select.Option value={ward.code} key={ward.code}>\n                                        {ward.name}\n                                    </Select.Option>\n                                );\n                            })}\n                        </Select>\n                    </Form.Item>\n                </Col>\n            </Row>\n\n            <Form.Item\n                name=\"address\"\n                rules={[{ required: true, message: 'Vui lòng nhập Địa chỉ' }]}\n                label=\"Địa chỉ\"\n            >\n                <Input.TextArea\n                    autoComplete=\"off\"\n                    placeholder=\"Điền địa chỉ cửa hàng\"\n                    rows={3}\n\n                    name=\"address\"\n                ></Input.TextArea>\n            </Form.Item>\n\n            <Form.Item shouldUpdate>\n                {() => (\n                    <Button\n                        type=\"primary\"\n                        size={size}\n                        htmlType=\"submit\"\n                        block\n                        disabled={\n                            !form.isFieldsTouched(true) ||\n                            !!form.getFieldsError().filter(({ errors }) => errors.length).length\n                        }\n                    >\n                        {type === ETypeForm.EDIT ? 'Chỉnh sửa cửa hàng' : 'Tạo cửa hàng'}\n                    </Button>\n                )} \n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default FormCreateStore;\n\n\n\n\n// ////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n///////////////////////////////////////////////////\n// import { Button, Col, Form, Input, message, Row, Select } from 'antd';\n// import { useForm } from 'antd/lib/form/Form';\n// import { get, map, pick } from 'lodash';\n// import * as queryString from 'querystring';\n// import React, { FC, useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { useLocation } from 'react-router-dom';\n// import storeApi, { IDataCreateStore } from '../../api/store-api';\n// import { updateUserStorePreference } from '../../api/user-store-preference-api';\n// import { Loading } from '../../components';\n// import { disabledAutosuggestion, validChannel } from '../../helper';\n// import rules from '../../helper/rules';\n// import { useDistricts, useProvices, useWards } from '../../hook/useLocation';\n// import { SaleChannelId } from '../../models';\n// import types from '../../reducers/storeState/type';\n// import { IState } from '../../store/rootReducer';\n// import { District, Province, Ward } from './interface';\n\n// import { ValidateErrorEntity } from \"rc-field-form/es/interface\";\n\n\n// const { createStore, updateStore } = storeApi;\n\n// export enum ETypeForm {\n//     NEW = '1',\n//     EDIT = '2',\n// }\n// interface Props {\n//     type?: ETypeForm;\n// }\n\n// const size = 'large';\n// const style = { width: '100%' };\n\n// const FormCreateStore: FC<Props> = ({ type = ETypeForm.NEW }) => {\n//     const dispatch = useDispatch();\n//     const store = useSelector((state: IState) => state.store.data);\n//     const [form] = useForm();\n//     const location = useLocation();\n\n//     const [progress, setProgress] = useState<boolean>(true);\n//     const [loading, setLoading] = useState<boolean>(false);\n//     const [province, setProvince] = useState<string | undefined>(() => {\n//         if (store) {\n//             return store.province as string;\n//         }\n//         return undefined;\n//     });\n//     const [district, setDistrict] = useState<string | undefined>(() => {\n//         if (store) {\n//             return store.district as string;\n//         }\n//         return undefined;\n//     });\n\n//     const { loadingProvince, provinces } = useProvices();\n//     const { loadingDistrict, districts } = useDistricts(province, true);\n//     const { loadingWard, wards } = useWards({ province, district, loading: true });\n\n\n\n\n\n//     const onFinish2 = (values: ETypeForm) => {\n//         console.log(\"Success:\", values);\n//         console.log(\"Type phoneNo:\", typeof (values));\n//         console.log(\"Ok roi ban nha\");\n//         // setDisabled();\n//     };\n\n//     const onFinishFailed = (errorInfo: ValidateErrorEntity) => {\n//         console.log(\"Failed:\", errorInfo);\n//         console.log(\"Fail roi ban oi\");\n//         // setDisabled(true);\n//     };\n\n\n\n\n\n\n\n\n//     const onChangeProvince = (value: string) => {\n//         setProvince(value);\n//         setDistrict(undefined)\n//         removeField('district');\n//         removeField('ward')\n//     };\n\n//     const onChangeDistrict = (value: string) => {\n//         setDistrict(value);\n\n//         removeField('ward');\n//     };\n\n//     const removeField = (field: string) => {\n//         form.setFieldsValue({\n//             [field]: undefined,\n//         });\n//     };\n\n//     const createNewStore = async (values: IDataCreateStore) => {\n//         try {\n//             if (localStorage.getItem('shortLiveToken') !== null)\n//                 values.saleChannels = [SaleChannelId.FACEBOOK];\n\n//             const querySearch: {\n//                 saleChannel?: SaleChannelId;\n//             } = queryString.parse(location.search.replace('?', ''));\n\n//             let data = values;\n\n//             if (querySearch.saleChannel && validChannel(querySearch.saleChannel)) {\n//                 data = {\n//                     ...values,\n//                     saleChannels: [querySearch.saleChannel],\n//                 };\n//             }\n\n//             const result = await createStore(data);\n\n//             await updateUserStorePreference({\n//                 storeId: result._id,\n//                 hideNewUserGuide: false,\n//             });\n\n//             dispatch({\n//                 type: types.SET_STORE,\n//                 payload: result,\n//             });\n//         } catch (error) {\n//             if (get(error, 'response.status') === 409) {\n//                 return message.error('Tên cửa hàng đã tồn tại. Vui lòng nhập tên khác');\n//             }\n//             return message.error('Lỗi tạo cửa hàng');\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const editStore = async (values: IDataCreateStore) => {\n//         try {\n//             const result = await updateStore(store._id as string, {\n//                 ...values,\n//             });\n\n//             dispatch({\n//                 type: types.SET_STORE,\n//                 payload: result,\n//             });\n//         } catch (error) {\n//             message.error('Lỗi chỉnh sửa cửa hàng');\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const onFinish = (values: IDataCreateStore) => {\n//         setLoading(true);\n//         if (type === ETypeForm.NEW) {\n//             createNewStore(values);\n//         } else {\n//             editStore(values);\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (\n//             (!loadingDistrict && !loadingWard && type === ETypeForm.EDIT) ||\n//             type === ETypeForm.NEW\n//         ) {\n//             setProgress(false);\n//         }\n//     }, [loadingDistrict, loadingWard, type]);\n\n//     if (progress) {\n//         return (\n//             <div style={{ height: 320 }}>\n//                 <Loading full />\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <Form\n//             layout=\"vertical\"\n//             form={form}\n//             onFinish={onFinish2}\n//             initialValues={{\n//                 ...pick(store, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n//             }}\n//         >\n//             <Form.Item\n//                 name=\"name\"\n//                 label=\"Tên cửa hàng\"\n//                 rules={[{ required: true, message: 'Vui lòng nhập Tên cửa hàng' }]}\n//             >\n//                 <Input size={size} placeholder=\"Tên cửa hàng\" autoFocus />\n//             </Form.Item>\n\n//             <Form.Item\n//                 name=\"phoneNo\"\n//                 label=\"Số điện thoại\"\n//                 rules={[\n//                     { required: true, message: 'Vui lòng nhập Số điện thoại' },\n//                     {\n//                         validator: rules.validatePhone,\n//                     },\n//                 ]}\n//             >\n//                 <Input style={style} size={size} placeholder=\"Số điện thoại cửa hàng\" />\n//             </Form.Item>\n\n//             <Row gutter={15}>\n//                 <Col md={8}>\n//                     <Form.Item\n//                         name=\"province\"\n//                         label=\"Tỉnh/thành phố\"\n//                         rules={[\n//                             {\n//                                 required: true,\n//                                 message: 'Chọn tỉnh/thành phố',\n//                             },\n//                         ]}\n//                     >\n//                         <Select\n//                             showSearch\n//                             style={{ width: '100%' }}\n//                             optionFilterProp=\"children\"\n//                             onChange={onChangeProvince}\n//                             filterOption={(input: string, option: any) =>\n//                                 option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n//                             }\n//                             loading={loadingProvince}\n//                             onFocus={disabledAutosuggestion}\n//                             placeholder=\"Chọn tỉnh/thành phố\"\n//                         >\n//                             <Select.Option value={'-1'} key={'-1'} disabled>\n//                                 Chọn tỉnh/thành phố\n//                             </Select.Option>\n\n//                             {map(provinces, (province: Province) => (\n//                                 <Select.Option value={province.code} key={province.code}>\n//                                     {province.name}\n//                                 </Select.Option>\n//                             ))}\n//                         </Select>\n//                     </Form.Item>\n//                 </Col>\n\n//                 <Col md={8}>\n//                     <Form.Item\n//                         name=\"district\"\n//                         label=\"Quận/huyện\"\n//                         rules={[{ required: true, message: 'Chọn quận/huyện' }]}\n//                     >\n//                         <Select\n//                             size={size}\n//                             placeholder=\"Chọn quận/huyện\"\n//                             onChange={onChangeDistrict}\n//                             showSearch\n//                             filterOption={(input, option: any) =>\n//                                 option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n//                             }\n//                             disabled={!province}\n//                             loading={loadingDistrict}\n//                             onFocus={disabledAutosuggestion}\n//                         >\n//                             <Select.Option value={'-1'} key={'-1'} disabled>\n//                                 Chọn quận/huyện\n//                             </Select.Option>\n//                             {map(districts, (district: District) => (\n//                                 <Select.Option value={district.code} key={district.code}>\n//                                     {district.name}\n//                                 </Select.Option>\n//                             ))}\n//                         </Select>\n//                     </Form.Item>\n//                 </Col>\n\n//                 <Col md={8}>\n//                     <Form.Item\n//                         name=\"ward\"\n//                         label=\"Xã/phường\"\n//                         rules={[{ required: true, message: 'Chọn xã/phường' }]}\n//                     >\n//                         <Select\n//                             size={size}\n//                             placeholder=\"Chọn xã/phường\"\n//                             showSearch\n//                             filterOption={(input, option: any) =>\n//                                 option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n//                             }\n//                             disabled={!district}\n//                             loading={loadingWard}\n//                             onFocus={disabledAutosuggestion}\n//                         >\n//                             <Select.Option value={'-1'} key={'-1'} disabled>\n//                                 Chọn xã/phường\n//                             </Select.Option>\n//                             {map(wards, (ward: Ward) => {\n//                                 return (\n//                                     <Select.Option value={ward.code} key={ward.code}>\n//                                         {ward.name}\n//                                     </Select.Option>\n//                                 );\n//                             })}\n//                         </Select>\n//                     </Form.Item>\n//                 </Col>\n//             </Row>\n\n//             <Form.Item\n//                 name=\"address\"\n//                 rules={[{ required: true, message: 'Vui lòng nhập Địa chỉ' }]}\n//                 label=\"Địa chỉ\"\n//             >\n//                 <Input.TextArea\n//                     autoComplete=\"off\"\n//                     placeholder=\"Điền địa chỉ cửa hàng\"\n//                     rows={3}\n//                 ></Input.TextArea>\n//             </Form.Item>\n\n//             <Form.Item>\n//                 <Button type=\"primary\" size={size} htmlType=\"submit\" block loading={loading}>\n//                     {type === ETypeForm.EDIT ? 'Chỉnh sửa cửa hàng' : 'Tạo cửa hàng'}\n//                 </Button>\n//             </Form.Item>\n//         </Form>\n//     );\n// };\n\n// export default FormCreateStore;"]},"metadata":{},"sourceType":"module"}