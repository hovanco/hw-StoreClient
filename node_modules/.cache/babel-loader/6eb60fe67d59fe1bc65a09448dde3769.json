{"ast":null,"code":"import axios from './axios-client';\nconst basePath = '/store/v1/stores';\nexport default {\n  getOrder: async ({\n    id,\n    page,\n    limit,\n    status,\n    search,\n    source,\n    serviceId,\n    soft,\n    direction,\n    customerId,\n    transportStatus,\n    deliveryDate,\n    startTime,\n    endTime\n  }) => {\n    const response = await axios({\n      method: 'GET',\n      url: `${basePath}/${id}/orders`,\n      params: {\n        page,\n        limit,\n        status,\n        search,\n        source,\n        serviceId,\n        soft,\n        direction,\n        transportStatus,\n        customerId,\n        deliveryDate,\n        startTime,\n        endTime\n      }\n    });\n    return response.data;\n  },\n  createOrder: async ({\n    storeId,\n    data\n  }) => {\n    const response = await axios({\n      method: 'POST',\n      url: `${basePath}/${storeId}/orders`,\n      data\n    });\n    return response.data;\n  },\n  getOrderDetail: async ({\n    storeId,\n    orderId\n  }) => {\n    const response = await axios({\n      method: 'GET',\n      url: `${basePath}/${storeId}/orders/${orderId}`\n    });\n    return response.data;\n  },\n  updateOrder: async ({\n    storeId,\n    orderId,\n    data\n  }) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/orders/${orderId}`,\n      data\n    });\n    return response.data;\n  },\n  removeOrder: async ({\n    storeId,\n    orderId\n  }) => {\n    const response = await axios({\n      method: 'DELETE',\n      url: `${basePath}/${storeId}/orders/${orderId}`\n    });\n    return response.data;\n  },\n  confirmPaymentOrder: async ({\n    storeId,\n    orderId\n  }) => {\n    const response = await axios({\n      method: 'POST',\n      url: `${basePath}/${storeId}/orders/${orderId}/confirm-payment`,\n      data: {}\n    });\n    return response.data;\n  },\n  getDeliveryStatus: async ({\n    storeId,\n    warehouseId,\n    startTime,\n    endTime\n  }) => {\n    const response = await axios({\n      method: 'GET',\n      url: `${basePath}/${storeId}/orders/delivery-status`,\n      params: {\n        startTime,\n        endTime,\n        warehouseId\n      }\n    });\n    return response.data;\n  }\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/api/order-api.ts"],"names":["axios","basePath","getOrder","id","page","limit","status","search","source","serviceId","soft","direction","customerId","transportStatus","deliveryDate","startTime","endTime","response","method","url","params","data","createOrder","storeId","getOrderDetail","orderId","updateOrder","removeOrder","confirmPaymentOrder","getDeliveryStatus","warehouseId"],"mappings":"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","sourcesContent":["import axios from './axios-client';\nimport { IOrder, IGetOrderParams, ICreateOrderData } from '../models';\n\nconst basePath = '/store/v1/stores';\n\nexport default {\n    getOrder: async ({\n        id,\n        page,\n        limit,\n        status,\n        search,\n        source,\n        serviceId,\n        soft,\n        direction,\n        customerId,\n        transportStatus,\n        deliveryDate,\n        startTime,\n        endTime,\n    }: IGetOrderParams): Promise<{\n        data: IOrder[];\n        total: number;\n    }> => {\n        const response = await axios({\n            method: 'GET',\n            url: `${basePath}/${id}/orders`,\n            params: {\n                page,\n                limit,\n                status,\n                search,\n                source,\n                serviceId,\n                soft,\n                direction,\n                transportStatus,\n                customerId,\n                deliveryDate,\n                startTime,\n                endTime,\n            },\n        });\n\n        return response.data;\n    },\n\n    createOrder: async ({\n        storeId,\n        data,\n    }: {\n        storeId: string;\n        data: ICreateOrderData;\n    }): Promise<any> => {\n        const response = await axios({\n            method: 'POST',\n            url: `${basePath}/${storeId}/orders`,\n            data,\n        });\n\n        return response.data;\n    },\n\n    getOrderDetail: async ({\n        storeId,\n        orderId,\n    }: {\n        storeId: string;\n        orderId: string;\n    }): Promise<any> => {\n        const response = await axios({\n            method: 'GET',\n            url: `${basePath}/${storeId}/orders/${orderId}`,\n        });\n\n        return response.data;\n    },\n\n    updateOrder: async ({\n        storeId,\n        orderId,\n        data,\n    }: {\n        storeId: string;\n        orderId: string;\n        data: any;\n    }): Promise<any> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/orders/${orderId}`,\n            data,\n        });\n\n        return response.data;\n    },\n\n    removeOrder: async ({\n        storeId,\n        orderId,\n    }: {\n        storeId: string;\n        orderId: string;\n    }): Promise<any> => {\n        const response = await axios({\n            method: 'DELETE',\n            url: `${basePath}/${storeId}/orders/${orderId}`,\n        });\n\n        return response.data;\n    },\n\n    confirmPaymentOrder: async ({\n        storeId,\n        orderId,\n    }: {\n        storeId: string;\n        orderId: string;\n    }): Promise<any> => {\n        const response = await axios({\n            method: 'POST',\n            url: `${basePath}/${storeId}/orders/${orderId}/confirm-payment`,\n            data: {},\n        });\n\n        return response.data;\n    },\n\n    getDeliveryStatus: async ({\n        storeId,\n        warehouseId,\n        startTime,\n        endTime,\n    }: {\n        storeId: string;\n        warehouseId?: string;\n        startTime: number;\n        endTime: number;\n    }): Promise<any> => {\n        const response = await axios({\n            method: 'GET',\n            url: `${basePath}/${storeId}/orders/delivery-status`,\n            params: {\n                startTime,\n                endTime,\n                warehouseId,\n            },\n        });\n\n        return response.data;\n    },\n};\n"]},"metadata":{},"sourceType":"module"}