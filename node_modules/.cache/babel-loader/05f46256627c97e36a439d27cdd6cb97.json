{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { InventoryContext } from '../context';\nimport { useSelector } from 'react-redux';\nexport const useWarehouses = () => {\n  _s();\n\n  const {\n    warehouses: warehousesArr\n  } = useSelector(state => state.store);\n  const {\n    warehouses,\n    setWarehouses\n  } = useContext(InventoryContext);\n\n  const selectWarehouses = selectedIds => {\n    let newWarehouses = warehousesArr.filter(item => selectedIds.includes(item._id));\n    setWarehouses(newWarehouses);\n  };\n\n  return {\n    warehouses,\n    setWarehouses,\n    selectWarehouses\n  };\n};\n\n_s(useWarehouses, \"Pa0MaO6wIJ3bCqZpOw/80Mvya3M=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/variant-detail/inventory-quantity/hooks/warehouses.ts"],"names":["useContext","InventoryContext","useSelector","useWarehouses","warehouses","warehousesArr","state","store","setWarehouses","selectWarehouses","selectedIds","newWarehouses","filter","item","includes","_id"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAKA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC/B,QAAM;AAAEC,IAAAA,UAAU,EAAEC;AAAd,MAAgCH,WAAW,CAAEI,KAAD,IAAmBA,KAAK,CAACC,KAA1B,CAAjD;AACA,QAAM;AAAEH,IAAAA,UAAF;AAAcI,IAAAA;AAAd,MAAgCR,UAAU,CAACC,gBAAD,CAAhD;;AAEA,QAAMQ,gBAAgB,GAAIC,WAAD,IAA2B;AAChD,QAAIC,aAAa,GAAGN,aAAa,CAACO,MAAd,CAAsBC,IAAD,IACrCH,WAAW,CAACI,QAAZ,CAAqBD,IAAI,CAACE,GAA1B,CADgB,CAApB;AAIAP,IAAAA,aAAa,CAACG,aAAD,CAAb;AACH,GAND;;AAQA,SAAO;AACHP,IAAAA,UADG;AAEHI,IAAAA,aAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH,CAjBM;;GAAMN,a;UAC6BD,W","sourcesContent":["import { useContext } from 'react';\nimport { InventoryContext } from '../context';\nimport { useSelector } from 'react-redux';\n\nimport { IState } from '../../../../../store/rootReducer';\nimport { IWarehouse } from '../../../../../models';\n\nexport const useWarehouses = () => {\n    const { warehouses: warehousesArr } = useSelector((state: IState) => state.store);\n    const { warehouses, setWarehouses } = useContext(InventoryContext);\n\n    const selectWarehouses = (selectedIds: string[]) => {\n        let newWarehouses = warehousesArr.filter((item: IWarehouse) =>\n            selectedIds.includes(item._id as string)\n        );\n\n        setWarehouses(newWarehouses);\n    };\n\n    return {\n        warehouses,\n        setWarehouses,\n        selectWarehouses,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}