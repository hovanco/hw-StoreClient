{"ast":null,"code":"import axios from './axios-client';\nconst basePath = '/store/v1/stores';\nexport default {\n  getProducts: async ({\n    storeId,\n    page,\n    limit,\n    categoryId,\n    search,\n    sort,\n    direction,\n    withQuantity,\n    variant,\n    warehouseId\n  }) => {\n    const response = await axios({\n      method: 'GET',\n      url: `${basePath}/${storeId}/products`,\n      params: {\n        page,\n        limit,\n        categoryId,\n        search,\n        sort,\n        direction,\n        withQuantity,\n        warehouseId,\n        variant,\n        createdAt: 'desc'\n      }\n    });\n    return response.data;\n  },\n  getProduct: async ({\n    storeId,\n    productId\n  }) => {\n    const url = `${basePath}/${storeId}/products/${productId}`;\n    const response = await axios({\n      method: 'GET',\n      url\n    });\n    return response.data;\n  },\n  updateProduct: async (storeId, productId, form) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}`,\n      data: form\n    });\n    return response.data;\n  },\n  deleteProduct: async (storeId, productId) => {\n    const response = await axios({\n      method: 'DELETE',\n      url: `${basePath}/${storeId}/products/${productId}`\n    });\n    return response.data;\n  },\n  createProduct: async (storeId, form) => {\n    const response = await axios({\n      method: 'POST',\n      url: `${basePath}/${storeId}/products`,\n      data: form\n    });\n    return response.data;\n  },\n  getAttributes: async storeId => {\n    const response = await axios({\n      method: 'GET',\n      url: `${basePath}/${storeId}/attributes`\n    });\n    return response.data;\n  },\n  createAttribute: async (storeId, attribute) => {\n    const response = await axios({\n      method: 'POST',\n      url: `${basePath}/${storeId}/attributes`,\n      data: attribute\n    });\n    return response.data;\n  },\n  editVariant: async (storeId, productId, productVariantId, variant) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}/product-variants/${productVariantId}`,\n      data: variant\n    });\n    return response.data;\n  },\n  addAttributeProductVariants: async (storeId, productId, attributes) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}/attributes/add`,\n      data: {\n        attributes\n      }\n    });\n    return response.data;\n  },\n  deleteVariant: async (storeId, productId, productVariantId) => {\n    const response = await axios({\n      method: 'DELETE',\n      url: `${basePath}/${storeId}/products/${productId}/product-variants/${productVariantId}`\n    });\n    return response.data;\n  },\n  replaceAttributeByNewOne: async (storeId, productId, attributes) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}/attributes/replace`,\n      data: {\n        attributes\n      }\n    });\n    return response.data;\n  },\n  changeOrderAttributesAndTags: async (storeId, productId, attributes) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}/attributes/sort`,\n      data: {\n        attributes\n      }\n    });\n    return response.data;\n  },\n  createVariant: async (storeId, productId, variant) => {\n    const response = await axios({\n      method: 'POST',\n      url: `${basePath}/${storeId}/products/${productId}/product-variants`,\n      data: variant\n    });\n    return response.data;\n  },\n  updateVariant: async (storeId, productId, variantId, variant) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}/product-variants/${variantId}`,\n      data: variant\n    });\n    return response.data;\n  }\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/api/product-api.ts"],"names":["axios","basePath","getProducts","storeId","page","limit","categoryId","search","sort","direction","withQuantity","variant","warehouseId","response","method","url","params","createdAt","data","getProduct","productId","updateProduct","form","deleteProduct","createProduct","getAttributes","createAttribute","attribute","editVariant","productVariantId","addAttributeProductVariants","attributes","deleteVariant","replaceAttributeByNewOne","changeOrderAttributesAndTags","createVariant","updateVariant","variantId"],"mappings":"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","sourcesContent":["import axios from './axios-client';\nimport { IProduct, IAttribute, IVariant } from '../models';\n\nconst basePath = '/store/v1/stores';\n\nexport default {\n    getProducts: async ({\n        storeId,\n        page,\n        limit,\n        categoryId,\n        search,\n        sort,\n        direction,\n        withQuantity,\n        variant,\n        warehouseId,\n    }: {\n        storeId: string;\n        page: number;\n        limit: number;\n        categoryId?: string;\n        search?: string;\n        sort?: string;\n        direction?: string;\n        withQuantity?: boolean;\n        variant?: boolean;\n        warehouseId?: string;\n    }): Promise<{\n        data: IProduct[];\n        total: number;\n    }> => {\n        const response = await axios({\n            method: 'GET',\n            url: `${basePath}/${storeId}/products`,\n            params: {\n                page,\n                limit,\n                categoryId,\n                search,\n                sort,\n                direction,\n                withQuantity,\n                warehouseId,\n                variant,\n                createdAt: 'desc',\n            },\n        });\n\n        return response.data;\n    },\n\n    getProduct: async ({\n        storeId,\n        productId,\n    }: {\n        storeId: string;\n        productId: string;\n    }): Promise<IProduct> => {\n        const url = `${basePath}/${storeId}/products/${productId}`;\n\n        const response = await axios({\n            method: 'GET',\n            url,\n        });\n\n        return response.data;\n    },\n\n    updateProduct: async (storeId: string, productId: string, form: any): Promise<IProduct> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}`,\n            data: form,\n        });\n\n        return response.data;\n    },\n\n    deleteProduct: async (storeId: string, productId: string): Promise<any> => {\n        const response = await axios({\n            method: 'DELETE',\n            url: `${basePath}/${storeId}/products/${productId}`,\n        });\n\n        return response.data;\n    },\n\n    createProduct: async (storeId: string, form: IProduct): Promise<IProduct> => {\n        const response = await axios({\n            method: 'POST',\n            url: `${basePath}/${storeId}/products`,\n            data: form,\n        });\n\n        return response.data;\n    },\n\n    getAttributes: async (storeId: string): Promise<IAttribute[]> => {\n        const response = await axios({\n            method: 'GET',\n            url: `${basePath}/${storeId}/attributes`,\n        });\n\n        return response.data;\n    },\n\n    createAttribute: async (storeId: string, attribute: IAttribute): Promise<any> => {\n        const response = await axios({\n            method: 'POST',\n            url: `${basePath}/${storeId}/attributes`,\n            data: attribute,\n        });\n\n        return response.data;\n    },\n\n    editVariant: async (\n        storeId: string,\n        productId: string,\n        productVariantId: string,\n        variant: any\n    ): Promise<IVariant> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}/product-variants/${productVariantId}`,\n            data: variant,\n        });\n\n        return response.data;\n    },\n\n    addAttributeProductVariants: async (\n        storeId: string,\n        productId: string,\n        attributes: any[]\n    ): Promise<{ success: boolean }> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}/attributes/add`,\n            data: { attributes },\n        });\n\n        return response.data;\n    },\n\n    deleteVariant: async (\n        storeId: string,\n        productId: string,\n        productVariantId: string\n    ): Promise<number> => {\n        const response = await axios({\n            method: 'DELETE',\n            url: `${basePath}/${storeId}/products/${productId}/product-variants/${productVariantId}`,\n        });\n\n        return response.data;\n    },\n\n    replaceAttributeByNewOne: async (\n        storeId: string,\n        productId: string,\n        attributes: any[]\n    ): Promise<{ success: boolean }> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}/attributes/replace`,\n            data: { attributes },\n        });\n\n        return response.data;\n    },\n\n    changeOrderAttributesAndTags: async (\n        storeId: string,\n        productId: string,\n        attributes: any[]\n    ): Promise<{ success: boolean }> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}/attributes/sort`,\n            data: { attributes },\n        });\n\n        return response.data;\n    },\n\n    createVariant: async (\n        storeId: string,\n        productId: string,\n        variant: IVariant\n    ): Promise<IVariant> => {\n        const response = await axios({\n            method: 'POST',\n            url: `${basePath}/${storeId}/products/${productId}/product-variants`,\n            data: variant,\n        });\n\n        return response.data;\n    },\n\n    updateVariant: async (\n        storeId: string,\n        productId: string,\n        variantId: string,\n        variant: IVariant\n    ): Promise<IVariant> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}/product-variants/${variantId}`,\n            data: variant,\n        });\n\n        return response.data;\n    },\n};\n"]},"metadata":{},"sourceType":"module"}