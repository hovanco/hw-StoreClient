{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/homepage/state/report/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useMemo, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport reducerReport, { initialStateReport } from './reducer';\nimport types from './types';\nimport { getReportData } from './util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  state: initialStateReport,\n  dispatch: () => null\n};\nconst ContextReport = /*#__PURE__*/createContext(initialContext);\n\nconst ProviderContextReport = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducerReport, initialStateReport);\n  const value = useMemo(() => ({\n    state,\n    dispatch\n  }), [state]);\n  return /*#__PURE__*/_jsxDEV(ContextReport.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProviderContextReport, \"o5id5BtgCi50Y3Zjzq/qV+ISj3E=\");\n\n_c = ProviderContextReport;\n\nconst useReport = () => {\n  _s2();\n\n  const store = useSelector(state => state.store.data);\n  const value = useContext(ContextReport);\n  const {\n    state,\n    dispatch\n  } = value;\n  const loadReport = useCallback(async ({\n    time\n  }) => {\n    dispatch({\n      type: types.LOAD_REPORT\n    });\n\n    if (store._id) {\n      try {\n        const {\n          counts,\n          revenues\n        } = await getReportData({\n          storeId: store._id,\n          time\n        });\n        return dispatch({\n          type: types.LOAD_REPORT_SUCCESS,\n          payload: {\n            counts,\n            revenues\n          }\n        });\n      } catch (error) {\n        return dispatch({\n          type: types.LOAD_REPORT_FAILED\n        });\n      }\n    }\n\n    return dispatch({\n      type: types.LOAD_REPORT_FAILED\n    });\n  }, [dispatch, store._id]);\n  const selectTypeTime = useCallback(type => {\n    dispatch({\n      type: types.SELECT_TYPE_TIME,\n      payload: type\n    });\n\n    if (store._id) {\n      loadReport({\n        time: {\n          value: state.time.value,\n          type\n        }\n      });\n    }\n  }, [dispatch, loadReport, state.time.value, store._id]);\n\n  const selectWareHouse = warehouseId => {\n    dispatch({\n      type: types.SELECT_WAREHOUSE,\n      payload: warehouseId\n    });\n\n    if (store._id) {\n      loadReport({\n        time: state.time\n      });\n    }\n  };\n\n  return { ...state,\n    loadReport,\n    selectTypeTime,\n    selectWareHouse\n  };\n};\n\n_s2(useReport, \"n878FpC3H01TBPdzeKDUHsyd46w=\", false, function () {\n  return [useSelector];\n});\n\nexport { ProviderContextReport, useReport };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderContextReport\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/homepage/state/report/context.tsx"],"names":["React","createContext","useCallback","useContext","useMemo","useReducer","useSelector","reducerReport","initialStateReport","types","getReportData","initialContext","state","dispatch","ContextReport","ProviderContextReport","children","value","useReport","store","data","loadReport","time","type","LOAD_REPORT","_id","counts","revenues","storeId","LOAD_REPORT_SUCCESS","payload","error","LOAD_REPORT_FAILED","selectTypeTime","SELECT_TYPE_TIME","selectWareHouse","warehouseId","SELECT_WAREHOUSE"],"mappings":"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","sourcesContent":["import React, {\n    createContext,\n    FC,\n    ReactNode,\n    useCallback,\n    useContext,\n    useMemo,\n    useReducer,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { ITypeTime } from '../../../../helper/get-time';\nimport { IState } from '../../../../store/rootReducer';\nimport { IContextReport, ITimeReport } from './interface';\nimport reducerReport, { initialStateReport } from './reducer';\nimport types from './types';\nimport { getReportData } from './util';\n\nconst initialContext = {\n    state: initialStateReport,\n    dispatch: () => null,\n};\n\nconst ContextReport = createContext<IContextReport>(initialContext);\n\ninterface Props {\n    children: ReactNode;\n}\n\nconst ProviderContextReport: FC<Props> = ({ children }) => {\n    const [state, dispatch] = useReducer(reducerReport, initialStateReport);\n\n    const value = useMemo(() => ({ state, dispatch }), [state]);\n\n    return <ContextReport.Provider value={value}>{children}</ContextReport.Provider>;\n};\n\nconst useReport = () => {\n    const store = useSelector((state: IState) => state.store.data);\n    const value = useContext(ContextReport);\n    const { state, dispatch } = value;\n\n    const loadReport = useCallback(\n        async ({ time }: { time: ITimeReport }) => {\n            dispatch({ type: types.LOAD_REPORT });\n            if (store._id) {\n                try {\n                    const { counts, revenues } = await getReportData({\n                        storeId: store._id,\n                        time,\n                    });\n\n                    return dispatch({\n                        type: types.LOAD_REPORT_SUCCESS,\n                        payload: {\n                            counts,\n                            revenues,\n                        },\n                    });\n                } catch (error) {\n                    return dispatch({\n                        type: types.LOAD_REPORT_FAILED,\n                    });\n                }\n            }\n\n            return dispatch({\n                type: types.LOAD_REPORT_FAILED,\n            });\n        },\n        [dispatch, store._id]\n    );\n\n    const selectTypeTime = useCallback(\n        (type: ITypeTime) => {\n            dispatch({\n                type: types.SELECT_TYPE_TIME,\n                payload: type,\n            });\n\n            if (store._id) {\n                loadReport({\n                    time: {\n                        value: state.time.value,\n                        type,\n                    },\n                });\n            }\n        },\n        [dispatch, loadReport, state.time.value, store._id]\n    );\n\n    const selectWareHouse = (warehouseId: string) => {\n        dispatch({\n            type: types.SELECT_WAREHOUSE,\n            payload: warehouseId,\n        });\n\n        if (store._id) {\n            loadReport({\n                time: state.time,\n            });\n        }\n    };\n\n    return {\n        ...state,\n        loadReport,\n        selectTypeTime,\n        selectWareHouse,\n    };\n};\n\nexport { ProviderContextReport, useReport };\n"]},"metadata":{},"sourceType":"module"}