{"ast":null,"code":"import { get, pick } from 'lodash';\nimport { EDeliveryDiscountBy } from '../../../../models/order';\n\nconst getMoneyProduct = products => products.reduce((value, product) => (product.price || 0) * product.count + value, 0);\n\nconst getValueDiscount = ({\n  products,\n  discount,\n  discountBy\n}) => {\n  if (!discount || discount === 0) return 0;\n  if (discountBy === EDeliveryDiscountBy.Money) return discount;\n  const money_product = getMoneyProduct(products);\n  return money_product * discount / 100;\n};\n\nconst getShipmentFeeForCustomer = ({\n  shipmentFeeForCustomer,\n  shipmentFee\n}) => {\n  if (shipmentFeeForCustomer && shipmentFeeForCustomer > 0) {\n    return shipmentFeeForCustomer;\n  }\n\n  return shipmentFee || 0;\n};\n\nconst getFeeForReceiver = ({\n  products,\n  discount,\n  discountBy,\n  shipmentFee,\n  shipmentFeeForCustomer\n}) => {\n  const money_product = getMoneyProduct(products);\n  const value_discount = getValueDiscount({\n    products,\n    discount,\n    discountBy\n  });\n  return Math.ceil(money_product + getShipmentFeeForCustomer({\n    shipmentFeeForCustomer,\n    shipmentFee\n  }) - value_discount);\n};\n\nconst getFeeForCustomer = order => {\n  const products = order.products.map(product => ({ ...product.productId,\n    ...pick(product, ['count', 'price'])\n  }));\n  const productPrice = getMoneyProduct(products);\n  const discountValue = getValueDiscount({\n    products,\n    discount: order.deliveryOptions.discount,\n    discountBy: order.deliveryOptions.discountBy\n  });\n  const shipmentFeeForCustomer = get(order, 'deliveryOptions.shipmentFeeForCustomer', 0);\n  const shipmentFee = get(order, 'deliveryOptions.shipmentFee', 0);\n  const totalPrice = productPrice + getShipmentFeeForCustomer({\n    shipmentFeeForCustomer,\n    shipmentFee\n  }) - discountValue;\n  return Math.ceil(totalPrice);\n};\n\nconst getMoneyForSender = ({\n  products,\n  discount,\n  discountBy,\n  shipmentFee,\n  shipmentFeeForCustomer\n}) => {\n  const money_product = getMoneyProduct(products);\n  const value_discount = getValueDiscount({\n    products,\n    discount,\n    discountBy\n  });\n  return Math.ceil(money_product + getShipmentFeeForCustomer({\n    shipmentFeeForCustomer,\n    shipmentFee\n  }) - value_discount - (shipmentFee || 0));\n};\n\nexport { getMoneyProduct, getValueDiscount, getShipmentFeeForCustomer, getFeeForReceiver, getFeeForCustomer, getMoneyForSender };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/order/create/ultil/index.ts"],"names":["get","pick","EDeliveryDiscountBy","getMoneyProduct","products","reduce","value","product","price","count","getValueDiscount","discount","discountBy","Money","money_product","getShipmentFeeForCustomer","shipmentFeeForCustomer","shipmentFee","getFeeForReceiver","value_discount","Math","ceil","getFeeForCustomer","order","map","productId","productPrice","discountValue","deliveryOptions","totalPrice","getMoneyForSender"],"mappings":"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","sourcesContent":["import { get, pick } from 'lodash';\nimport { EDeliveryDiscountBy, IOrder } from '../../../../models/order';\nimport { IProductState } from '../state/interface';\n\nconst getMoneyProduct = (products: IProductState[]): number =>\n    products.reduce(\n        (value: number, product) => (product.price as number || 0) * product.count + value,\n        0\n    );\n\nconst getValueDiscount = ({\n    products,\n    discount,\n    discountBy,\n}: {\n    products: IProductState[];\n    discount?: number;\n    discountBy?: EDeliveryDiscountBy;\n}): number => {\n    if (!discount || discount === 0) return 0;\n    if (discountBy === EDeliveryDiscountBy.Money) return discount;\n\n    const money_product = getMoneyProduct(products);\n\n    return (money_product * discount) / 100;\n};\n\nconst getShipmentFeeForCustomer = ({\n    shipmentFeeForCustomer,\n    shipmentFee,\n}: {\n    shipmentFeeForCustomer?: number;\n    shipmentFee?: number;\n}): number => {\n    if (shipmentFeeForCustomer && shipmentFeeForCustomer > 0) {\n        return shipmentFeeForCustomer;\n    }\n\n    return shipmentFee || 0;\n};\n\nconst getFeeForReceiver = ({\n    products,\n    discount,\n    discountBy,\n    shipmentFee,\n    shipmentFeeForCustomer,\n}: {\n    products: IProductState[];\n    discount?: number;\n    discountBy?: EDeliveryDiscountBy;\n    shipmentFee?: number;\n    shipmentFeeForCustomer?: number;\n}): number => {\n    const money_product = getMoneyProduct(products);\n    const value_discount = getValueDiscount({\n        products,\n        discount,\n        discountBy,\n    });\n    return Math.ceil(\n        money_product +\n        getShipmentFeeForCustomer({ shipmentFeeForCustomer, shipmentFee }) -\n        value_discount\n    );\n};\n\nconst getFeeForCustomer = (order: IOrder) => {\n    const products = order.products.map((product: any) => ({\n        ...product.productId,\n        ...pick(product, ['count', 'price']),\n    }));\n\n    const productPrice = getMoneyProduct(products);\n\n    const discountValue = getValueDiscount({\n        products,\n        discount: order.deliveryOptions.discount,\n        discountBy: order.deliveryOptions.discountBy,\n    });\n\n    const shipmentFeeForCustomer = get(order, 'deliveryOptions.shipmentFeeForCustomer', 0);\n    const shipmentFee = get(order, 'deliveryOptions.shipmentFee', 0);\n\n    const totalPrice = productPrice +\n        getShipmentFeeForCustomer({ shipmentFeeForCustomer, shipmentFee }) -\n        discountValue;\n\n    return Math.ceil(totalPrice);\n}\n\nconst getMoneyForSender = ({\n    products,\n    discount,\n    discountBy,\n    shipmentFee,\n    shipmentFeeForCustomer,\n}: {\n    products: IProductState[];\n    discount?: number;\n    discountBy?: EDeliveryDiscountBy;\n    shipmentFee?: number;\n    shipmentFeeForCustomer?: number;\n}): number => {\n    const money_product = getMoneyProduct(products);\n    const value_discount = getValueDiscount({\n        products,\n        discount,\n        discountBy,\n    });\n    return Math.ceil(\n        money_product +\n        getShipmentFeeForCustomer({ shipmentFeeForCustomer, shipmentFee }) -\n        value_discount -\n        (shipmentFee || 0)\n    );\n};\n\nexport {\n    getMoneyProduct,\n    getValueDiscount,\n    getShipmentFeeForCustomer,\n    getFeeForReceiver,\n    getFeeForCustomer,\n    getMoneyForSender\n};\n"]},"metadata":{},"sourceType":"module"}