{"ast":null,"code":"import { push } from 'connected-react-router';\nimport { loginApi } from '../../api';\nimport authApi from '../../api/auth-api';\nimport { getToken, removeToken } from '../../api/token';\nimport { getUserApi } from '../../api/user';\nimport types from './authTypes'; // load user\n\nconst loadingUser = () => ({\n  type: types.LOADING\n});\n\nexport const loadUserSuccess = payload => ({\n  type: types.LOAD_USER_SUCCESS,\n  payload\n});\nexport const getUserAction = () => async dispatch => {\n  try {\n    dispatch(loadingUser());\n    const res = await getUserApi();\n    dispatch(loadUserSuccess(res.data));\n  } catch (error) {\n    dispatch({\n      type: types.LOAD_USER_FAILED\n    });\n  }\n}; //login with email\n\nexport const loginActionWithEmail = payload => async dispatch => {\n  dispatch({\n    type: types.LOGIN_SUCCESSS,\n    payload\n  });\n  dispatch(push('/'));\n  dispatch(getUserAction());\n}; // login with service\n\nexport const loginActionWithService = (data, service) => async dispatch => {\n  try {\n    dispatch(loadingUser());\n    const res = await loginApi(data, service);\n    dispatch({\n      type: types.LOGIN_SUCCESSS,\n      payload: res.data\n    }); // load user\n\n    const res_user = await getUserApi();\n    dispatch(push('/'));\n    await dispatch(loadUserSuccess(res_user.data));\n  } catch (e) {\n    dispatch({\n      type: types.LOGIN_FAILED\n    });\n  }\n}; //logout\n\nexport const logout = value => async dispatch => {\n  try {\n    const refreshToken = getToken('refreshToken');\n\n    if (refreshToken) {\n      await authApi.logout(refreshToken);\n    }\n  } catch (error) {} finally {\n    removeToken();\n    dispatch({\n      type: types.LOGOUT,\n      payload: typeof value === 'boolean' ? value : true\n    });\n  }\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/reducers/authState/authAction.ts"],"names":["push","loginApi","authApi","getToken","removeToken","getUserApi","types","loadingUser","type","LOADING","loadUserSuccess","payload","LOAD_USER_SUCCESS","getUserAction","dispatch","res","data","error","LOAD_USER_FAILED","loginActionWithEmail","LOGIN_SUCCESSS","loginActionWithService","service","res_user","e","LOGIN_FAILED","logout","value","refreshToken","LOGOUT"],"mappings":"AAAA,SAASA,IAAT,QAAqB,wBAArB;AAEA,SAASC,QAAT,QAAkC,WAAlC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,iBAAtC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEF,KAAK,CAACG;AAAd,CAAP,CAApB;;AAEA,OAAO,MAAMC,eAAe,GAAIC,OAAD,KAAmB;AAC9CH,EAAAA,IAAI,EAAEF,KAAK,CAACM,iBADkC;AAE9CD,EAAAA;AAF8C,CAAnB,CAAxB;AAKP,OAAO,MAAME,aAAa,GAAG,MAAM,MAAOC,QAAP,IAAmC;AAClE,MAAI;AACAA,IAAAA,QAAQ,CAACP,WAAW,EAAZ,CAAR;AAEA,UAAMQ,GAAG,GAAG,MAAMV,UAAU,EAA5B;AAEAS,IAAAA,QAAQ,CAACJ,eAAe,CAACK,GAAG,CAACC,IAAL,CAAhB,CAAR;AACH,GAND,CAME,OAAOC,KAAP,EAAc;AACZH,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAEF,KAAK,CAACY;AADP,KAAD,CAAR;AAGH;AACJ,CAZM,C,CAcP;;AACA,OAAO,MAAMC,oBAAoB,GAAIR,OAAD,IAAkB,MAAOG,QAAP,IAAyB;AAC3EA,EAAAA,QAAQ,CAAC;AACLN,IAAAA,IAAI,EAAEF,KAAK,CAACc,cADP;AAELT,IAAAA;AAFK,GAAD,CAAR;AAKAG,EAAAA,QAAQ,CAACd,IAAI,CAAC,GAAD,CAAL,CAAR;AACAc,EAAAA,QAAQ,CAACD,aAAa,EAAd,CAAR;AACH,CARM,C,CAUP;;AACA,OAAO,MAAMQ,sBAAsB,GAAG,CAACL,IAAD,EAAgBM,OAAhB,KAAkC,MAAOR,QAAP,IAAyB;AAC7F,MAAI;AACAA,IAAAA,QAAQ,CAACP,WAAW,EAAZ,CAAR;AACA,UAAMQ,GAAG,GAAG,MAAMd,QAAQ,CAACe,IAAD,EAAOM,OAAP,CAA1B;AAEAR,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAEF,KAAK,CAACc,cADP;AAELT,MAAAA,OAAO,EAAEI,GAAG,CAACC;AAFR,KAAD,CAAR,CAJA,CASA;;AACA,UAAMO,QAAQ,GAAG,MAAMlB,UAAU,EAAjC;AACAS,IAAAA,QAAQ,CAACd,IAAI,CAAC,GAAD,CAAL,CAAR;AACA,UAAMc,QAAQ,CAACJ,eAAe,CAACa,QAAQ,CAACP,IAAV,CAAhB,CAAd;AACH,GAbD,CAaE,OAAOQ,CAAP,EAAU;AACRV,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAEF,KAAK,CAACmB;AADP,KAAD,CAAR;AAGH;AACJ,CAnBM,C,CAqBP;;AACA,OAAO,MAAMC,MAAM,GAAIC,KAAD,IAAqB,MAAOb,QAAP,IAAyB;AAChE,MAAI;AACA,UAAMc,YAAY,GAAGzB,QAAQ,CAAC,cAAD,CAA7B;;AAEA,QAAIyB,YAAJ,EAAkB;AACd,YAAM1B,OAAO,CAACwB,MAAR,CAAeE,YAAf,CAAN;AACH;AACJ,GAND,CAME,OAAOX,KAAP,EAAc,CACf,CAPD,SAOU;AACNb,IAAAA,WAAW;AAEXU,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAEF,KAAK,CAACuB,MADP;AAELlB,MAAAA,OAAO,EAAE,OAAOgB,KAAP,KAAiB,SAAjB,GAA6BA,KAA7B,GAAqC;AAFzC,KAAD,CAAR;AAIH;AACJ,CAhBM","sourcesContent":["import { push } from 'connected-react-router';\nimport { Dispatch } from 'redux';\nimport { loginApi, Payload } from '../../api';\nimport authApi from '../../api/auth-api';\nimport { getToken, removeToken } from '../../api/token';\nimport { getUserApi } from '../../api/user';\nimport types from './authTypes';\n\n// load user\nconst loadingUser = () => ({ type: types.LOADING });\n\nexport const loadUserSuccess = (payload: any) => ({\n    type: types.LOAD_USER_SUCCESS,\n    payload,\n});\n\nexport const getUserAction = () => async (dispatch: Dispatch<any>) => {\n    try {\n        dispatch(loadingUser());\n\n        const res = await getUserApi();\n\n        dispatch(loadUserSuccess(res.data));\n    } catch (error) {\n        dispatch({\n            type: types.LOAD_USER_FAILED,\n        });\n    }\n};\n\n//login with email\nexport const loginActionWithEmail = (payload: any) => async (dispatch: any) => {\n    dispatch({\n        type: types.LOGIN_SUCCESSS,\n        payload,\n    });\n\n    dispatch(push('/'));\n    dispatch(getUserAction());\n};\n\n// login with service\nexport const loginActionWithService = (data: Payload, service?: any) => async (dispatch: any) => {\n    try {\n        dispatch(loadingUser());\n        const res = await loginApi(data, service);\n\n        dispatch({\n            type: types.LOGIN_SUCCESSS,\n            payload: res.data,\n        });\n\n        // load user\n        const res_user = await getUserApi();\n        dispatch(push('/'));\n        await dispatch(loadUserSuccess(res_user.data));\n    } catch (e) {\n        dispatch({\n            type: types.LOGIN_FAILED,\n        });\n    }\n};\n\n//logout\nexport const logout = (value?: boolean) => async (dispatch: any) => {\n    try {\n        const refreshToken = getToken('refreshToken');\n\n        if (refreshToken) {\n            await authApi.logout(refreshToken);\n        }\n    } catch (error) {\n    } finally {\n        removeToken();\n\n        dispatch({\n            type: types.LOGOUT,\n            payload: typeof value === 'boolean' ? value : true,\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}