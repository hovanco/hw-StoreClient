{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext, useEffect } from 'react';\nimport { mongoObjectId } from '../../../helper';\nimport { generateVariantsByTags } from '../product-new/helper';\nimport types from './type';\nimport { findIndex } from 'lodash';\nimport { ProductContext } from './context';\n\nconst useVariant = () => {\n  _s();\n\n  const {\n    state,\n    dispatch,\n    form,\n    isCreateMode\n  } = useContext(ProductContext);\n  useEffect(() => {\n    if (isCreateMode === true) {\n      if (!state.attributes.length) setVariants([]);else {\n        let newVariantGenereted = generateVariants(state.attributes);\n        let variantsHavePrice = [...state.variants].filter(item => item.price && item.price > 0);\n        variantsHavePrice.forEach(item => {\n          let itemIdxWillMapPrice = findIndex(newVariantGenereted, o => {\n            let result = true;\n            item.localId.forEach(h => {\n              result = result && o.localId.includes(h);\n            });\n            return result;\n          });\n          if (itemIdxWillMapPrice !== -1) newVariantGenereted.splice(itemIdxWillMapPrice, 1, { ...newVariantGenereted[itemIdxWillMapPrice],\n            price: item.price,\n            wholesalePrice: item.wholesalePrice\n          });\n        });\n        setVariants(newVariantGenereted);\n      }\n    } // eslint-disable-next-line\n\n  }, [state.attributes, isCreateMode]);\n  const setVariants = useCallback(variants => {\n    dispatch({\n      type: types.SET_VARIANTS,\n      payload: variants\n    }); // eslint-disable-next-line\n  }, []);\n  const generateVariants = useCallback(attributeData => {\n    let attributeByTags = attributeData.map(attribute => {\n      return attribute.tags.map(tag => ({\n        _id: attribute._id,\n        name: attribute.name,\n        tags: [tag]\n      }));\n    });\n    let attributeByTagsMixed = generateVariantsByTags(attributeByTags) || [];\n    let newVariants = attributeByTagsMixed.filter(item => item.length).map(item => {\n      return {\n        _id: mongoObjectId(),\n        localId: getLocalIdByAttributes(item),\n        attributes: item,\n        sku: form.getFieldValue('sku'),\n        code: form.getFieldValue('code'),\n        name: form.getFieldValue('name'),\n        length: form.getFieldValue('length') || 0,\n        wholesalePrice: form.getFieldValue('wholesalePrice'),\n        originalPrice: form.getFieldValue('originalPrice'),\n        price: form.getFieldValue('wholesalePrice') || 0,\n        width: form.getFieldValue('width'),\n        height: form.getFieldValue('height'),\n        weight: form.getFieldValue('weight'),\n        images: form.getFieldValue('images')\n      };\n    });\n    return newVariants; // eslint-disable-next-line\n  }, []);\n  const getLocalIdByAttributes = useCallback(attributes => {\n    return attributes.map(item => {\n      return `${item._id}--${item.tags[0]}`;\n    }); // eslint-disable-next-line\n  }, []);\n  return {\n    variants: state.variants,\n    setVariants\n  };\n};\n\n_s(useVariant, \"zDb4/XgppTmyItV9DmdbISZTfgk=\");\n\nexport default useVariant;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/context/use-variant.ts"],"names":["useCallback","useContext","useEffect","mongoObjectId","generateVariantsByTags","types","findIndex","ProductContext","useVariant","state","dispatch","form","isCreateMode","attributes","length","setVariants","newVariantGenereted","generateVariants","variantsHavePrice","variants","filter","item","price","forEach","itemIdxWillMapPrice","o","result","localId","h","includes","splice","wholesalePrice","type","SET_VARIANTS","payload","attributeData","attributeByTags","map","attribute","tags","tag","_id","name","attributeByTagsMixed","newVariants","getLocalIdByAttributes","sku","getFieldValue","code","originalPrice","width","height","weight","images"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,QAAmD,OAAnD;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,sBAAT,QAAuC,uBAAvC;AAEA,OAAOC,KAAP,MAAkB,QAAlB;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,SAASC,cAAT,QAA+B,WAA/B;;AAGA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,IAAnB;AAAyBC,IAAAA;AAAzB,MAA0CX,UAAU,CAACM,cAAD,CAA1D;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,YAAY,KAAK,IAArB,EAA2B;AACvB,UAAI,CAACH,KAAK,CAACI,UAAN,CAAiBC,MAAtB,EAA8BC,WAAW,CAAC,EAAD,CAAX,CAA9B,KACK;AACD,YAAIC,mBAAmB,GAAGC,gBAAgB,CAACR,KAAK,CAACI,UAAP,CAA1C;AACA,YAAIK,iBAAiB,GAAG,CAAC,GAAGT,KAAK,CAACU,QAAV,EAAoBC,MAApB,CACnBC,IAAD,IAAoBA,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACC,KAAL,GAAa,CAD3B,CAAxB;AAIAJ,QAAAA,iBAAiB,CAACK,OAAlB,CAA2BF,IAAD,IAAe;AACrC,cAAIG,mBAAmB,GAAGlB,SAAS,CAACU,mBAAD,EAAuBS,CAAD,IAAY;AACjE,gBAAIC,MAAM,GAAG,IAAb;AACAL,YAAAA,IAAI,CAACM,OAAL,CAAaJ,OAAb,CAAsBK,CAAD,IAAY;AAC7BF,cAAAA,MAAM,GAAGA,MAAM,IAAID,CAAC,CAACE,OAAF,CAAUE,QAAV,CAAmBD,CAAnB,CAAnB;AACH,aAFD;AAGA,mBAAOF,MAAP;AACH,WANkC,CAAnC;AAQA,cAAIF,mBAAmB,KAAK,CAAC,CAA7B,EACIR,mBAAmB,CAACc,MAApB,CAA2BN,mBAA3B,EAAgD,CAAhD,EAAmD,EAC/C,GAAGR,mBAAmB,CAACQ,mBAAD,CADyB;AAE/CF,YAAAA,KAAK,EAAED,IAAI,CAACC,KAFmC;AAG/CS,YAAAA,cAAc,EAAEV,IAAI,CAACU;AAH0B,WAAnD;AAKP,SAfD;AAiBAhB,QAAAA,WAAW,CAACC,mBAAD,CAAX;AACH;AACJ,KA5BW,CA8BZ;;AACH,GA/BQ,EA+BN,CAACP,KAAK,CAACI,UAAP,EAAmBD,YAAnB,CA/BM,CAAT;AAiCA,QAAMG,WAAW,GAAGf,WAAW,CAAEmB,QAAD,IAA0B;AACtDT,IAAAA,QAAQ,CAAC;AACLsB,MAAAA,IAAI,EAAE3B,KAAK,CAAC4B,YADP;AAELC,MAAAA,OAAO,EAAEf;AAFJ,KAAD,CAAR,CADsD,CAMtD;AACH,GAP8B,EAO5B,EAP4B,CAA/B;AASA,QAAMF,gBAAgB,GAAGjB,WAAW,CAAEmC,aAAD,IAAiC;AAClE,QAAIC,eAA+B,GAAGD,aAAa,CAACE,GAAd,CAAmBC,SAAD,IAA2B;AAC/E,aAAOA,SAAS,CAACC,IAAV,CAAeF,GAAf,CAAoBG,GAAD,KAAkB;AACxCC,QAAAA,GAAG,EAAEH,SAAS,CAACG,GADyB;AAExCC,QAAAA,IAAI,EAAEJ,SAAS,CAACI,IAFwB;AAGxCH,QAAAA,IAAI,EAAE,CAACC,GAAD;AAHkC,OAAlB,CAAnB,CAAP;AAKH,KANqC,CAAtC;AAQA,QAAIG,oBAAoB,GAAGvC,sBAAsB,CAACgC,eAAD,CAAtB,IAA2C,EAAtE;AAEA,QAAIQ,WAAuB,GAAGD,oBAAoB,CAC7CvB,MADyB,CACjBC,IAAD,IAAwBA,IAAI,CAACP,MADX,EAEzBuB,GAFyB,CAEpBhB,IAAD,IAAwB;AACzB,aAAO;AACHoB,QAAAA,GAAG,EAAEtC,aAAa,EADf;AAEHwB,QAAAA,OAAO,EAAEkB,sBAAsB,CAACxB,IAAD,CAF5B;AAGHR,QAAAA,UAAU,EAAEQ,IAHT;AAIHyB,QAAAA,GAAG,EAAEnC,IAAI,CAACoC,aAAL,CAAmB,KAAnB,CAJF;AAKHC,QAAAA,IAAI,EAAErC,IAAI,CAACoC,aAAL,CAAmB,MAAnB,CALH;AAMHL,QAAAA,IAAI,EAAE/B,IAAI,CAACoC,aAAL,CAAmB,MAAnB,CANH;AAOHjC,QAAAA,MAAM,EAAEH,IAAI,CAACoC,aAAL,CAAmB,QAAnB,KAAgC,CAPrC;AAQHhB,QAAAA,cAAc,EAAEpB,IAAI,CAACoC,aAAL,CAAmB,gBAAnB,CARb;AASHE,QAAAA,aAAa,EAAEtC,IAAI,CAACoC,aAAL,CAAmB,eAAnB,CATZ;AAUHzB,QAAAA,KAAK,EAAEX,IAAI,CAACoC,aAAL,CAAmB,gBAAnB,KAAwC,CAV5C;AAWHG,QAAAA,KAAK,EAAEvC,IAAI,CAACoC,aAAL,CAAmB,OAAnB,CAXJ;AAYHI,QAAAA,MAAM,EAAExC,IAAI,CAACoC,aAAL,CAAmB,QAAnB,CAZL;AAaHK,QAAAA,MAAM,EAAEzC,IAAI,CAACoC,aAAL,CAAmB,QAAnB,CAbL;AAcHM,QAAAA,MAAM,EAAE1C,IAAI,CAACoC,aAAL,CAAmB,QAAnB;AAdL,OAAP;AAgBH,KAnByB,CAA9B;AAqBA,WAAOH,WAAP,CAhCkE,CAkClE;AACH,GAnCmC,EAmCjC,EAnCiC,CAApC;AAqCA,QAAMC,sBAAsB,GAAG7C,WAAW,CAAEa,UAAD,IAAoC;AAC3E,WAAOA,UAAU,CAACwB,GAAX,CAAgBhB,IAAD,IAA4B;AAC9C,aAAQ,GAAEA,IAAI,CAACoB,GAAI,KAAIpB,IAAI,CAACkB,IAAL,CAAU,CAAV,CAAa,EAApC;AACH,KAFM,CAAP,CAD2E,CAK3E;AACH,GANyC,EAMvC,EANuC,CAA1C;AAQA,SAAO;AACHpB,IAAAA,QAAQ,EAAEV,KAAK,CAACU,QADb;AAEHJ,IAAAA;AAFG,GAAP;AAIH,CA9FD;;GAAMP,U;;AAgGN,eAAeA,UAAf","sourcesContent":["import { useCallback, useContext, useEffect } from 'react';\n\nimport { mongoObjectId } from '../../../helper';\nimport { generateVariantsByTags } from '../product-new/helper';\nimport { IVariant, IAttribute } from '../../../models';\nimport types from './type';\nimport { findIndex } from 'lodash';\n\nimport { ProductContext } from './context';\nimport { IAttributeOption } from './interface';\n\nconst useVariant = () => {\n    const { state, dispatch, form, isCreateMode } = useContext(ProductContext);\n\n    useEffect(() => {\n        if (isCreateMode === true) {\n            if (!state.attributes.length) setVariants([]);\n            else {\n                let newVariantGenereted = generateVariants(state.attributes);\n                let variantsHavePrice = [...state.variants].filter(\n                    (item: IVariant) => item.price && item.price > 0\n                );\n\n                variantsHavePrice.forEach((item: any) => {\n                    let itemIdxWillMapPrice = findIndex(newVariantGenereted, (o: any) => {\n                        let result = true;\n                        item.localId.forEach((h: any) => {\n                            result = result && o.localId.includes(h);\n                        });\n                        return result;\n                    });\n\n                    if (itemIdxWillMapPrice !== -1)\n                        newVariantGenereted.splice(itemIdxWillMapPrice, 1, {\n                            ...newVariantGenereted[itemIdxWillMapPrice],\n                            price: item.price,\n                            wholesalePrice: item.wholesalePrice,\n                        });\n                });\n\n                setVariants(newVariantGenereted);\n            }\n        }\n\n        // eslint-disable-next-line\n    }, [state.attributes, isCreateMode]);\n\n    const setVariants = useCallback((variants: IVariant[]) => {\n        dispatch({\n            type: types.SET_VARIANTS,\n            payload: variants,\n        });\n\n        // eslint-disable-next-line\n    }, []);\n\n    const generateVariants = useCallback((attributeData: IAttribute[]) => {\n        let attributeByTags: IAttribute[][] = attributeData.map((attribute: IAttribute) => {\n            return attribute.tags.map((tag: string) => ({\n                _id: attribute._id,\n                name: attribute.name,\n                tags: [tag],\n            }));\n        });\n\n        let attributeByTagsMixed = generateVariantsByTags(attributeByTags) || [];\n\n        let newVariants: IVariant[] = attributeByTagsMixed\n            .filter((item: IAttribute[]) => item.length)\n            .map((item: IAttribute[]) => {\n                return {\n                    _id: mongoObjectId(),\n                    localId: getLocalIdByAttributes(item),\n                    attributes: item,\n                    sku: form.getFieldValue('sku'),\n                    code: form.getFieldValue('code'),\n                    name: form.getFieldValue('name'),\n                    length: form.getFieldValue('length') || 0,\n                    wholesalePrice: form.getFieldValue('wholesalePrice'),\n                    originalPrice: form.getFieldValue('originalPrice'),\n                    price: form.getFieldValue('wholesalePrice') || 0,\n                    width: form.getFieldValue('width'),\n                    height: form.getFieldValue('height'),\n                    weight: form.getFieldValue('weight'),\n                    images: form.getFieldValue('images'),\n                };\n            });\n\n        return newVariants;\n\n        // eslint-disable-next-line\n    }, []);\n\n    const getLocalIdByAttributes = useCallback((attributes: IAttributeOption[]) => {\n        return attributes.map((item: IAttributeOption) => {\n            return `${item._id}--${item.tags[0]}`;\n        });\n\n        // eslint-disable-next-line\n    }, []);\n\n    return {\n        variants: state.variants,\n        setVariants,\n    };\n};\n\nexport default useVariant;\n"]},"metadata":{},"sourceType":"module"}