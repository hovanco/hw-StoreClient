{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting/sale-channel/components/switch-channel/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Switch } from 'antd';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport storeApi from '../../../../../api/store-api';\nimport types from '../../../../../reducers/storeState/type';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SwitchChannel = ({\n  used,\n  idChannel\n}) => {\n  _s();\n\n  const store = useSelector(({\n    store\n  }) => store.data);\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n\n  const onChange = async value => {\n    if (store) {\n      try {\n        setLoading(true);\n        let newSaleChannels = store.saleChannels || [];\n        newSaleChannels = value ? [...newSaleChannels, idChannel] : newSaleChannels.filter(item => item !== idChannel);\n        const response = await storeApi.updateStore(store._id, {\n          saleChannels: newSaleChannels\n        });\n        dispatch({\n          type: types.SET_STORE,\n          payload: response\n        });\n      } catch (error) {} finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    checked: used,\n    onChange: onChange,\n    loading: loading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n};\n\n_s(SwitchChannel, \"Gn0igZq7A3PgJLxt7/bIj4pAJDY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SwitchChannel;\nexport default SwitchChannel;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwitchChannel\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting/sale-channel/components/switch-channel/index.tsx"],"names":["Switch","React","useState","useDispatch","useSelector","storeApi","types","SwitchChannel","used","idChannel","store","data","dispatch","loading","setLoading","onChange","value","newSaleChannels","saleChannels","filter","item","response","updateStore","_id","type","SET_STORE","payload","error"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,MAAvB;AACA,OAAOC,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,8BAArB;AAGA,OAAOC,KAAP,MAAkB,yCAAlB;;;AAOA,MAAMC,aAAwB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAyB;AAAA;;AACtD,QAAMC,KAAK,GAAGN,WAAW,CAAC,CAAC;AAAEM,IAAAA;AAAF,GAAD,KAAuCA,KAAK,CAACC,IAA9C,CAAzB;AACA,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAU,KAAV,CAAtC;;AACA,QAAMa,QAAQ,GAAG,MAAOC,KAAP,IAAsB;AACnC,QAAIN,KAAJ,EAAW;AACP,UAAI;AACAI,QAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAIG,eAAe,GAAGP,KAAK,CAACQ,YAAN,IAAsB,EAA5C;AAEAD,QAAAA,eAAe,GAAGD,KAAK,GACjB,CAAC,GAAGC,eAAJ,EAAqBR,SAArB,CADiB,GAEjBQ,eAAe,CAACE,MAAhB,CAAwBC,IAAD,IAAUA,IAAI,KAAKX,SAA1C,CAFN;AAIA,cAAMY,QAAQ,GAAG,MAAMhB,QAAQ,CAACiB,WAAT,CAAqBZ,KAAK,CAACa,GAA3B,EAA0C;AAC7DL,UAAAA,YAAY,EAAED;AAD+C,SAA1C,CAAvB;AAIAL,QAAAA,QAAQ,CAAC;AACLY,UAAAA,IAAI,EAAElB,KAAK,CAACmB,SADP;AAELC,UAAAA,OAAO,EAAEL;AAFJ,SAAD,CAAR;AAIH,OAjBD,CAiBE,OAAOM,KAAP,EAAc,CACf,CAlBD,SAkBU;AACNb,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ;AACJ,GAxBD;;AA0BA,sBAAO,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAEN,IAAjB;AAAuB,IAAA,QAAQ,EAAEO,QAAjC;AAA2C,IAAA,OAAO,EAAEF;AAApD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CA/BD;;GAAMN,a;UACYH,W,EACGD,W;;;KAFfI,a;AAiCN,eAAeA,aAAf","sourcesContent":["import { Switch } from 'antd';\nimport React, { FC, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport storeApi from '../../../../../api/store-api';\nimport { SaleChannelId } from '../../../../../models';\nimport { IStoreState } from '../../../../../reducers/storeState/reducer';\nimport types from '../../../../../reducers/storeState/type';\n\ninterface Props {\n    used: boolean;\n    idChannel: SaleChannelId;\n}\n\nconst SwitchChannel: FC<Props> = ({ used, idChannel }) => {\n    const store = useSelector(({ store }: { store: IStoreState }) => store.data);\n    const dispatch = useDispatch();\n    const [loading, setLoading] = useState<boolean>(false);\n    const onChange = async (value: any) => {\n        if (store) {\n            try {\n                setLoading(true);\n\n                let newSaleChannels = store.saleChannels || [];\n\n                newSaleChannels = value\n                    ? [...newSaleChannels, idChannel]\n                    : newSaleChannels.filter((item) => item !== idChannel);\n\n                const response = await storeApi.updateStore(store._id as string, {\n                    saleChannels: newSaleChannels,\n                });\n\n                dispatch({\n                    type: types.SET_STORE,\n                    payload: response,\n                });\n            } catch (error) {\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    return <Switch checked={used} onChange={onChange} loading={loading} />;\n};\n\nexport default SwitchChannel;\n"]},"metadata":{},"sourceType":"module"}