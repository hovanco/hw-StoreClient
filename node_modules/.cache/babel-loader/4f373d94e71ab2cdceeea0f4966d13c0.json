{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/product-new/product-form-properties/modal-update-variant-quantity/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { find } from 'lodash';\nimport { Modal, Divider, Space } from 'antd';\nimport { InsaButton, Loading } from '../../../../../components';\nimport useVariants from '../../../context/use-variant';\nimport useStocks from '../../../context/use-stock';\nimport './index.less';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TableUpdateVariantQuantity = /*#__PURE__*/React.lazy(_c = () => import('./table'));\n_c2 = TableUpdateVariantQuantity;\n\nconst ModalUpdateVariantQuantity = ({\n  visible,\n  toggle,\n  onUpdate,\n  loading = false\n}) => {\n  _s();\n\n  const {\n    variants\n  } = useVariants();\n  const {\n    stocks,\n    setStocks\n  } = useStocks();\n  const [localStocks, setLocalStocks] = useState([]);\n  const handleUpdateToContext = useCallback(() => {\n    let newStocks = [];\n    localStocks.forEach(item => {\n      let {\n        _id,\n        productId,\n        ...rest\n      } = item;\n      let localStockArr = Object.entries({ ...rest\n      }).map(([warehouseId, quantity]) => {\n        let stock = find(stocks, o => o.productId._id === _id && o.warehouseId === warehouseId);\n        if (!stock) return {\n          _id,\n          warehouseId,\n          productId,\n          quantity\n        };\n        return { ...stock,\n          quantity\n        };\n      });\n      newStocks = newStocks.concat(localStockArr);\n    });\n    setStocks(newStocks);\n    if (onUpdate) onUpdate(newStocks);else toggle(); // eslint-disable-next-line\n  }, [stocks, localStocks]);\n  const stockPipeToDataTable = useMemo(() => {\n    if (!variants) return [];\n    let newLocalStocks = variants.map(variant => {\n      let localStock = {\n        _id: variant._id,\n        productId: variant\n      };\n\n      if (stocks.length) {\n        let stockFilteredByProductId = stocks.filter(item => item.productId._id === variant._id);\n        localStock = stockFilteredByProductId.reduce((prevValue, currValue) => ({ ...prevValue,\n          [currValue.warehouseId]: currValue.quantity\n        }), localStock);\n      }\n\n      return localStock;\n    });\n    return newLocalStocks;\n  }, [variants, stocks]);\n  useMemo(() => {\n    setLocalStocks(stockPipeToDataTable); // eslint-disable-next-line\n  }, [stocks, variants]);\n\n  const handleCancel = () => {\n    setLocalStocks(stockPipeToDataTable);\n    toggle();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    visible: visible,\n    onCancel: handleCancel,\n    title: \"Thay \\u0111\\u1ED5i s\\u1ED1 l\\u01B0\\u1EE3ng bi\\u1EBFn th\\u1EC3\",\n    closable: false,\n    footer: null,\n    width: 800,\n    wrapClassName: \"modal-change-variant-quantity\",\n    children: [loading && /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(React.Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(Loading, {\n        full: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 39\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(TableUpdateVariantQuantity, {\n        localStocks: localStocks,\n        setLocalStocks: setLocalStocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Space, {\n        className: \"footer-btn\",\n        children: [/*#__PURE__*/_jsxDEV(InsaButton, {\n          onClick: handleCancel,\n          size: \"middle\",\n          loading: loading,\n          style: {\n            width: 120\n          },\n          children: \"Hu\\u1EF7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InsaButton, {\n          onClick: handleUpdateToContext,\n          loading: loading,\n          size: \"middle\",\n          type: \"primary\",\n          style: {\n            width: 120\n          },\n          children: \"C\\u1EADp nh\\u1EADt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModalUpdateVariantQuantity, \"/tgM5j93HaTKUkhm6bj9LHvVSwo=\", false, function () {\n  return [useVariants, useStocks];\n});\n\n_c3 = ModalUpdateVariantQuantity;\nexport default ModalUpdateVariantQuantity;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TableUpdateVariantQuantity$React.lazy\");\n$RefreshReg$(_c2, \"TableUpdateVariantQuantity\");\n$RefreshReg$(_c3, \"ModalUpdateVariantQuantity\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/product-new/product-form-properties/modal-update-variant-quantity/index.tsx"],"names":["React","useState","useMemo","useCallback","find","Modal","Divider","Space","InsaButton","Loading","useVariants","useStocks","TableUpdateVariantQuantity","lazy","ModalUpdateVariantQuantity","visible","toggle","onUpdate","loading","variants","stocks","setStocks","localStocks","setLocalStocks","handleUpdateToContext","newStocks","forEach","item","_id","productId","rest","localStockArr","Object","entries","map","warehouseId","quantity","stock","o","concat","stockPipeToDataTable","newLocalStocks","variant","localStock","length","stockFilteredByProductId","filter","reduce","prevValue","currValue","handleCancel","width"],"mappings":"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","sourcesContent":["import React, { FC, useState, useMemo, useCallback } from 'react';\n\nimport { find } from 'lodash';\n\nimport { Modal, Divider, Space } from 'antd';\nimport { InsaButton, Loading } from '../../../../../components';\nimport { IVariant, IStock } from '../../../../../models';\n\nimport useVariants from '../../../context/use-variant';\nimport useStocks from '../../../context/use-stock';\n\nimport './index.less';\n\nconst TableUpdateVariantQuantity = React.lazy(() => import('./table'));\n\ninterface Props {\n    visible: boolean;\n    toggle: () => void;\n    onUpdate?: Function;\n    loading?: boolean;\n}\n\nconst ModalUpdateVariantQuantity: FC<Props> = ({ visible, toggle, onUpdate, loading = false }) => {\n    const { variants } = useVariants();\n    const { stocks, setStocks } = useStocks();\n\n    const [localStocks, setLocalStocks] = useState<any>([]);\n\n    const handleUpdateToContext = useCallback(() => {\n        let newStocks: IStock[] = [];\n\n        localStocks.forEach((item: any) => {\n            let { _id, productId, ...rest } = item;\n\n            let localStockArr = Object.entries({ ...rest }).map(([warehouseId, quantity]) => {\n                let stock = find(\n                    stocks,\n                    (o) => o.productId._id === _id && o.warehouseId === warehouseId\n                );\n\n                if (!stock) return { _id, warehouseId, productId, quantity };\n\n                return { ...stock, quantity };\n            });\n\n            newStocks = newStocks.concat(localStockArr as IStock[]);\n        });\n\n        setStocks(newStocks);\n\n        if (onUpdate) onUpdate(newStocks);\n        else toggle();\n        // eslint-disable-next-line\n    }, [stocks, localStocks]);\n\n    const stockPipeToDataTable = useMemo(() => {\n        if (!variants) return [];\n\n        let newLocalStocks = variants.map((variant: IVariant) => {\n            let localStock = {\n                _id: variant._id,\n                productId: variant,\n            };\n\n            if (stocks.length) {\n                let stockFilteredByProductId = stocks.filter(\n                    (item: IStock) => item.productId._id === variant._id\n                );\n\n                localStock = stockFilteredByProductId.reduce(\n                    (prevValue, currValue: IStock) => ({\n                        ...prevValue,\n                        [currValue.warehouseId]: currValue.quantity,\n                    }),\n                    localStock\n                );\n            }\n\n            return localStock;\n        });\n\n        return newLocalStocks;\n    }, [variants, stocks]);\n\n    useMemo(() => {\n        setLocalStocks(stockPipeToDataTable);\n        // eslint-disable-next-line\n    }, [stocks, variants]);\n\n    const handleCancel = () => {\n        setLocalStocks(stockPipeToDataTable);\n        toggle();\n    };\n\n    return (\n        <Modal\n            visible={visible}\n            onCancel={handleCancel}\n            title=\"Thay đổi số lượng biến thể\"\n            closable={false}\n            footer={null}\n            width={800}\n            wrapClassName=\"modal-change-variant-quantity\"\n        >\n            {loading && <Loading full />}\n\n            <React.Suspense fallback={<Loading full />}>\n                <TableUpdateVariantQuantity\n                    localStocks={localStocks}\n                    setLocalStocks={setLocalStocks}\n                />\n            </React.Suspense>\n\n            <div className=\"footer\">\n                <Divider />\n\n                <Space className=\"footer-btn\">\n                    <InsaButton\n                        onClick={handleCancel}\n                        size=\"middle\"\n                        loading={loading}\n                        style={{ width: 120 }}\n                    >\n                        Huỷ\n                    </InsaButton>\n                    <InsaButton\n                        onClick={handleUpdateToContext}\n                        loading={loading}\n                        size=\"middle\"\n                        type=\"primary\"\n                        style={{ width: 120 }}\n                    >\n                        Cập nhật\n                    </InsaButton>\n                </Space>\n            </div>\n        </Modal>\n    );\n};\n\nexport default ModalUpdateVariantQuantity;\n"]},"metadata":{},"sourceType":"module"}