{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/product-detail/product-variant/attribute-item.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from 'react';\nimport { mongoObjectId } from '../../../../helper';\nimport { useSelector } from 'react-redux';\nimport useAttributes from '../../context/use-attribute';\nimport { Col, Select, Input, Space } from 'antd';\nimport { CaretDownOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AttributeItem = ({\n  attribute,\n  optionData,\n  onChange,\n  tagColor\n}) => {\n  _s();\n\n  const {\n    isLocalAttributeSign\n  } = useAttributes();\n  const [newOptionName, setNewOptionName] = useState(attribute.name);\n  const attributeOptions = useSelector(state => state.store.attributes.data);\n\n  const selectNewAttribute = attributeId => {\n    const attributeSelected = optionData.filter(i => i._id === attributeId);\n\n    if (attributeSelected.length) {\n      let {\n        _id,\n        name\n      } = attributeSelected[0];\n      onChange({\n        _id,\n        name,\n        tags: attribute.tags,\n        [isLocalAttributeSign]: attribute[isLocalAttributeSign] || undefined\n      });\n    } else {\n      onChange({\n        _id: mongoObjectId(),\n        name: '',\n        tags: attribute.tags,\n        [isLocalAttributeSign]: attribute[isLocalAttributeSign] || undefined\n      });\n    }\n  };\n\n  const changeNameAttribute = e => {\n    setNewOptionName(e.target.value);\n  };\n\n  const setNameNewOption = e => {\n    onChange({ ...attribute,\n      name: newOptionName\n    });\n  };\n\n  const changeTagName = event => {\n    let newTag = event.target.value;\n    onChange({ ...attribute,\n      tags: newTag.length ? [newTag] : []\n    });\n  };\n\n  const isNewOptionAttribute = useMemo(() => {\n    return attributeOptions.map(item => item._id).indexOf(attribute._id) === -1;\n  }, [attribute, attributeOptions]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      span: 8,\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        value: isNewOptionAttribute ? 'new-option' : attribute._id,\n        style: {\n          width: '100%'\n        },\n        onChange: selectNewAttribute,\n        suffixIcon: /*#__PURE__*/_jsxDEV(CaretDownOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 33\n        }, this),\n        children: [!isNewOptionAttribute ? /*#__PURE__*/_jsxDEV(Select.Option, {\n          value: attribute._id,\n          children: attribute.name\n        }, `attribute_option_${attribute._id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), optionData.map(attrOption => /*#__PURE__*/_jsxDEV(Select.Option, {\n          value: attrOption._id,\n          children: attrOption.name\n        }, `attribute_option_${attrOption._id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(Select.Option, {\n          value: 'new-option',\n          children: \"New option\"\n        }, `attribute_option_new_option`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), isNewOptionAttribute && /*#__PURE__*/_jsxDEV(Input, {\n        className: \"new-option-name\",\n        placeholder: \"Option name\",\n        value: newOptionName,\n        onChange: changeNameAttribute,\n        onBlur: setNameNewOption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      span: 12,\n      className: \"edit-section tag-list\",\n      children: attribute[isLocalAttributeSign] ? /*#__PURE__*/_jsxDEV(Input, {\n        value: attribute.tags[0],\n        onChange: changeTagName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Space, {\n        children: attribute.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `tag ${tagColor}`,\n          children: tag\n        }, tag + tagIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AttributeItem, \"GtrJCUDxAoU10rvGwvBqP/bPito=\", false, function () {\n  return [useAttributes, useSelector];\n});\n\n_c = AttributeItem;\nexport default AttributeItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"AttributeItem\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/product-detail/product-variant/attribute-item.tsx"],"names":["React","useState","useMemo","mongoObjectId","useSelector","useAttributes","Col","Select","Input","Space","CaretDownOutlined","AttributeItem","attribute","optionData","onChange","tagColor","isLocalAttributeSign","newOptionName","setNewOptionName","name","attributeOptions","state","store","attributes","data","selectNewAttribute","attributeId","attributeSelected","filter","i","_id","length","tags","undefined","changeNameAttribute","e","target","value","setNameNewOption","changeTagName","event","newTag","isNewOptionAttribute","map","item","indexOf","width","attrOption","tag","tagIndex"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,aAAP,MAA0B,6BAA1B;AAGA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,KAA7B,QAA0C,MAA1C;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;;;AASA,MAAMC,aAAwB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA,QAAzB;AAAmCC,EAAAA;AAAnC,CAAD,KAAmD;AAAA;;AAChF,QAAM;AAAEC,IAAAA;AAAF,MAA2BX,aAAa,EAA9C;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAASW,SAAS,CAACO,IAAnB,CAAlD;AACA,QAAMC,gBAAoC,GAAGhB,WAAW,CACnDiB,KAAD,IAAgBA,KAAK,CAACC,KAAN,CAAYC,UAAZ,CAAuBC,IADa,CAAxD;;AAIA,QAAMC,kBAAkB,GAAIC,WAAD,IAAyB;AAChD,UAAMC,iBAAqC,GAAGd,UAAU,CAACe,MAAX,CACzCC,CAAD,IAAyBA,CAAC,CAACC,GAAF,KAAUJ,WADO,CAA9C;;AAGA,QAAIC,iBAAiB,CAACI,MAAtB,EAA8B;AAC1B,UAAI;AAAED,QAAAA,GAAF;AAAOX,QAAAA;AAAP,UAAgBQ,iBAAiB,CAAC,CAAD,CAArC;AAEAb,MAAAA,QAAQ,CAAC;AACLgB,QAAAA,GADK;AAELX,QAAAA,IAFK;AAGLa,QAAAA,IAAI,EAAEpB,SAAS,CAACoB,IAHX;AAIL,SAAChB,oBAAD,GAAwBJ,SAAS,CAACI,oBAAD,CAAT,IAAmCiB;AAJtD,OAAD,CAAR;AAMH,KATD,MASO;AACHnB,MAAAA,QAAQ,CAAC;AACLgB,QAAAA,GAAG,EAAE3B,aAAa,EADb;AAELgB,QAAAA,IAAI,EAAE,EAFD;AAGLa,QAAAA,IAAI,EAAEpB,SAAS,CAACoB,IAHX;AAIL,SAAChB,oBAAD,GAAwBJ,SAAS,CAACI,oBAAD,CAAT,IAAmCiB;AAJtD,OAAD,CAAR;AAMH;AACJ,GArBD;;AAuBA,QAAMC,mBAAmB,GAAIC,CAAD,IAAY;AACpCjB,IAAAA,gBAAgB,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,CAAD,IAAY;AACjCrB,IAAAA,QAAQ,CAAC,EAAE,GAAGF,SAAL;AAAgBO,MAAAA,IAAI,EAAEF;AAAtB,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMsB,aAAa,GAAIC,KAAD,IAAgB;AAClC,QAAIC,MAAM,GAAGD,KAAK,CAACJ,MAAN,CAAaC,KAA1B;AACAvB,IAAAA,QAAQ,CAAC,EAAE,GAAGF,SAAL;AAAgBoB,MAAAA,IAAI,EAAES,MAAM,CAACV,MAAP,GAAgB,CAACU,MAAD,CAAhB,GAA2B;AAAjD,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMC,oBAAoB,GAAGxC,OAAO,CAAC,MAAM;AACvC,WAAOkB,gBAAgB,CAACuB,GAAjB,CAAsBC,IAAD,IAAsBA,IAAI,CAACd,GAAhD,EAAqDe,OAArD,CAA6DjC,SAAS,CAACkB,GAAvE,MAAgF,CAAC,CAAxF;AACH,GAFmC,EAEjC,CAAClB,SAAD,EAAYQ,gBAAZ,CAFiC,CAApC;AAIA,sBACI;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,IAAI,EAAE,CAAX;AAAA,8BACI,QAAC,MAAD;AACI,QAAA,KAAK,EAAEsB,oBAAoB,GAAG,YAAH,GAAkB9B,SAAS,CAACkB,GAD3D;AAEI,QAAA,KAAK,EAAE;AAAEgB,UAAAA,KAAK,EAAE;AAAT,SAFX;AAGI,QAAA,QAAQ,EAAErB,kBAHd;AAII,QAAA,UAAU,eAAE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,gBAJhB;AAAA,mBAMK,CAACiB,oBAAD,gBACG,QAAC,MAAD,CAAQ,MAAR;AACI,UAAA,KAAK,EAAE9B,SAAS,CAACkB,GADrB;AAAA,oBAIKlB,SAAS,CAACO;AAJf,WAEU,oBAAmBP,SAAS,CAACkB,GAAI,EAF3C;AAAA;AAAA;AAAA;AAAA,gBADH,gBAQG,qCAdR,EAgBKjB,UAAU,CAAC8B,GAAX,CAAgBI,UAAD,iBACZ,QAAC,MAAD,CAAQ,MAAR;AACI,UAAA,KAAK,EAAEA,UAAU,CAACjB,GADtB;AAAA,oBAIKiB,UAAU,CAAC5B;AAJhB,WAEU,oBAAmB4B,UAAU,CAACjB,GAAI,EAF5C;AAAA;AAAA;AAAA;AAAA,gBADH,CAhBL,eAwBI,QAAC,MAAD,CAAQ,MAAR;AAAe,UAAA,KAAK,EAAE,YAAtB;AAAA;AAAA,WAA0C,6BAA1C;AAAA;AAAA;AAAA;AAAA,gBAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EA6BKY,oBAAoB,iBACjB,QAAC,KAAD;AACI,QAAA,SAAS,EAAC,iBADd;AAEI,QAAA,WAAW,EAAC,aAFhB;AAGI,QAAA,KAAK,EAAEzB,aAHX;AAII,QAAA,QAAQ,EAAEiB,mBAJd;AAKI,QAAA,MAAM,EAAEI;AALZ;AAAA;AAAA;AAAA;AAAA,cA9BR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAwCI,QAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAe,MAAA,SAAS,EAAC,uBAAzB;AAAA,gBACK1B,SAAS,CAACI,oBAAD,CAAT,gBACG,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEJ,SAAS,CAACoB,IAAV,CAAe,CAAf,CAAd;AAAiC,QAAA,QAAQ,EAAEO;AAA3C;AAAA;AAAA;AAAA;AAAA,cADH,gBAGG,QAAC,KAAD;AAAA,kBACK3B,SAAS,CAACoB,IAAV,CAAeW,GAAf,CAAmB,CAACK,GAAD,EAAcC,QAAd,kBAChB;AAA2B,UAAA,SAAS,EAAG,OAAMlC,QAAS,EAAtD;AAAA,oBACKiC;AADL,WAAWA,GAAG,GAAGC,QAAjB;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,YAxCJ;AAAA,kBADJ;AAwDH,CAvGD;;GAAMtC,a;UAC+BN,a,EAEYD,W;;;KAH3CO,a;AAyGN,eAAeA,aAAf","sourcesContent":["import React, { FC, useState, useMemo } from 'react';\nimport { IAttribute } from '../../../../models';\nimport { mongoObjectId } from '../../../../helper';\nimport { useSelector } from 'react-redux';\n\nimport useAttributes from '../../context/use-attribute';\nimport { IAttributeOption } from '../../context/interface';\n\nimport { Col, Select, Input, Space } from 'antd';\nimport { CaretDownOutlined } from '@ant-design/icons';\n\ntype Props = {\n    attribute: IAttributeOption | any;\n    optionData: any[];\n    onChange: Function;\n    tagColor: string;\n};\n\nconst AttributeItem: FC<Props> = ({ attribute, optionData, onChange, tagColor }) => {\n    const { isLocalAttributeSign } = useAttributes();\n    const [newOptionName, setNewOptionName] = useState<string>(attribute.name);\n    const attributeOptions: IAttributeOption[] = useSelector(\n        (state: any) => state.store.attributes.data\n    );\n\n    const selectNewAttribute = (attributeId: string) => {\n        const attributeSelected: IAttributeOption[] = optionData.filter(\n            (i: IAttributeOption) => i._id === attributeId\n        );\n        if (attributeSelected.length) {\n            let { _id, name } = attributeSelected[0];\n\n            onChange({\n                _id,\n                name,\n                tags: attribute.tags,\n                [isLocalAttributeSign]: attribute[isLocalAttributeSign] || undefined,\n            });\n        } else {\n            onChange({\n                _id: mongoObjectId(),\n                name: '',\n                tags: attribute.tags,\n                [isLocalAttributeSign]: attribute[isLocalAttributeSign] || undefined,\n            });\n        }\n    };\n\n    const changeNameAttribute = (e: any) => {\n        setNewOptionName(e.target.value);\n    };\n\n    const setNameNewOption = (e: any) => {\n        onChange({ ...attribute, name: newOptionName });\n    };\n\n    const changeTagName = (event: any) => {\n        let newTag = event.target.value;\n        onChange({ ...attribute, tags: newTag.length ? [newTag] : [] });\n    };\n\n    const isNewOptionAttribute = useMemo(() => {\n        return attributeOptions.map((item: IAttribute) => item._id).indexOf(attribute._id) === -1;\n    }, [attribute, attributeOptions]);\n\n    return (\n        <>\n            <Col span={8}>\n                <Select\n                    value={isNewOptionAttribute ? 'new-option' : attribute._id}\n                    style={{ width: '100%' }}\n                    onChange={selectNewAttribute}\n                    suffixIcon={<CaretDownOutlined />}\n                >\n                    {!isNewOptionAttribute ? (\n                        <Select.Option\n                            value={attribute._id}\n                            key={`attribute_option_${attribute._id}`}\n                        >\n                            {attribute.name}\n                        </Select.Option>\n                    ) : (\n                        <></>\n                    )}\n                    {optionData.map((attrOption: any) => (\n                        <Select.Option\n                            value={attrOption._id}\n                            key={`attribute_option_${attrOption._id}`}\n                        >\n                            {attrOption.name}\n                        </Select.Option>\n                    ))}\n                    <Select.Option value={'new-option'} key={`attribute_option_new_option`}>\n                        New option\n                    </Select.Option>\n                </Select>\n                {isNewOptionAttribute && (\n                    <Input\n                        className=\"new-option-name\"\n                        placeholder=\"Option name\"\n                        value={newOptionName}\n                        onChange={changeNameAttribute}\n                        onBlur={setNameNewOption}\n                    />\n                )}\n            </Col>\n            <Col span={12} className=\"edit-section tag-list\">\n                {attribute[isLocalAttributeSign] ? (\n                    <Input value={attribute.tags[0]} onChange={changeTagName} />\n                ) : (\n                    <Space>\n                        {attribute.tags.map((tag: string, tagIndex: number) => (\n                            <span key={tag + tagIndex} className={`tag ${tagColor}`}>\n                                {tag}\n                            </span>\n                        ))}\n                    </Space>\n                )}\n            </Col>\n        </>\n    );\n};\n\nexport default AttributeItem;\n"]},"metadata":{},"sourceType":"module"}