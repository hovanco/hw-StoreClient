{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { find, findIndex, pick } from 'lodash';\nimport { useCallback, useContext } from 'react';\nimport { mongoObjectId } from '../../../helper';\nimport { ProductContext } from './context';\nimport types from './type';\n\nconst useAttribute = () => {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(ProductContext);\n  const isLocalAttributeSign = 'isLocalAttributeSign';\n  const setAttributes = useCallback(attributes => {\n    dispatch({\n      type: types.SET_ATTRIBUTES,\n      payload: attributes || []\n    }); // eslint-disable-next-line\n  }, []);\n  const addAttribute = useCallback(() => {\n    dispatch({\n      type: types.ADD_ATTRIBUTES,\n      payload: { ...pick(state.attributeOptions[0], ['_id', 'name', isLocalAttributeSign]),\n        tags: []\n      }\n    }); // eslint-disable-next-line\n  }, [state.attributeOptions]);\n  const updateAttribute = useCallback(newAttribute => {\n    let newAttributes = [...state.attributes];\n    let idx = findIndex(state.attributes, ['_id', newAttribute._id]);\n    newAttributes[idx] = { ...pick(newAttribute, ['_id', 'name', 'tags', isLocalAttributeSign])\n    };\n    dispatch({\n      type: types.SET_ATTRIBUTES,\n      payload: newAttributes\n    });\n  }, // eslint-disable-next-line\n  [state.attributes]);\n  const removeAttribute = useCallback(attributeIdx => {\n    let newAttributes = [...state.attributes];\n    newAttributes.splice(attributeIdx, 1);\n    dispatch({\n      type: types.SET_ATTRIBUTES,\n      payload: newAttributes\n    });\n  }, // eslint-disable-next-line\n  [state.attributes]);\n  const changeAttribute = useCallback((oldAttribute, newId) => {\n    if (oldAttribute._id === newId) return;\n    let oldAttributeIdx = findIndex(state.attributes, ['_id', oldAttribute._id]);\n    let newAttributes = [...state.attributes];\n\n    if (newId !== 'new-option') {\n      let newAttribute = find(state.attributeOptions, ['_id', newId]);\n      newAttributes.splice(oldAttributeIdx, 1, { ...pick(newAttribute, ['_id', 'name', isLocalAttributeSign]),\n        tags: []\n      });\n    } else {\n      if (!oldAttribute[isLocalAttributeSign]) {\n        newAttributes.splice(oldAttributeIdx, 1, {\n          _id: mongoObjectId(),\n          name: '',\n          tags: [],\n          [isLocalAttributeSign]: true\n        });\n      }\n    }\n\n    dispatch({\n      type: types.SET_ATTRIBUTES,\n      payload: newAttributes\n    });\n  }, // eslint-disable-next-line\n  [state.attributeOptions]);\n  const removeAttributesInEditMode = useCallback(removedAttributesId => {\n    let newVariants = state.variants.map(variant => {\n      let newVariantAttributes = variant.attributes.filter(attribute => removedAttributesId.indexOf(attribute._id) !== -1);\n      return { ...variant,\n        attributes: newVariantAttributes\n      };\n    });\n    let newAttributes = state.attributes.filter(attribute => removedAttributesId.indexOf(attribute._id) !== -1);\n    dispatch({\n      type: types.SET_VARIANTS,\n      payload: newVariants\n    });\n    setAttributes([...newAttributes]);\n  }, // eslint-disable-next-line\n  [state.variants, state.attributes]);\n  return {\n    attributes: state.attributes,\n    attributeOptions: state.attributeOptions,\n    setAttributes,\n    addAttribute,\n    updateAttribute,\n    removeAttribute,\n    changeAttribute,\n    removeAttributesInEditMode,\n    isLocalAttributeSign\n  };\n};\n\n_s(useAttribute, \"Hg/YYd1DuOZUksvIjlcOkWoSYO0=\");\n\nexport default useAttribute;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/context/use-attribute.ts"],"names":["find","findIndex","pick","useCallback","useContext","mongoObjectId","ProductContext","types","useAttribute","state","dispatch","isLocalAttributeSign","setAttributes","attributes","type","SET_ATTRIBUTES","payload","addAttribute","ADD_ATTRIBUTES","attributeOptions","tags","updateAttribute","newAttribute","newAttributes","idx","_id","removeAttribute","attributeIdx","splice","changeAttribute","oldAttribute","newId","oldAttributeIdx","name","removeAttributesInEditMode","removedAttributesId","newVariants","variants","map","variant","newVariantAttributes","filter","attribute","indexOf","SET_VARIANTS"],"mappings":"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","sourcesContent":["import { find, findIndex, pick } from 'lodash';\nimport { useCallback, useContext } from 'react';\nimport { mongoObjectId } from '../../../helper';\nimport { IAttribute, IVariant } from '../../../models';\nimport { ProductContext } from './context';\nimport { IAttributeOption } from './interface';\nimport types from './type';\n\nconst useAttribute = () => {\n    const { state, dispatch } = useContext(ProductContext);\n    const isLocalAttributeSign = 'isLocalAttributeSign';\n\n    const setAttributes = useCallback((attributes: IAttribute[]) => {\n        dispatch({\n            type: types.SET_ATTRIBUTES,\n            payload: attributes || [],\n        });\n\n        // eslint-disable-next-line\n    }, []);\n\n    const addAttribute = useCallback(() => {\n        dispatch({\n            type: types.ADD_ATTRIBUTES,\n            payload: {\n                ...pick(state.attributeOptions[0], ['_id', 'name', isLocalAttributeSign]),\n                tags: [],\n            },\n        });\n\n        // eslint-disable-next-line\n    }, [state.attributeOptions]);\n\n    const updateAttribute = useCallback(\n        (newAttribute: IAttribute) => {\n            let newAttributes: IAttribute[] = [...state.attributes];\n\n            let idx = findIndex(state.attributes, ['_id', newAttribute._id]);\n\n            newAttributes[idx] = {\n                ...pick(newAttribute, ['_id', 'name', 'tags', isLocalAttributeSign]),\n            } as IAttribute;\n\n            dispatch({\n                type: types.SET_ATTRIBUTES,\n                payload: newAttributes,\n            });\n        },\n        // eslint-disable-next-line\n        [state.attributes]\n    );\n\n    const removeAttribute = useCallback(\n        (attributeIdx: number) => {\n            let newAttributes: IAttribute[] = [...state.attributes];\n\n            newAttributes.splice(attributeIdx, 1);\n\n            dispatch({\n                type: types.SET_ATTRIBUTES,\n                payload: newAttributes,\n            });\n        },\n        // eslint-disable-next-line\n        [state.attributes]\n    );\n\n    const changeAttribute = useCallback(\n        (oldAttribute: IAttributeOption, newId: string) => {\n            if (oldAttribute._id === newId) return;\n\n            let oldAttributeIdx = findIndex(state.attributes, ['_id', oldAttribute._id]);\n            let newAttributes = [...state.attributes];\n            if (newId !== 'new-option') {\n                let newAttribute = find(state.attributeOptions, ['_id', newId]);\n\n                newAttributes.splice(oldAttributeIdx, 1, {\n                    ...pick(newAttribute, ['_id', 'name', isLocalAttributeSign]),\n                    tags: [],\n                } as IAttribute);\n            } else {\n                if (!oldAttribute[isLocalAttributeSign]) {\n                    newAttributes.splice(oldAttributeIdx, 1, {\n                        _id: mongoObjectId(),\n                        name: '',\n                        tags: [],\n                        [isLocalAttributeSign]: true,\n                    } as IAttribute);\n                }\n            }\n\n            dispatch({\n                type: types.SET_ATTRIBUTES,\n                payload: newAttributes,\n            });\n        },\n        // eslint-disable-next-line\n        [state.attributeOptions]\n    );\n\n    const removeAttributesInEditMode = useCallback(\n        (removedAttributesId: string[]) => {\n            let newVariants = state.variants.map((variant: IVariant) => {\n                let newVariantAttributes = variant.attributes.filter(\n                    (attribute: IAttribute) => removedAttributesId.indexOf(attribute._id) !== -1\n                );\n\n                return {\n                    ...variant,\n                    attributes: newVariantAttributes,\n                };\n            });\n\n            let newAttributes = state.attributes.filter(\n                (attribute: IAttribute) => removedAttributesId.indexOf(attribute._id) !== -1\n            );\n\n            dispatch({\n                type: types.SET_VARIANTS,\n                payload: newVariants,\n            });\n\n            setAttributes([...newAttributes]);\n        },\n        // eslint-disable-next-line\n        [state.variants, state.attributes]\n    );\n\n    return {\n        attributes: state.attributes,\n        attributeOptions: state.attributeOptions,\n        setAttributes,\n        addAttribute,\n        updateAttribute,\n        removeAttribute,\n        changeAttribute,\n        removeAttributesInEditMode,\n        isLocalAttributeSign,\n    };\n};\n\nexport default useAttribute;\n"]},"metadata":{},"sourceType":"module"}