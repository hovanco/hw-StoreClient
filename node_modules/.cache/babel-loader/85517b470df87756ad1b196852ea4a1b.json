{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/variant-detail/inventory-quantity/context.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext, useMemo } from 'react';\nimport { find } from 'lodash';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { storeAction } from '../../../../reducers/storeState/action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst inititalStocks = [];\nconst inititalFilter = {};\nconst initialPage = 1;\nconst initialWarehouses = [];\nexport const InventoryContext = /*#__PURE__*/createContext({\n  stocks: inititalStocks,\n  filter: inititalFilter,\n  page: initialPage,\n  warehouses: initialWarehouses,\n  setStocks: stocks => stocks,\n  setFilter: filter => filter,\n  setPage: page => page,\n  setWarehouses: warehouses => warehouses\n});\nexport const IventoryContextProvider = ({\n  children,\n  form\n}) => {\n  _s();\n\n  const [stocks, setStocks] = useState(inititalStocks);\n  const [filter, setFilter] = useState(inititalFilter);\n  const [page, setPage] = useState(initialPage);\n  const [warehouses, setWarehouses] = useState(initialWarehouses);\n  const storeObj = useSelector(state => state.store.data);\n  const warehousesArr = useSelector(state => state.store.warehouses);\n  const stocksObj = useSelector(state => state.store.stocks);\n  const dispatch = useDispatch();\n  const params = useParams();\n  useEffect(() => {\n    dispatch(storeAction.getStocks({\n      storeId: storeObj._id,\n      productId: params === null || params === void 0 ? void 0 : params.variantId\n    })); // eslint-disable-next-line\n  }, [params === null || params === void 0 ? void 0 : params.variantId, storeObj._id]);\n  useEffect(() => {\n    setWarehouses(warehousesArr);\n  }, [warehousesArr]);\n  useEffect(() => {\n    let warehousesIds = warehouses.map(item => item._id);\n    let newStocks = warehousesIds.map(warehouseId => {\n      let stock = find(stocksObj.data, ['warehouseId', warehouseId]);\n      if (stock) return stock;\n      return {\n        productId: params === null || params === void 0 ? void 0 : params.variantId,\n        warehouseId: warehouseId,\n        quantity: 0,\n        _id: warehouseId\n      };\n    });\n    setStocks(newStocks); // eslint-disable-next-line\n  }, [warehouses, stocksObj.data]);\n  useEffect(() => {\n    let updatedStocks = stocks.filter(item => {\n      var _find;\n\n      if (item._id === item.warehouseId && item.quantity === 0) return false;\n      if (((_find = find(stocksObj.data, ['_id', item._id])) === null || _find === void 0 ? void 0 : _find.quantity) === item.quantity) return false;\n      return true;\n    });\n    form.setFieldsValue({\n      stocks: updatedStocks\n    }); // eslint-disable-next-line\n  }, [stocks]);\n  const value = useMemo(() => ({\n    stocks,\n    filter,\n    page,\n    warehouses,\n    setStocks,\n    setFilter,\n    setPage,\n    setWarehouses\n  }), [stocks, filter, page, warehouses, setStocks, setFilter, setPage, setWarehouses]);\n  return /*#__PURE__*/_jsxDEV(InventoryContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 12\n  }, this);\n};\n\n_s(IventoryContextProvider, \"LxrS414dEpT6PtKfHe/rrnxgP84=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useParams];\n});\n\n_c = IventoryContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"IventoryContextProvider\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/variant-detail/inventory-quantity/context.tsx"],"names":["React","useState","useEffect","createContext","useMemo","find","useSelector","useDispatch","useParams","storeAction","inititalStocks","inititalFilter","initialPage","initialWarehouses","InventoryContext","stocks","filter","page","warehouses","setStocks","setFilter","setPage","setWarehouses","IventoryContextProvider","children","form","storeObj","state","store","data","warehousesArr","stocksObj","dispatch","params","getStocks","storeId","_id","productId","variantId","warehousesIds","map","item","newStocks","warehouseId","stock","quantity","updatedStocks","setFieldsValue","value"],"mappings":"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","sourcesContent":["import React, { FC, useState, useEffect, createContext, useMemo } from 'react';\nimport { IWarehouse } from '../../../../models';\nimport { FormInstance } from 'antd/lib/form/Form';\n\nimport { find } from 'lodash';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { IState } from '../../../../store/rootReducer';\nimport { storeAction } from '../../../../reducers/storeState/action';\nimport { IEditStock } from '../../interface';\n\ninterface IFilter {\n    search?: string;\n}\n\ninterface IParam {\n    variantId: string;\n    productId: string;\n}\n\nconst inititalStocks: IEditStock[] = [];\nconst inititalFilter: IFilter = {};\nconst initialPage: number = 1;\nconst initialWarehouses: IWarehouse[] = [];\n\nexport const InventoryContext = createContext({\n    stocks: inititalStocks,\n    filter: inititalFilter,\n    page: initialPage,\n    warehouses: initialWarehouses,\n    setStocks: (stocks: any) => stocks,\n    setFilter: (filter: any) => filter,\n    setPage: (page: any) => page,\n    setWarehouses: (warehouses: any) => warehouses,\n});\n\ninterface Props {\n    children: React.ReactNode;\n    form: FormInstance;\n}\n\nexport const IventoryContextProvider: FC<Props> = ({ children, form }) => {\n    const [stocks, setStocks] = useState<IEditStock[]>(inititalStocks);\n    const [filter, setFilter] = useState<IFilter>(inititalFilter);\n    const [page, setPage] = useState<number>(initialPage);\n    const [warehouses, setWarehouses] = useState<IWarehouse[]>(initialWarehouses);\n\n    const storeObj = useSelector((state: IState) => state.store.data);\n    const warehousesArr = useSelector((state: IState) => state.store.warehouses);\n    const stocksObj = useSelector((state: IState) => state.store.stocks);\n    const dispatch = useDispatch();\n\n    const params = useParams<IParam>();\n\n    useEffect(() => {\n        dispatch(\n            storeAction.getStocks({\n                storeId: storeObj._id as string,\n                productId: params?.variantId,\n            })\n        );\n        // eslint-disable-next-line\n    }, [params?.variantId, storeObj._id]);\n\n    useEffect(() => {\n        setWarehouses(warehousesArr);\n    }, [warehousesArr]);\n\n    useEffect(() => {\n        let warehousesIds: string[] = warehouses.map((item: IWarehouse) => item._id as string);\n\n        let newStocks = warehousesIds.map((warehouseId: string) => {\n            let stock = find(stocksObj.data, ['warehouseId', warehouseId]);\n\n            if (stock) return stock;\n\n            return {\n                productId: params?.variantId,\n                warehouseId: warehouseId,\n                quantity: 0,\n                _id: warehouseId,\n            };\n        });\n\n        setStocks(newStocks);\n        // eslint-disable-next-line\n    }, [warehouses, stocksObj.data]);\n\n    useEffect(() => {\n        let updatedStocks = stocks.filter((item: IEditStock) => {\n            if (item._id === item.warehouseId && item.quantity === 0) return false;\n\n            if (find(stocksObj.data, ['_id', item._id])?.quantity === item.quantity) return false;\n\n            return true;\n        });\n\n        form.setFieldsValue({ stocks: updatedStocks });\n        // eslint-disable-next-line\n    }, [stocks]);\n\n    const value = useMemo(\n        () => ({\n            stocks,\n            filter,\n            page,\n            warehouses,\n            setStocks,\n            setFilter,\n            setPage,\n            setWarehouses,\n        }),\n        [stocks, filter, page, warehouses, setStocks, setFilter, setPage, setWarehouses]\n    );\n\n    return <InventoryContext.Provider value={value}>{children}</InventoryContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}