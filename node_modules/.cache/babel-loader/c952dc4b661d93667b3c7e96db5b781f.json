{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/product-new/product-form-properties/table-quantity-product/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { InputNumber, Table } from 'antd';\nimport { get, pick } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { formatterInput, parserInput } from '../../../../../helper/format-money';\nimport { useProductDetail } from '../../../product-detail/state/context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TableQuantityProduct = ({\n  quantity,\n  isEdit,\n  changeStockUpdate\n}) => {\n  _s();\n\n  const {\n    product\n  } = useProductDetail();\n  const warehouses = useSelector(state => state.store.warehouses);\n  const [quantityLocal, setQuantityLocal] = useState([]);\n  useEffect(() => {\n    if (quantity) {\n      setQuantityLocal(quantity);\n    }\n  }, [quantity]);\n  const columns = warehouses.map(item => {\n    const handleStockChange = value => {\n      const existStock = quantityLocal.find(i => i.warehouseId === item._id);\n      let newValue = [];\n      const newItem = { ...pick(item, ['storeId']),\n        warehouseId: item._id,\n        productId: get(product, '_id'),\n        quantity: value\n      };\n\n      if (!existStock) {\n        if (changeStockUpdate) {\n          changeStockUpdate(newItem);\n        }\n\n        newValue = [...quantityLocal, newItem];\n      } else {\n        newValue = quantityLocal.map(i => {\n          if (i.warehouseId === item._id) {\n            if (changeStockUpdate) {\n              changeStockUpdate(newItem);\n            }\n\n            return newItem;\n          }\n\n          return i;\n        });\n      }\n\n      setQuantityLocal(newValue);\n    };\n\n    return {\n      title: item.name,\n      dataIndex: item._id,\n      align: 'left',\n      key: item._id,\n      render: (text, record) => {\n        const warehousesExist = quantityLocal.find(i => {\n          return i.warehouseId === item._id;\n        });\n        const productQuantity = get(warehousesExist, 'quantity') || 0;\n\n        if (isEdit) {\n          return /*#__PURE__*/_jsxDEV(InputNumber, {\n            formatter: formatterInput,\n            parser: parserInput,\n            value: productQuantity,\n            onChange: handleStockChange,\n            min: 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: productQuantity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 24\n        }, this);\n      }\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: columns,\n    bordered: true,\n    dataSource: [{\n      key: 1\n    }],\n    pagination: false,\n    scroll: {\n      x: 600\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TableQuantityProduct, \"lX01P1IJpjbX2JaOCwB7FGZxhoA=\", false, function () {\n  return [useProductDetail, useSelector];\n});\n\n_c = TableQuantityProduct;\nexport default TableQuantityProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableQuantityProduct\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/product-new/product-form-properties/table-quantity-product/index.tsx"],"names":["InputNumber","Table","get","pick","React","useEffect","useState","useSelector","formatterInput","parserInput","useProductDetail","TableQuantityProduct","quantity","isEdit","changeStockUpdate","product","warehouses","state","store","quantityLocal","setQuantityLocal","columns","map","item","handleStockChange","value","existStock","find","i","warehouseId","_id","newValue","newItem","productId","title","name","dataIndex","align","key","render","text","record","warehousesExist","productQuantity","x"],"mappings":"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","sourcesContent":["import { InputNumber, Table } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport { get, pick } from 'lodash';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { formatterInput, parserInput } from '../../../../../helper/format-money';\nimport { IStock, IWarehouse } from '../../../../../models';\nimport { IState } from '../../../../../store/rootReducer';\nimport { useProductDetail } from '../../../product-detail/state/context';\nimport { IStockUpdate } from '../update-quantity-product';\n\ninterface Props {\n    quantity: IStockUpdate[];\n    isEdit: boolean;\n    changeStockUpdate?: (stocksUpdate: any) => void;\n}\n\nconst TableQuantityProduct: FC<Props> = ({ quantity, isEdit, changeStockUpdate }) => {\n    const { product } = useProductDetail();\n    const warehouses = useSelector((state: IState) => state.store.warehouses);\n\n    const [quantityLocal, setQuantityLocal] = useState<any[]>([]);\n\n    useEffect(() => {\n        if (quantity) {\n            setQuantityLocal(quantity);\n        }\n    }, [quantity]);\n\n    const columns: ColumnsType<any> = warehouses.map((item: IWarehouse) => {\n        const handleStockChange = (value: any) => {\n            const existStock = quantityLocal.find((i: IStock) => i.warehouseId === item._id);\n\n            let newValue: any[] = [];\n\n            const newItem = {\n                ...pick(item, ['storeId']),\n                warehouseId: item._id,\n                productId: get(product, '_id'),\n                quantity: value,\n            };\n\n            if (!existStock) {\n                if (changeStockUpdate) {\n                    changeStockUpdate(newItem);\n                }\n\n                newValue = [...quantityLocal, newItem];\n            } else {\n                newValue = quantityLocal.map((i: IStock) => {\n                    if (i.warehouseId === item._id) {\n                        if (changeStockUpdate) {\n                            changeStockUpdate(newItem);\n                        }\n\n                        return newItem;\n                    }\n\n                    return i;\n                });\n            }\n\n            setQuantityLocal(newValue);\n        };\n\n        return {\n            title: item.name,\n            dataIndex: item._id,\n            align: 'left',\n            key: item._id,\n\n            render: (text: string, record: any) => {\n                const warehousesExist = quantityLocal.find((i: IStock) => {\n                    return i.warehouseId === item._id;\n                });\n\n                const productQuantity = get(warehousesExist, 'quantity') || 0;\n\n                if (isEdit) {\n                    return (\n                        <InputNumber\n                            formatter={formatterInput}\n                            parser={parserInput}\n                            value={productQuantity}\n                            onChange={handleStockChange}\n                            min={0}\n                        />\n                    );\n                }\n\n                return <span>{productQuantity}</span>;\n            },\n        };\n    });\n\n    return (\n        <Table\n            columns={columns}\n            bordered\n            dataSource={[{ key: 1 }]}\n            pagination={false}\n            scroll={{\n                x: 600,\n            }}\n        />\n    );\n};\n\nexport default TableQuantityProduct;\n"]},"metadata":{},"sourceType":"module"}