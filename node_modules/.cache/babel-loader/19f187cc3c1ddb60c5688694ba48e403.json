{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/product-new/product-form-properties/update-quantity-product/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, message, Modal } from 'antd';\nimport { findIndex } from 'lodash';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { createStock, updateStock } from '../../../../../api/stock-api';\nimport { useProductDetail } from '../../../product-detail/state/context';\nimport TableQuantityProduct from '../table-quantity-product';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UpdateQuantityProduct = ({\n  quantity\n}) => {\n  _s();\n\n  const {\n    loadProduct,\n    product\n  } = useProductDetail();\n  const [loading, setLoading] = useState(false);\n  const store = useSelector(state => state.store.data);\n  const [visible, setVisible] = useState(false);\n  const [stocksUpdate, setStocksUpdate] = useState([]);\n\n  const toggle = () => setVisible(!visible);\n\n  const changeStockUpdate = stock => {\n    const index = findIndex(stocksUpdate, item => item.warehouseId === stock.warehouseId);\n\n    if (index === -1) {\n      return setStocksUpdate([...stocksUpdate, stock]);\n    }\n\n    const newStockUpdate = stocksUpdate.map((item, key) => {\n      if (key === index) {\n        return stock;\n      }\n\n      return item;\n    });\n    return setStocksUpdate(newStockUpdate);\n  };\n\n  const handleOke = async () => {\n    if (stocksUpdate.length > 0) {\n      setLoading(true);\n\n      try {\n        await Promise.all(stocksUpdate.map(stock => {\n          let {\n            quantity,\n            _id\n          } = stock;\n\n          if (!_id) {\n            return createStock({\n              storeId: store._id,\n              productId: stock.productId,\n              warehouseId: stock.warehouseId,\n              quantity\n            });\n          }\n\n          return updateStock({\n            storeId: store._id,\n            quantity,\n            stockId: _id\n          });\n        }));\n        message.success('Cập nhật số lượng thành công');\n        toggle();\n        loadProduct({\n          storeId: store._id,\n          productId: product._id\n        });\n      } catch (error) {\n        message.error('Lỗi cập nhật số lượng');\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: toggle,\n      children: \"C\\u1EADp nh\\u1EADt s\\u1ED1 l\\u01B0\\u1EE3ng\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      visible: visible,\n      onCancel: toggle,\n      title: \"C\\u1EADp nh\\u1EADt s\\u1ED1 l\\u01B0\\u1EE3ng\",\n      width: 768,\n      bodyStyle: {\n        padding: 0\n      },\n      onOk: handleOke,\n      okButtonProps: {\n        loading\n      },\n      children: /*#__PURE__*/_jsxDEV(TableQuantityProduct, {\n        quantity: quantity,\n        isEdit: true,\n        changeStockUpdate: changeStockUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UpdateQuantityProduct, \"UF+87p6AJI1qJJlDA6TgXUlvhsk=\", false, function () {\n  return [useProductDetail, useSelector];\n});\n\n_c = UpdateQuantityProduct;\nexport default UpdateQuantityProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateQuantityProduct\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/product-new/product-form-properties/update-quantity-product/index.tsx"],"names":["Button","message","Modal","findIndex","React","useState","useSelector","createStock","updateStock","useProductDetail","TableQuantityProduct","UpdateQuantityProduct","quantity","loadProduct","product","loading","setLoading","store","state","data","visible","setVisible","stocksUpdate","setStocksUpdate","toggle","changeStockUpdate","stock","index","item","warehouseId","newStockUpdate","map","key","handleOke","length","Promise","all","_id","storeId","productId","stockId","success","error","padding"],"mappings":"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","sourcesContent":["import { Button, message, Modal } from 'antd';\nimport { findIndex } from 'lodash';\nimport React, { FC, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { createStock, updateStock } from '../../../../../api/stock-api';\nimport { IProduct } from '../../../../../models';\nimport { IState } from '../../../../../store/rootReducer';\nimport { useProductDetail } from '../../../product-detail/state/context';\nimport TableQuantityProduct from '../table-quantity-product';\n\ninterface Props {\n    quantity: any[];\n}\nexport interface IStockUpdate {\n    _id?: string;\n    productId?: string;\n    quantity: number;\n    storeId: string;\n    warehouseId: string;\n}\n\nconst UpdateQuantityProduct: FC<Props> = ({ quantity }) => {\n    const { loadProduct, product } = useProductDetail();\n    const [loading, setLoading] = useState<boolean>(false);\n    const store = useSelector((state: IState) => state.store.data);\n    const [visible, setVisible] = useState<boolean>(false);\n    const [stocksUpdate, setStocksUpdate] = useState<IStockUpdate[]>([]);\n    const toggle = () => setVisible(!visible);\n\n    const changeStockUpdate = (stock: IStockUpdate) => {\n        const index = findIndex(stocksUpdate, (item) => item.warehouseId === stock.warehouseId);\n\n        if (index === -1) {\n            return setStocksUpdate([...stocksUpdate, stock]);\n        }\n\n        const newStockUpdate = stocksUpdate.map((item, key) => {\n            if (key === index) {\n                return stock;\n            }\n\n            return item;\n        });\n\n        return setStocksUpdate(newStockUpdate);\n    };\n\n    const handleOke = async () => {\n        if (stocksUpdate.length > 0) {\n            setLoading(true);\n            try {\n                await Promise.all(\n                    stocksUpdate.map((stock: IStockUpdate) => {\n                        let { quantity, _id } = stock;\n\n                        if (!_id) {\n                            return createStock({\n                                storeId: store._id as string,\n                                productId: stock.productId as string,\n                                warehouseId: stock.warehouseId,\n                                quantity,\n                            });\n                        }\n\n                        return updateStock({\n                            storeId: store._id as string,\n                            quantity,\n                            stockId: _id,\n                        });\n                    })\n                );\n                message.success('Cập nhật số lượng thành công');\n                toggle();\n\n                loadProduct({\n                    storeId: store._id,\n                    productId: (product as IProduct)._id,\n                });\n            } catch (error) {\n                message.error('Lỗi cập nhật số lượng');\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    return (\n        <>\n            <Button type=\"primary\" onClick={toggle}>\n                Cập nhật số lượng\n            </Button>\n            <Modal\n                visible={visible}\n                onCancel={toggle}\n                title=\"Cập nhật số lượng\"\n                width={768}\n                bodyStyle={{ padding: 0 }}\n                onOk={handleOke}\n                okButtonProps={{\n                    loading,\n                }}\n            >\n                <TableQuantityProduct\n                    quantity={quantity}\n                    isEdit\n                    changeStockUpdate={changeStockUpdate}\n                />\n            </Modal>\n        </>\n    );\n};\n\nexport default UpdateQuantityProduct;\n"]},"metadata":{},"sourceType":"module"}