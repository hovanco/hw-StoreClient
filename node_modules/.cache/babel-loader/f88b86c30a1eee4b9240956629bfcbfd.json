{"ast":null,"code":"import axios from './axios-client';\n\nconst baseUrl = storeId => `/store/v1/stores/${storeId}/reports`;\n\nexport default {\n  countReport: async ({\n    storeId,\n    startTime,\n    endTime\n  }) => {\n    const url = `${baseUrl(storeId)}/dashboard/count`;\n    const response = await axios({\n      method: 'GET',\n      url,\n      params: {\n        startTime,\n        endTime\n      }\n    });\n    return response.data;\n  },\n  revenueReport: async ({\n    storeId,\n    startTime,\n    endTime\n  }) => {\n    const url = `${baseUrl(storeId)}/dashboard/revenue`;\n    const response = await axios({\n      method: 'GET',\n      url,\n      params: {\n        startTime,\n        endTime\n      }\n    });\n    return response.data;\n  },\n  reportDetail: async ({\n    type,\n    storeId,\n    filter,\n    startTime,\n    endTime\n  }) => {\n    const url = `${baseUrl(storeId)}/${type}`;\n    const response = await axios({\n      method: 'GET',\n      url,\n      params: {\n        startTime,\n        endTime,\n        filter\n      }\n    });\n    return response.data;\n  } // reportCustomer: async ({\n  //     storeId,\n  //     filter,\n  //     startTime,\n  //     endTime,\n  // }: {\n  //     storeId: string;\n  //     filter: string;\n  //     startTime: number;\n  //     endTime: number;\n  // }): Promise<any> => {\n  //     const url = `${baseUrl(storeId)}/customer`;\n  //     const response = await axios({\n  //         method: 'GET',\n  //         url,\n  //         params: {\n  //             startTime,\n  //             endTime,\n  //             filter,\n  //         },\n  //     });\n  //     return response.data;\n  // },\n  // reportRevenue: async ({\n  //     storeId,\n  //     filter,\n  //     startTime,\n  //     endTime,\n  // }: {\n  //     storeId: string;\n  //     filter: string;\n  //     startTime: number;\n  //     endTime: number;\n  // }): Promise<any> => {\n  //     const url = `${baseUrl(storeId)}/revenue`;\n  //     const response = await axios({\n  //         method: 'GET',\n  //         url,\n  //         params: {\n  //             startTime,\n  //             endTime,\n  //             filter,\n  //         },\n  //     });\n  //     return response.data;\n  // },\n  // reportDelivery: async ({\n  //     storeId,\n  //     filter,\n  //     startTime,\n  //     endTime,\n  // }: {\n  //     storeId: string;\n  //     filter: string;\n  //     startTime: number;\n  //     endTime: number;\n  // }): Promise<any> => {\n  //     const url = `${baseUrl(storeId)}/revenue`;\n  //     const response = await axios({\n  //         method: 'GET',\n  //         url,\n  //         params: {\n  //             startTime,\n  //             endTime,\n  //             filter,\n  //         },\n  //     });\n  //     return response.data;\n  // },\n\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/api/report-api.ts"],"names":["axios","baseUrl","storeId","countReport","startTime","endTime","url","response","method","params","data","revenueReport","reportDetail","type","filter"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;;AAEA,MAAMC,OAAO,GAAIC,OAAD,IAAsB,oBAAmBA,OAAQ,UAAjE;;AAEA,eAAe;AACXC,EAAAA,WAAW,EAAE,OAAO;AAChBD,IAAAA,OADgB;AAEhBE,IAAAA,SAFgB;AAGhBC,IAAAA;AAHgB,GAAP,KAQO;AAChB,UAAMC,GAAG,GAAI,GAAEL,OAAO,CAACC,OAAD,CAAU,kBAAhC;AAEA,UAAMK,QAAQ,GAAG,MAAMP,KAAK,CAAC;AACzBQ,MAAAA,MAAM,EAAE,KADiB;AAEzBF,MAAAA,GAFyB;AAGzBG,MAAAA,MAAM,EAAE;AACJL,QAAAA,SADI;AAEJC,QAAAA;AAFI;AAHiB,KAAD,CAA5B;AASA,WAAOE,QAAQ,CAACG,IAAhB;AACH,GAtBU;AAwBXC,EAAAA,aAAa,EAAE,OAAO;AAClBT,IAAAA,OADkB;AAElBE,IAAAA,SAFkB;AAGlBC,IAAAA;AAHkB,GAAP,KAQK;AAChB,UAAMC,GAAG,GAAI,GAAEL,OAAO,CAACC,OAAD,CAAU,oBAAhC;AAEA,UAAMK,QAAQ,GAAG,MAAMP,KAAK,CAAC;AACzBQ,MAAAA,MAAM,EAAE,KADiB;AAEzBF,MAAAA,GAFyB;AAGzBG,MAAAA,MAAM,EAAE;AACJL,QAAAA,SADI;AAEJC,QAAAA;AAFI;AAHiB,KAAD,CAA5B;AASA,WAAOE,QAAQ,CAACG,IAAhB;AACH,GA7CU;AA+CXE,EAAAA,YAAY,EAAE,OAAO;AACjBC,IAAAA,IADiB;AAEjBX,IAAAA,OAFiB;AAGjBY,IAAAA,MAHiB;AAIjBV,IAAAA,SAJiB;AAKjBC,IAAAA;AALiB,GAAP,KAYM;AAChB,UAAMC,GAAG,GAAI,GAAEL,OAAO,CAACC,OAAD,CAAU,IAAGW,IAAK,EAAxC;AAEA,UAAMN,QAAQ,GAAG,MAAMP,KAAK,CAAC;AACzBQ,MAAAA,MAAM,EAAE,KADiB;AAEzBF,MAAAA,GAFyB;AAGzBG,MAAAA,MAAM,EAAE;AACJL,QAAAA,SADI;AAEJC,QAAAA,OAFI;AAGJS,QAAAA;AAHI;AAHiB,KAAD,CAA5B;AAUA,WAAOP,QAAQ,CAACG,IAAhB;AACH,GAzEU,CA2EX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAvJW,CAAf","sourcesContent":["import axios from './axios-client';\n\nconst baseUrl = (storeId: string) => `/store/v1/stores/${storeId}/reports`;\n\nexport default {\n    countReport: async ({\n        storeId,\n        startTime,\n        endTime,\n    }: {\n        storeId: string;\n        startTime: number;\n        endTime: number;\n    }): Promise<any> => {\n        const url = `${baseUrl(storeId)}/dashboard/count`;\n\n        const response = await axios({\n            method: 'GET',\n            url,\n            params: {\n                startTime,\n                endTime,\n            },\n        });\n\n        return response.data;\n    },\n\n    revenueReport: async ({\n        storeId,\n        startTime,\n        endTime,\n    }: {\n        storeId: string;\n        startTime: number;\n        endTime: number;\n    }): Promise<any> => {\n        const url = `${baseUrl(storeId)}/dashboard/revenue`;\n\n        const response = await axios({\n            method: 'GET',\n            url,\n            params: {\n                startTime,\n                endTime,\n            },\n        });\n\n        return response.data;\n    },\n\n    reportDetail: async ({\n        type,\n        storeId,\n        filter,\n        startTime,\n        endTime,\n    }: {\n        type: 'customer' | 'revenue' | 'delivery';\n        storeId: string;\n        filter: string;\n        startTime: number;\n        endTime: number;\n    }): Promise<any> => {\n        const url = `${baseUrl(storeId)}/${type}`;\n\n        const response = await axios({\n            method: 'GET',\n            url,\n            params: {\n                startTime,\n                endTime,\n                filter,\n            },\n        });\n\n        return response.data;\n    },\n\n    // reportCustomer: async ({\n    //     storeId,\n    //     filter,\n    //     startTime,\n    //     endTime,\n    // }: {\n    //     storeId: string;\n    //     filter: string;\n    //     startTime: number;\n    //     endTime: number;\n    // }): Promise<any> => {\n    //     const url = `${baseUrl(storeId)}/customer`;\n\n    //     const response = await axios({\n    //         method: 'GET',\n    //         url,\n    //         params: {\n    //             startTime,\n    //             endTime,\n    //             filter,\n    //         },\n    //     });\n\n    //     return response.data;\n    // },\n\n    // reportRevenue: async ({\n    //     storeId,\n    //     filter,\n    //     startTime,\n    //     endTime,\n    // }: {\n    //     storeId: string;\n    //     filter: string;\n    //     startTime: number;\n    //     endTime: number;\n    // }): Promise<any> => {\n    //     const url = `${baseUrl(storeId)}/revenue`;\n\n    //     const response = await axios({\n    //         method: 'GET',\n    //         url,\n    //         params: {\n    //             startTime,\n    //             endTime,\n    //             filter,\n    //         },\n    //     });\n\n    //     return response.data;\n    // },\n\n    // reportDelivery: async ({\n    //     storeId,\n    //     filter,\n    //     startTime,\n    //     endTime,\n    // }: {\n    //     storeId: string;\n    //     filter: string;\n    //     startTime: number;\n    //     endTime: number;\n    // }): Promise<any> => {\n    //     const url = `${baseUrl(storeId)}/revenue`;\n\n    //     const response = await axios({\n    //         method: 'GET',\n    //         url,\n    //         params: {\n    //             startTime,\n    //             endTime,\n    //             filter,\n    //         },\n    //     });\n\n    //     return response.data;\n    // },\n};\n"]},"metadata":{},"sourceType":"module"}