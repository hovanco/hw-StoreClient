{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\n\nconst useClickOutside = (elRef, callback) => {\n  _s();\n\n  const callbackRef = useRef();\n  callbackRef.current = callback;\n  useEffect(() => {\n    const handleOutClick = e => {\n      var _elRef$current;\n\n      if (!(elRef === null || elRef === void 0 ? void 0 : (_elRef$current = elRef.current) === null || _elRef$current === void 0 ? void 0 : _elRef$current.contains(e.target)) && callbackRef.current) {\n        callbackRef.current(e);\n      }\n    };\n\n    document.addEventListener('click', handleOutClick, true);\n    return () => {\n      document.removeEventListener('click', handleOutClick, true);\n    };\n  }, [callbackRef, elRef]);\n};\n\n_s(useClickOutside, \"w2NYHMIDbKnRziekrLIRqvurYl0=\");\n\nexport default useClickOutside;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/hook/useClickOutside.ts"],"names":["useEffect","useRef","useClickOutside","elRef","callback","callbackRef","current","handleOutClick","e","contains","target","document","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAaC,QAAb,KAA+B;AAAA;;AACnD,QAAMC,WAAW,GAAGJ,MAAM,EAA1B;AAEAI,EAAAA,WAAW,CAACC,OAAZ,GAAsBF,QAAtB;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,cAAc,GAAIC,CAAD,IAAY;AAAA;;AAC/B,UAAI,EAACL,KAAD,aAACA,KAAD,yCAACA,KAAK,CAAEG,OAAR,mDAAC,eAAgBG,QAAhB,CAAyBD,CAAC,CAACE,MAA3B,CAAD,KAAuCL,WAAW,CAACC,OAAvD,EAAgE;AAC5DD,QAAAA,WAAW,CAACC,OAAZ,CAAoBE,CAApB;AACH;AACJ,KAJD;;AAMAG,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCL,cAAnC,EAAmD,IAAnD;AAEA,WAAO,MAAM;AACTI,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCN,cAAtC,EAAsD,IAAtD;AACH,KAFD;AAGH,GAZQ,EAYN,CAACF,WAAD,EAAcF,KAAd,CAZM,CAAT;AAaH,CAlBD;;GAAMD,e;;AAoBN,eAAeA,eAAf","sourcesContent":["import { useEffect, useRef } from 'react';\n\nconst useClickOutside = (elRef: any, callback: any) => {\n    const callbackRef = useRef<any>();\n\n    callbackRef.current = callback;\n\n    useEffect(() => {\n        const handleOutClick = (e: any) => {\n            if (!elRef?.current?.contains(e.target) && callbackRef.current) {\n                callbackRef.current(e);\n            }\n        };\n\n        document.addEventListener('click', handleOutClick, true);\n\n        return () => {\n            document.removeEventListener('click', handleOutClick, true);\n        };\n    }, [callbackRef, elRef]);\n};\n\nexport default useClickOutside;\n"]},"metadata":{},"sourceType":"module"}