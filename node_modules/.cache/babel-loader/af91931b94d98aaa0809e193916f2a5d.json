{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/order/list/state/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as queryString from 'query-string';\nimport React, { useEffect, createContext, useContext, useMemo, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router';\nimport { Loading } from '../../../../components';\nimport { storeAction } from '../../../../reducers/storeState/action';\nimport reducer, { initialState } from './reducer';\nimport types from './types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initalContext = {\n  state: initialState,\n  dispatch: () => null\n};\nconst OrdersContext = /*#__PURE__*/createContext(initalContext);\nconst FILTER_ARRAY = ['search', 'page', 'limit', 'status', 'source', 'serviceId', 'deliveryDate'];\n\nconst OrderContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const location = useLocation();\n  const history = useHistory();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    status,\n    search,\n    page,\n    source,\n    serviceId,\n    deliveryDate,\n    limit,\n    progress\n  } = state;\n  useEffect(() => {\n    const searchQuery = queryString.parse(location.search);\n    let filter = {};\n    Object.keys(searchQuery).forEach(key => {\n      if (FILTER_ARRAY.includes(key)) {\n        filter = { ...filter,\n          [key]: searchQuery[key]\n        };\n      }\n    });\n    dispatch({\n      type: types.RELOAD_FILTER,\n      payload: filter\n    });\n  }, []);\n  useEffect(() => {\n    if (!progress) {\n      const searchString = queryString.stringify({\n        status,\n        search: search && search.length > 0 ? search : undefined,\n        page,\n        source,\n        limit,\n        serviceId,\n        deliveryDate\n      });\n      history.push({\n        pathname: location.pathname,\n        search: searchString\n      });\n    }\n  }, [status, search, page, source, serviceId, deliveryDate, limit, progress]);\n  const value = useMemo(() => ({\n    state,\n    dispatch\n  }), [state]);\n\n  if (progress) {\n    return /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(OrdersContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 12\n  }, this);\n};\n\n_s(OrderContextProvider, \"HIuBcPEHY7EnRNbCkOA/CQSuwbY=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = OrderContextProvider;\n\nconst statusFormat = status => status ? Number(status) : undefined;\n\nconst serviceIdFormat = serviceId => serviceId ? Number(serviceId) : undefined;\n\nexport const useOrdersContext = () => {\n  _s2();\n\n  const dispatchGlobal = useDispatch();\n  const storeObj = useSelector(state => state.store.data);\n  const value = useContext(OrdersContext);\n  const {\n    state,\n    dispatch\n  } = value;\n\n  const changeTextSearch = text => {\n    dispatch({\n      type: types.CHANGE_TEXT_SEARCH,\n      payload: text\n    });\n  };\n\n  const changeStatus = async status => {\n    await dispatch({\n      type: types.CHANGE_STATUS,\n      payload: status\n    });\n  };\n\n  const changeFilter = ({\n    source,\n    serviceId,\n    deliveryDate\n  }) => {\n    dispatch({\n      type: types.CHANGE_FILTER,\n      payload: {\n        source,\n        serviceId,\n        deliveryDate\n      }\n    });\n  };\n\n  const removeFilter = value => {\n    dispatch({\n      type: types.REMOVE_FILTER,\n      payload: value\n    });\n  };\n\n  const changePagination = ({\n    page,\n    limit\n  }) => {\n    dispatch({\n      type: types.CHANGE_PAGINATION,\n      payload: {\n        page,\n        limit\n      }\n    });\n  };\n\n  const fetchDataCallback = ({\n    limit,\n    page,\n    status,\n    source,\n    serviceId,\n    search,\n    soft = 'createdAt',\n    direction = 'desc',\n    deliveryDate\n  }) => {\n    if (storeObj._id) {\n      window.scrollTo(0, 0);\n      return dispatchGlobal(storeAction.getOrders({\n        id: storeObj._id,\n        limit: limit || state.limit,\n        page: page || 1,\n        status: statusFormat(status),\n        source,\n        serviceId: serviceIdFormat(serviceId),\n        search: search !== undefined ? search : state.search,\n        soft,\n        direction,\n        deliveryDate\n      }));\n    }\n\n    return;\n  };\n\n  return { ...state,\n    changeTextSearch,\n    changeStatus,\n    changePagination,\n    fetchDataCallback,\n    changeFilter,\n    removeFilter\n  };\n};\n\n_s2(useOrdersContext, \"7rOJ/neU8VtRRKUsgcGJlnmgiUE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport default OrderContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderContextProvider\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/order/list/state/context.tsx"],"names":["queryString","React","useEffect","createContext","useContext","useMemo","useReducer","useDispatch","useSelector","useHistory","useLocation","Loading","storeAction","reducer","initialState","types","initalContext","state","dispatch","OrdersContext","FILTER_ARRAY","OrderContextProvider","children","location","history","status","search","page","source","serviceId","deliveryDate","limit","progress","searchQuery","parse","filter","Object","keys","forEach","key","includes","type","RELOAD_FILTER","payload","searchString","stringify","length","undefined","push","pathname","value","statusFormat","Number","serviceIdFormat","useOrdersContext","dispatchGlobal","storeObj","store","data","changeTextSearch","text","CHANGE_TEXT_SEARCH","changeStatus","CHANGE_STATUS","changeFilter","CHANGE_FILTER","removeFilter","REMOVE_FILTER","changePagination","CHANGE_PAGINATION","fetchDataCallback","soft","direction","_id","window","scrollTo","getOrders","id"],"mappings":"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","sourcesContent":["import * as queryString from 'query-string';\nimport React, {\n    useEffect,\n    createContext,\n    FC,\n    ReactNode,\n    useContext,\n    useMemo,\n    useReducer,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router';\nimport { Loading } from '../../../../components';\nimport { storeAction } from '../../../../reducers/storeState/action';\nimport { IState } from '../../../../store/rootReducer';\nimport { IContextOrders } from './interface';\nimport reducer, { initialState } from './reducer';\nimport types from './types';\n\nconst initalContext = {\n    state: initialState,\n    dispatch: () => null,\n};\n\nconst OrdersContext = createContext<IContextOrders>(initalContext);\n\ninterface Props {\n    children: ReactNode;\n}\n\nconst FILTER_ARRAY = ['search', 'page', 'limit', 'status', 'source', 'serviceId', 'deliveryDate'];\n\nconst OrderContextProvider: FC<Props> = ({ children }) => {\n    const location = useLocation();\n    const history = useHistory();\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const { status, search, page, source, serviceId, deliveryDate, limit, progress } = state;\n\n    useEffect(() => {\n        const searchQuery = queryString.parse(location.search);\n        let filter = {};\n\n        Object.keys(searchQuery).forEach((key: string) => {\n            if (FILTER_ARRAY.includes(key)) {\n                filter = {\n                    ...filter,\n                    [key]: searchQuery[key],\n                };\n            }\n        });\n\n        dispatch({\n            type: types.RELOAD_FILTER,\n            payload: filter,\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!progress) {\n            const searchString = queryString.stringify({\n                status,\n                search: search && search.length > 0 ? search : undefined,\n                page,\n                source,\n                limit,\n                serviceId,\n                deliveryDate,\n            });\n\n            history.push({\n                pathname: location.pathname,\n                search: searchString,\n            });\n        }\n    }, [status, search, page, source, serviceId, deliveryDate, limit, progress]);\n\n    const value = useMemo(() => ({ state, dispatch }), [state]);\n\n    if (progress) {\n        return <Loading full />;\n    }\n\n    return <OrdersContext.Provider value={value}>{children}</OrdersContext.Provider>;\n};\n\nconst statusFormat = (status?: string) => (status ? Number(status) : undefined);\nconst serviceIdFormat = (serviceId?: string) => (serviceId ? Number(serviceId) : undefined);\n\nexport const useOrdersContext = () => {\n    const dispatchGlobal = useDispatch();\n    const storeObj = useSelector((state: IState) => state.store.data);\n    const value = useContext(OrdersContext);\n\n    const { state, dispatch } = value;\n\n    const changeTextSearch = (text: string) => {\n        dispatch({\n            type: types.CHANGE_TEXT_SEARCH,\n            payload: text,\n        });\n    };\n\n    const changeStatus = async (status?: string) => {\n        await dispatch({\n            type: types.CHANGE_STATUS,\n            payload: status,\n        });\n    };\n\n    const changeFilter = ({\n        source,\n        serviceId,\n        deliveryDate,\n    }: {\n        source?: string;\n        serviceId?: string;\n        deliveryDate?: number;\n    }) => {\n        dispatch({\n            type: types.CHANGE_FILTER,\n            payload: {\n                source,\n                serviceId,\n                deliveryDate,\n            },\n        });\n    };\n\n    const removeFilter = (value: string) => {\n        dispatch({\n            type: types.REMOVE_FILTER,\n            payload: value,\n        });\n    };\n\n    const changePagination = ({ page, limit }: { page: number; limit: number }) => {\n        dispatch({\n            type: types.CHANGE_PAGINATION,\n            payload: { page, limit },\n        });\n    };\n\n    const fetchDataCallback = ({\n        limit,\n        page,\n        status,\n        source,\n        serviceId,\n        search,\n        soft = 'createdAt',\n        direction = 'desc',\n        deliveryDate,\n    }: {\n        limit?: number;\n        page?: number;\n        status?: string;\n        source?: string;\n        serviceId?: string;\n        search?: string;\n        soft?: string;\n        direction?: 'desc' | 'asc';\n        deliveryDate?: number;\n    }) => {\n        if (storeObj._id) {\n            window.scrollTo(0, 0);\n            return dispatchGlobal(\n                storeAction.getOrders({\n                    id: storeObj._id,\n                    limit: limit || state.limit,\n                    page: page || 1,\n                    status: statusFormat(status),\n                    source,\n                    serviceId: serviceIdFormat(serviceId),\n                    search: search !== undefined ? search : state.search,\n                    soft,\n                    direction,\n                    deliveryDate,\n                })\n            );\n        }\n\n        return;\n    };\n\n    return {\n        ...state,\n        changeTextSearch,\n        changeStatus,\n        changePagination,\n        fetchDataCallback,\n        changeFilter,\n        removeFilter,\n    };\n};\n\nexport default OrderContextProvider;\n"]},"metadata":{},"sourceType":"module"}