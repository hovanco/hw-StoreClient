{"ast":null,"code":"import axios from './axios-client';\nconst basePath = '/store/v1/stores';\nexport default {\n  getCustomers: async ({\n    storeId,\n    page,\n    limit,\n    source,\n    search,\n    sort,\n    direction,\n    dateOfBirth,\n    filterDateBy,\n    fromAt,\n    toAt,\n    gender\n  }) => {\n    const response = await axios({\n      method: 'GET',\n      url: `${basePath}/${storeId}/customers`,\n      params: {\n        page,\n        limit,\n        source,\n        search,\n        sort,\n        direction,\n        dateOfBirth,\n        filterDateBy,\n        fromAt,\n        toAt,\n        gender\n      }\n    });\n    return response.data;\n  },\n  getCustomer: async ({\n    storeId,\n    customerId\n  }) => {\n    const response = await axios({\n      method: 'GET',\n      url: `${basePath}/${storeId}/customers/${customerId}`\n    });\n    return response.data;\n  },\n  createCustomer: async ({\n    storeId,\n    formData\n  }) => {\n    const response = await axios({\n      method: 'POST',\n      url: `${basePath}/${storeId}/customers`,\n      data: formData\n    });\n    return response.data;\n  },\n  updateCustomer: async ({\n    storeId,\n    customerId,\n    formData\n  }) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/customers/${customerId}`,\n      data: formData\n    });\n    return response.data;\n  },\n  deleteCustomer: async ({\n    storeId,\n    customerId\n  }) => {\n    const response = await axios({\n      method: 'DELETE',\n      url: `${basePath}/${storeId}/customers/${customerId}`\n    });\n    return response.data;\n  }\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/api/customer-api.ts"],"names":["axios","basePath","getCustomers","storeId","page","limit","source","search","sort","direction","dateOfBirth","filterDateBy","fromAt","toAt","gender","response","method","url","params","data","getCustomer","customerId","createCustomer","formData","updateCustomer","deleteCustomer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AAGA,MAAMC,QAAQ,GAAG,kBAAjB;AAEA,eAAe;AACXC,EAAAA,YAAY,EAAE,OAAO;AACjBC,IAAAA,OADiB;AAEjBC,IAAAA,IAFiB;AAGjBC,IAAAA,KAHiB;AAIjBC,IAAAA,MAJiB;AAKjBC,IAAAA,MALiB;AAMjBC,IAAAA,IANiB;AAOjBC,IAAAA,SAPiB;AAQjBC,IAAAA,WARiB;AASjBC,IAAAA,YATiB;AAUjBC,IAAAA,MAViB;AAWjBC,IAAAA,IAXiB;AAYjBC,IAAAA;AAZiB,GAAP,KAgBR;AACF,UAAMC,QAAQ,GAAG,MAAMf,KAAK,CAAC;AACzBgB,MAAAA,MAAM,EAAE,KADiB;AAEzBC,MAAAA,GAAG,EAAG,GAAEhB,QAAS,IAAGE,OAAQ,YAFH;AAGzBe,MAAAA,MAAM,EAAE;AACJd,QAAAA,IADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA,MAHI;AAIJC,QAAAA,MAJI;AAKJC,QAAAA,IALI;AAMJC,QAAAA,SANI;AAOJC,QAAAA,WAPI;AAQJC,QAAAA,YARI;AASJC,QAAAA,MATI;AAUJC,QAAAA,IAVI;AAWJC,QAAAA;AAXI;AAHiB,KAAD,CAA5B;AAkBA,WAAOC,QAAQ,CAACI,IAAhB;AACH,GArCU;AAuCXC,EAAAA,WAAW,EAAE,OAAO;AAChBjB,IAAAA,OADgB;AAEhBkB,IAAAA;AAFgB,GAAP,KAMa;AACtB,UAAMN,QAAQ,GAAG,MAAMf,KAAK,CAAC;AACzBgB,MAAAA,MAAM,EAAE,KADiB;AAEzBC,MAAAA,GAAG,EAAG,GAAEhB,QAAS,IAAGE,OAAQ,cAAakB,UAAW;AAF3B,KAAD,CAA5B;AAKA,WAAON,QAAQ,CAACI,IAAhB;AACH,GApDU;AAsDXG,EAAAA,cAAc,EAAE,OAAO;AACnBnB,IAAAA,OADmB;AAEnBoB,IAAAA;AAFmB,GAAP,KAMU;AACtB,UAAMR,QAAQ,GAAG,MAAMf,KAAK,CAAC;AACzBgB,MAAAA,MAAM,EAAE,MADiB;AAEzBC,MAAAA,GAAG,EAAG,GAAEhB,QAAS,IAAGE,OAAQ,YAFH;AAGzBgB,MAAAA,IAAI,EAAEI;AAHmB,KAAD,CAA5B;AAMA,WAAOR,QAAQ,CAACI,IAAhB;AACH,GApEU;AAsEXK,EAAAA,cAAc,EAAE,OAAO;AACnBrB,IAAAA,OADmB;AAEnBkB,IAAAA,UAFmB;AAGnBE,IAAAA;AAHmB,GAAP,KAQU;AACtB,UAAMR,QAAQ,GAAG,MAAMf,KAAK,CAAC;AACzBgB,MAAAA,MAAM,EAAE,KADiB;AAEzBC,MAAAA,GAAG,EAAG,GAAEhB,QAAS,IAAGE,OAAQ,cAAakB,UAAW,EAF3B;AAGzBF,MAAAA,IAAI,EAAEI;AAHmB,KAAD,CAA5B;AAMA,WAAOR,QAAQ,CAACI,IAAhB;AACH,GAtFU;AAwFXM,EAAAA,cAAc,EAAE,OAAO;AACnBtB,IAAAA,OADmB;AAEnBkB,IAAAA;AAFmB,GAAP,KAMU;AACtB,UAAMN,QAAQ,GAAG,MAAMf,KAAK,CAAC;AACzBgB,MAAAA,MAAM,EAAE,QADiB;AAEzBC,MAAAA,GAAG,EAAG,GAAEhB,QAAS,IAAGE,OAAQ,cAAakB,UAAW;AAF3B,KAAD,CAA5B;AAKA,WAAON,QAAQ,CAACI,IAAhB;AACH;AArGU,CAAf","sourcesContent":["import axios from './axios-client';\nimport { ICustomer, ICustomersParams, ICreateCustomerParams } from '../models';\n\nconst basePath = '/store/v1/stores';\n\nexport default {\n    getCustomers: async ({\n        storeId,\n        page,\n        limit,\n        source,\n        search,\n        sort,\n        direction,\n        dateOfBirth,\n        filterDateBy,\n        fromAt,\n        toAt,\n        gender,\n    }: ICustomersParams): Promise<{\n        data: ICustomer[];\n        total: number;\n    }> => {\n        const response = await axios({\n            method: 'GET',\n            url: `${basePath}/${storeId}/customers`,\n            params: {\n                page,\n                limit,\n                source,\n                search,\n                sort,\n                direction,\n                dateOfBirth,\n                filterDateBy,\n                fromAt,\n                toAt,\n                gender,\n            },\n        });\n\n        return response.data;\n    },\n\n    getCustomer: async ({\n        storeId,\n        customerId,\n    }: {\n        storeId: string;\n        customerId: string;\n    }): Promise<ICustomer> => {\n        const response = await axios({\n            method: 'GET',\n            url: `${basePath}/${storeId}/customers/${customerId}`,\n        });\n\n        return response.data;\n    },\n\n    createCustomer: async ({\n        storeId,\n        formData,\n    }: {\n        storeId: string;\n        formData: ICreateCustomerParams;\n    }): Promise<ICustomer> => {\n        const response = await axios({\n            method: 'POST',\n            url: `${basePath}/${storeId}/customers`,\n            data: formData,\n        });\n\n        return response.data;\n    },\n\n    updateCustomer: async ({\n        storeId,\n        customerId,\n        formData,\n    }: {\n        storeId: string;\n        customerId: string;\n        formData: ICreateCustomerParams;\n    }): Promise<ICustomer> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/customers/${customerId}`,\n            data: formData,\n        });\n\n        return response.data;\n    },\n\n    deleteCustomer: async ({\n        storeId,\n        customerId,\n    }: {\n        storeId: string;\n        customerId: string;\n    }): Promise<ICustomer> => {\n        const response = await axios({\n            method: 'DELETE',\n            url: `${basePath}/${storeId}/customers/${customerId}`,\n        });\n\n        return response.data;\n    },\n};\n"]},"metadata":{},"sourceType":"module"}