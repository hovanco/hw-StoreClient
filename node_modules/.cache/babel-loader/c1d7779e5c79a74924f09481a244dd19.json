{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/order/create/state/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { get, pick } from 'lodash';\nimport React, { createContext, useContext, useEffect, useMemo, useReducer } from 'react';\nimport { EDeliveryServiceIds } from '../../../../models';\nimport { EShipTypes, EStatusPage } from './interface';\nimport reducer, { initialReducer } from './reducer';\nimport types from './types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  order: undefined,\n  statusPage: undefined,\n  state: initialReducer,\n  dispatch: () => {}\n};\nconst OrderNewContext = /*#__PURE__*/createContext(initialContext);\n\nconst ProviderOrderNewContext = ({\n  children,\n  order,\n  statusPage = EStatusPage.NEW\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialReducer);\n  const value = useMemo(() => ({\n    state,\n    dispatch,\n    order,\n    statusPage\n  }), [state, order, statusPage]);\n  useEffect(() => {\n    if (order) {\n      const products = (order.products || []).map(product => ({ ...product.productId,\n        price: product.price,\n        count: product.count\n      }));\n      const infoDelivery = pick(order.customer, ['name', 'phoneNo', 'address', 'ward', 'wardName', 'district', 'districtName', 'province', 'provinceName']);\n      const shipType = [EDeliveryServiceIds.GHN, EDeliveryServiceIds.GHTK].includes(get(order, 'deliveryOptions.serviceId')) ? EShipTypes.SendShipping : EShipTypes.SelfTransport;\n      const shipmentFee = get(order, 'deliveryOptions.shipmentFee');\n      const shipmentFeeForCustomer = get(order, 'deliveryOptions.shipmentFeeForCustomer');\n      const discountBy = get(order, 'deliveryOptions.discountBy');\n      const discount = get(order, 'deliveryOptions.discount');\n      const noteForDelivery = get(order, 'deliveryOptions.noteForDelivery');\n      const customerNote = get(order, 'deliveryOptions.customerNote');\n      const source = get(order, 'source');\n      const initialState = {\n        products,\n        customer: order.customer,\n        infoDelivery,\n        shipType,\n        warehouseId: get(order, 'warehouseId._id'),\n        shipmentFee,\n        shipmentFeeForCustomer,\n        discountBy,\n        discount,\n        noteForDelivery,\n        customerNote,\n        ship: undefined,\n        source,\n        paymentType: order.paymentType,\n        paymentMethod: order.paymentMethod\n      };\n      dispatch({\n        type: types.INIT_STATE,\n        payload: initialState\n      });\n    } // eslint-disable-next-line\n\n  }, []);\n  return /*#__PURE__*/_jsxDEV(OrderNewContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProviderOrderNewContext, \"GRk1alTVePZN8/Xa261klq+Yomg=\");\n\n_c = ProviderOrderNewContext;\n\nconst useOrderNew = () => {\n  _s2();\n\n  const value = useContext(OrderNewContext);\n  const {\n    state,\n    dispatch,\n    order,\n    statusPage\n  } = value;\n\n  const updateOrder = order => {\n    dispatch({\n      types: types.UPDATE_ORDER,\n      payload: order\n    });\n  };\n\n  const addProducts = products => {\n    dispatch({\n      type: types.ADD_PRODUCTS,\n      payload: products\n    });\n  };\n\n  const selectProduct = product => {\n    dispatch({\n      type: types.ADD_PRODUCT,\n      payload: { ...product,\n        count: 1\n      }\n    });\n  };\n\n  const removeProduct = productId => {\n    dispatch({\n      type: types.REMOVE_PRODUCT,\n      payload: productId\n    });\n  };\n\n  const updateCount = product => {\n    dispatch({\n      type: types.UPDATE_COUNT_PRODUCT,\n      payload: product\n    });\n  };\n\n  const selectCustomer = customer => {\n    dispatch({\n      type: types.ADD_CUSTOMER,\n      payload: customer\n    });\n  };\n\n  const removeCustomer = () => {\n    dispatch({\n      type: types.REMOVE_CUSTOMER\n    });\n  };\n\n  const updateInfoDelivery = infoDelivery => {\n    dispatch({\n      type: types.UPDATE_INFO_DELIVERY,\n      payload: infoDelivery\n    });\n  };\n\n  const changeShipType = shipType => {\n    dispatch({\n      type: types.CHANGE_SHIP_TYPE,\n      payload: shipType\n    });\n  };\n\n  const selectWarehouse = warehouseId => {\n    dispatch({\n      type: types.CHANGE_WAREHOUSE,\n      payload: warehouseId\n    });\n  };\n\n  const changeValueField = data => {\n    dispatch({\n      type: types.CHANGE_VALUE_FIELD,\n      payload: data\n    });\n  };\n\n  const selectShip = ship => {\n    dispatch({\n      type: types.CHANGE_SHIP,\n      payload: ship\n    });\n  };\n\n  const resetOrder = () => {\n    dispatch({\n      type: types.RESET_NEW_ORDER\n    });\n  };\n\n  const changeDelivery = () => {\n    dispatch({\n      type: types.CHANGE_DELIVERY\n    });\n  };\n\n  const initOrderState = data => {\n    dispatch({\n      type: types.INIT_STATE,\n      payload: data\n    });\n  };\n\n  return { ...state,\n    order,\n    statusPage,\n    selectProduct,\n    addProducts,\n    removeProduct,\n    updateCount,\n    selectCustomer,\n    removeCustomer,\n    updateInfoDelivery,\n    changeShipType,\n    selectShip,\n    selectWarehouse,\n    changeValueField,\n    resetOrder,\n    updateOrder,\n    changeDelivery,\n    initOrderState\n  };\n};\n\n_s2(useOrderNew, \"ksutO2/Ix3UeCrGnhyM+QEP505Y=\");\n\nexport { ProviderOrderNewContext as default, useOrderNew };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderOrderNewContext\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/order/create/state/context.tsx"],"names":["get","pick","React","createContext","useContext","useEffect","useMemo","useReducer","EDeliveryServiceIds","EShipTypes","EStatusPage","reducer","initialReducer","types","initialContext","order","undefined","statusPage","state","dispatch","OrderNewContext","ProviderOrderNewContext","children","NEW","value","products","map","product","productId","price","count","infoDelivery","customer","shipType","GHN","GHTK","includes","SendShipping","SelfTransport","shipmentFee","shipmentFeeForCustomer","discountBy","discount","noteForDelivery","customerNote","source","initialState","warehouseId","ship","paymentType","paymentMethod","type","INIT_STATE","payload","useOrderNew","updateOrder","UPDATE_ORDER","addProducts","ADD_PRODUCTS","selectProduct","ADD_PRODUCT","removeProduct","REMOVE_PRODUCT","updateCount","UPDATE_COUNT_PRODUCT","selectCustomer","ADD_CUSTOMER","removeCustomer","REMOVE_CUSTOMER","updateInfoDelivery","UPDATE_INFO_DELIVERY","changeShipType","CHANGE_SHIP_TYPE","selectWarehouse","CHANGE_WAREHOUSE","changeValueField","data","CHANGE_VALUE_FIELD","selectShip","CHANGE_SHIP","resetOrder","RESET_NEW_ORDER","changeDelivery","CHANGE_DELIVERY","initOrderState","default"],"mappings":"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","sourcesContent":["import { get, pick } from 'lodash';\nimport React, {\n    createContext,\n    FC,\n    ReactNode,\n    useContext,\n    useEffect,\n    useMemo,\n    useReducer,\n} from 'react';\nimport { EDeliveryServiceIds, ICustomer, IOrder } from '../../../../models';\nimport { IContext, IInfoDelivery, IProductState, EShipTypes, EStatusPage } from './interface';\nimport reducer, { initialReducer } from './reducer';\nimport types from './types';\n\nconst initialContext = {\n    order: undefined,\n    statusPage: undefined,\n    state: initialReducer,\n    dispatch: () => {},\n};\n\nconst OrderNewContext = createContext<IContext>(initialContext);\n\ninterface Props {\n    children: ReactNode;\n    order?: IOrder;\n    statusPage?: EStatusPage;\n}\n\nconst ProviderOrderNewContext: FC<Props> = ({ children, order, statusPage = EStatusPage.NEW }) => {\n    const [state, dispatch] = useReducer(reducer, initialReducer);\n\n    const value = useMemo(() => ({ state, dispatch, order, statusPage }), [\n        state,\n        order,\n        statusPage,\n    ]);\n\n    useEffect(() => {\n        if (order) {\n            const products = (order.products || []).map((product: any) => ({\n                ...product.productId,\n                price: product.price,\n                count: product.count,\n            }));\n\n            const infoDelivery = pick(order.customer, [\n                'name',\n                'phoneNo',\n                'address',\n                'ward',\n                'wardName',\n                'district',\n                'districtName',\n                'province',\n                'provinceName',\n            ]);\n\n            const shipType = [EDeliveryServiceIds.GHN, EDeliveryServiceIds.GHTK].includes(\n                get(order, 'deliveryOptions.serviceId')\n            )\n                ? EShipTypes.SendShipping\n                : EShipTypes.SelfTransport;\n\n            const shipmentFee = get(order, 'deliveryOptions.shipmentFee');\n            const shipmentFeeForCustomer = get(order, 'deliveryOptions.shipmentFeeForCustomer');\n\n            const discountBy = get(order, 'deliveryOptions.discountBy');\n            const discount = get(order, 'deliveryOptions.discount');\n            const noteForDelivery = get(order, 'deliveryOptions.noteForDelivery');\n            const customerNote = get(order, 'deliveryOptions.customerNote');\n            const source = get(order, 'source');\n\n            const initialState = {\n                products,\n                customer: order.customer,\n                infoDelivery,\n                shipType,\n                warehouseId: get(order, 'warehouseId._id'),\n                shipmentFee,\n                shipmentFeeForCustomer,\n                discountBy,\n                discount,\n                noteForDelivery,\n                customerNote,\n                ship: undefined,\n                source,\n                paymentType: order.paymentType,\n                paymentMethod: order.paymentMethod,\n            };\n\n            dispatch({\n                type: types.INIT_STATE,\n                payload: initialState,\n            });\n        }\n\n        // eslint-disable-next-line\n    }, []);\n\n    return <OrderNewContext.Provider value={value}>{children}</OrderNewContext.Provider>;\n};\n\nconst useOrderNew = () => {\n    const value = useContext(OrderNewContext);\n\n    const { state, dispatch, order, statusPage } = value;\n\n    const updateOrder = (order: IOrder) => {\n        dispatch({\n            types: types.UPDATE_ORDER,\n            payload: order,\n        });\n    };\n\n    const addProducts = (products: IProductState[]) => {\n        dispatch({\n            type: types.ADD_PRODUCTS,\n            payload: products,\n        });\n    };\n\n    const selectProduct = (product: IProductState) => {\n        dispatch({\n            type: types.ADD_PRODUCT,\n            payload: { ...product, count: 1 },\n        });\n    };\n\n    const removeProduct = (productId: string) => {\n        dispatch({\n            type: types.REMOVE_PRODUCT,\n            payload: productId,\n        });\n    };\n\n    const updateCount = (product: IProductState) => {\n        dispatch({\n            type: types.UPDATE_COUNT_PRODUCT,\n            payload: product,\n        });\n    };\n\n    const selectCustomer = (customer: ICustomer) => {\n        dispatch({\n            type: types.ADD_CUSTOMER,\n            payload: customer,\n        });\n    };\n\n    const removeCustomer = () => {\n        dispatch({\n            type: types.REMOVE_CUSTOMER,\n        });\n    };\n\n    const updateInfoDelivery = (infoDelivery: IInfoDelivery) => {\n        dispatch({\n            type: types.UPDATE_INFO_DELIVERY,\n            payload: infoDelivery,\n        });\n    };\n\n    const changeShipType = (shipType: EShipTypes) => {\n        dispatch({\n            type: types.CHANGE_SHIP_TYPE,\n            payload: shipType,\n        });\n    };\n\n    const selectWarehouse = (warehouseId: string) => {\n        dispatch({\n            type: types.CHANGE_WAREHOUSE,\n            payload: warehouseId,\n        });\n    };\n\n    const changeValueField = (data: { field: string; value: any }) => {\n        dispatch({\n            type: types.CHANGE_VALUE_FIELD,\n            payload: data,\n        });\n    };\n\n    const selectShip = (ship: any) => {\n        dispatch({\n            type: types.CHANGE_SHIP,\n            payload: ship,\n        });\n    };\n\n    const resetOrder = () => {\n        dispatch({\n            type: types.RESET_NEW_ORDER,\n        });\n    };\n\n    const changeDelivery = () => {\n        dispatch({\n            type: types.CHANGE_DELIVERY,\n        });\n    };\n\n    const initOrderState = (data: any) => {\n        dispatch({\n            type: types.INIT_STATE,\n            payload: data,\n        });\n    };\n\n    return {\n        ...state,\n        order,\n        statusPage,\n        selectProduct,\n        addProducts,\n        removeProduct,\n        updateCount,\n        selectCustomer,\n        removeCustomer,\n        updateInfoDelivery,\n        changeShipType,\n        selectShip,\n        selectWarehouse,\n        changeValueField,\n        resetOrder,\n        updateOrder,\n        changeDelivery,\n        initOrderState,\n    };\n};\n\nexport { ProviderOrderNewContext as default, useOrderNew };\n"]},"metadata":{},"sourceType":"module"}