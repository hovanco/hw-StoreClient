{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/homepage/state/user-guide/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useMemo, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getUserStorePreference } from '../../../../api/user-store-preference-api';\nimport { Loading } from '../../../../components';\nimport { initialStateGuide, reducerUserGuide } from './reducer';\nimport types from './types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  state: initialStateGuide,\n  dispatch: () => {}\n};\nconst UserGuideContext = /*#__PURE__*/createContext(initialContext);\n\nconst ProviderUserGuide = ({\n  children\n}) => {\n  _s();\n\n  const store = useSelector(state => state.store.data);\n  const [state, dispatch] = useReducer(reducerUserGuide, initialStateGuide);\n  useEffect(() => {\n    async function loadUserStorePreferences(storeId) {\n      try {\n        dispatch({\n          type: types.LOADING\n        });\n        const response = await getUserStorePreference(storeId);\n\n        if (!response.data) {\n          dispatch({\n            type: types.LOAD_DONE\n          });\n          return;\n        }\n\n        dispatch({\n          type: types.LOAD_DONE,\n          payload: response.data\n        });\n        return;\n      } catch (error) {\n        dispatch({\n          type: types.LOAD_DONE\n        });\n      }\n    }\n\n    if (store._id) {\n      loadUserStorePreferences(store._id);\n    }\n  }, [store._id]);\n  const value = useMemo(() => ({\n    state,\n    dispatch\n  }), [state]);\n\n  if (state.loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(UserGuideContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProviderUserGuide, \"ZqMGijIRjRsjoK4u9TNMTwGAr5o=\", false, function () {\n  return [useSelector];\n});\n\n_c = ProviderUserGuide;\n\nconst useUserGuide = () => {\n  _s2();\n\n  const {\n    state,\n    dispatch\n  } = useContext(UserGuideContext);\n\n  const updateUserGuide = hideNewUserGuide => {\n    const userGuide = { ...state.userGuide,\n      hideNewUserGuide\n    };\n    dispatch({\n      type: types.UPDATE_USER_GUIDE,\n      payload: userGuide\n    });\n  };\n\n  return { ...state,\n    updateUserGuide\n  };\n};\n\n_s2(useUserGuide, \"QMdo+h1+fLbTriZQ0QN6uukzyow=\");\n\nexport { ProviderUserGuide, useUserGuide };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderUserGuide\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/homepage/state/user-guide/context.tsx"],"names":["React","createContext","useContext","useEffect","useMemo","useReducer","useSelector","getUserStorePreference","Loading","initialStateGuide","reducerUserGuide","types","initialContext","state","dispatch","UserGuideContext","ProviderUserGuide","children","store","data","loadUserStorePreferences","storeId","type","LOADING","response","LOAD_DONE","payload","error","_id","value","loading","useUserGuide","updateUserGuide","hideNewUserGuide","userGuide","UPDATE_USER_GUIDE"],"mappings":"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","sourcesContent":["import React, {\n    createContext,\n    FC,\n    ReactNode,\n    useContext,\n    useEffect,\n    useMemo,\n    useReducer,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { getUserStorePreference } from '../../../../api/user-store-preference-api';\nimport { Loading } from '../../../../components';\nimport { IState } from '../../../../store/rootReducer';\nimport { initialStateGuide, reducerUserGuide } from './reducer';\nimport types from './types';\n\nconst initialContext = {\n    state: initialStateGuide,\n    dispatch: () => {},\n};\ninterface IContext {\n    state: any;\n    dispatch: React.Dispatch<any>;\n}\nconst UserGuideContext = createContext<IContext>(initialContext);\n\ninterface Props {\n    children: ReactNode;\n}\n\nconst ProviderUserGuide: FC<Props> = ({ children }) => {\n    const store = useSelector((state: IState) => state.store.data);\n    const [state, dispatch] = useReducer(reducerUserGuide, initialStateGuide);\n\n    useEffect(() => {\n        async function loadUserStorePreferences(storeId: string) {\n            try {\n                dispatch({ type: types.LOADING });\n                const response = await getUserStorePreference(storeId);\n\n                if (!response.data) {\n                    dispatch({ type: types.LOAD_DONE });\n                    return;\n                }\n\n                dispatch({ type: types.LOAD_DONE, payload: response.data });\n                return;\n            } catch (error) {\n                dispatch({ type: types.LOAD_DONE });\n            }\n        }\n        if (store._id) {\n            loadUserStorePreferences(store._id);\n        }\n    }, [store._id]);\n\n    const value = useMemo(() => ({ state, dispatch }), [state]);\n\n    if (state.loading) {\n        return <Loading full />;\n    }\n\n    return <UserGuideContext.Provider value={value}>{children}</UserGuideContext.Provider>;\n};\n\nconst useUserGuide = () => {\n    const { state, dispatch } = useContext(UserGuideContext);\n\n    const updateUserGuide = (hideNewUserGuide: boolean) => {\n        const userGuide = {\n            ...state.userGuide,\n            hideNewUserGuide,\n        };\n        dispatch({\n            type: types.UPDATE_USER_GUIDE,\n            payload: userGuide,\n        });\n    };\n\n    return {\n        ...state,\n        updateUserGuide,\n    };\n};\n\nexport { ProviderUserGuide, useUserGuide };\n"]},"metadata":{},"sourceType":"module"}