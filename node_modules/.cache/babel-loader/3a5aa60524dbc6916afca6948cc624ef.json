{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/inventory/inventory-list/table.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useInventoryTable } from './context';\nimport { find } from 'lodash';\nimport { updateStock } from '../../../api/stock-api';\nimport { Row, Space, Typography, message } from 'antd';\nimport { InsaButton, InsaTable } from '../../../components';\nimport iconLocation from \"../../../assets/images/ic-location.svg\";\nimport InventoryColumnName from '../inventory-column-name';\nimport InventoryUpdateInput from './inventory-update-input';\nimport InventoryQuantity from './inventory-quantity';\nimport FilteredTags from './filtered-tags';\nimport './style.less';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InventoryTable = () => {\n  _s();\n\n  const {\n    pagination,\n    pageChange,\n    filter,\n    refreshData\n  } = useInventoryTable();\n  const stocks = useSelector(({\n    store\n  }) => store.stocks);\n  const warehouses = useSelector(({\n    store\n  }) => store.warehouses);\n  const {\n    data: productList,\n    loading,\n    pagination: storePagination\n  } = stocks;\n  const [selectedRowKeys, setSelectedRowKeys] = useState();\n  const [editingRow, setEditingRow] = useState();\n  const [localLoading, setLocalLoading] = useState(false);\n  const columns = [{\n    title: 'Tên sản phẩm',\n    dataIndex: ['productId', 'name'],\n    key: 'name',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(InventoryColumnName, {\n      stock: record\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 55\n    }, this)\n  }, {\n    title: 'Mã sản phẩm',\n    className: 'column-money',\n    dataIndex: ['productId', 'code'],\n    key: 'code',\n    align: 'center'\n  }, {\n    title: 'Tồn kho',\n    dataIndex: 'quantity',\n    key: 'quantity',\n    align: 'center',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(InventoryQuantity, {\n      text: text,\n      record: record,\n      editingRow: editingRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)\n  }, {\n    title: 'Thêm bớt',\n    align: 'center',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(InventoryUpdateInput, {\n      onFocus: () => handleFocusUpdateInventoryInput(record),\n      editRow: editingRow,\n      stock: record,\n      onChange: handleLocalChangeQuantity,\n      onSave: handleSaveRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this)\n  }, {\n    title: '',\n    align: 'center',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(InsaButton, {\n      type: (editingRow === null || editingRow === void 0 ? void 0 : editingRow._id) === record._id ? 'primary' : 'default',\n      onClick: handleSaveRow,\n      disabled: (editingRow === null || editingRow === void 0 ? void 0 : editingRow._id) !== record._id || (editingRow === null || editingRow === void 0 ? void 0 : editingRow.editValue) === 0,\n      children: \"L\\u01B0u\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this)\n  }];\n\n  const onChangPagination = page => {\n    pageChange(page);\n  };\n\n  const handleFocusUpdateInventoryInput = record => {\n    selectEditingRow(record);\n  };\n\n  const selectEditingRow = record => {\n    setEditingRow({ ...record,\n      editValue: 0\n    });\n  };\n\n  const onSelectChange = models => {\n    setSelectedRowKeys(models);\n  };\n\n  const handleLocalChangeQuantity = value => {\n    setEditingRow({ ...editingRow,\n      editValue: value\n    });\n  };\n\n  const currentWarehouseAddress = useMemo(() => {\n    let currentWarehouse = find(warehouses, ['_id', filter.warehouseId]);\n    if (!currentWarehouse) return '';\n    let {\n      address,\n      wardName,\n      districtName,\n      provinceName\n    } = currentWarehouse;\n    return [address, wardName, districtName, provinceName].join(', ');\n  }, [warehouses, filter.warehouseId]);\n\n  const handleSaveRow = async () => {\n    if (!editingRow) return;\n    let {\n      editValue,\n      storeId,\n      _id,\n      quantity\n    } = editingRow;\n\n    if (quantity + editValue < 0) {\n      message.error('Số lượng sản phẩm phải lớn hơn hoặc bằng 0');\n      return;\n    }\n\n    try {\n      setLocalLoading(true);\n      await updateStock({\n        storeId,\n        stockId: _id,\n        quantity: quantity + editValue\n      });\n      message.success('Cập nhật số lượng sản phẩm tồn kho thành công');\n      refreshData();\n      setEditingRow(undefined);\n    } catch {\n      message.error('Cập nhật sản phẩm tồn khi thất bại');\n    } finally {\n      setLocalLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(InsaTable, {\n    loading: loading || localLoading,\n    columns: columns,\n    dataSource: productList.map(e => ({ ...e,\n      key: e._id\n    })),\n    pagination: {\n      pageSize: pagination.limit,\n      current: pagination.page,\n      total: storePagination.total,\n      onChange: onChangPagination\n    },\n    bordered: true,\n    hasDefaultColumn: false,\n    rowSelection: {\n      selectedRowKeys,\n      onChange: onSelectChange\n    },\n    name: \"Danh s\\xE1ch phi\\xEAn b\\u1EA3n s\\u1EA3n ph\\u1EA9m\",\n    className: \"inventory-tbl\",\n    headerExtend: /*#__PURE__*/_jsxDEV(Row, {\n      justify: \"space-between\",\n      style: {\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(FilteredTags, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Space, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconLocation,\n          alt: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Typography.Text, {\n          type: \"secondary\",\n          children: currentWarehouseAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InventoryTable, \"iD0o3hU9AVazJDQ1SHZKMVcQksU=\", false, function () {\n  return [useInventoryTable, useSelector, useSelector];\n});\n\n_c = InventoryTable;\nexport default _c2 = /*#__PURE__*/memo(InventoryTable);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InventoryTable\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/inventory/inventory-list/table.tsx"],"names":["React","memo","useState","useMemo","useSelector","useInventoryTable","find","updateStock","Row","Space","Typography","message","InsaButton","InsaTable","InventoryColumnName","InventoryUpdateInput","InventoryQuantity","FilteredTags","InventoryTable","pagination","pageChange","filter","refreshData","stocks","store","warehouses","data","productList","loading","storePagination","selectedRowKeys","setSelectedRowKeys","editingRow","setEditingRow","localLoading","setLocalLoading","columns","title","dataIndex","key","render","text","record","className","align","handleFocusUpdateInventoryInput","handleLocalChangeQuantity","handleSaveRow","_id","editValue","onChangPagination","page","selectEditingRow","onSelectChange","models","value","currentWarehouseAddress","currentWarehouse","warehouseId","address","wardName","districtName","provinceName","join","storeId","quantity","error","stockId","success","undefined","map","e","pageSize","limit","current","total","onChange","width","iconLocation"],"mappings":"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","sourcesContent":["import React, { FC, memo, useState, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { IStoreState } from '../../../reducers/storeState/reducer';\nimport { ColumnType } from 'antd/lib/table';\nimport { useInventoryTable } from './context';\nimport { find } from 'lodash';\nimport { updateStock } from '../../../api/stock-api';\nimport { IStock } from '../../../models';\n\nimport { Row, Space, Typography, message } from 'antd';\nimport { InsaButton, InsaTable } from '../../../components';\nimport iconLocation from '../../../assets/images/ic-location.svg';\nimport InventoryColumnName from '../inventory-column-name';\nimport InventoryUpdateInput from './inventory-update-input';\nimport InventoryQuantity from './inventory-quantity';\nimport FilteredTags from './filtered-tags';\n\nimport './style.less';\n\nexport interface IEditRow extends IStock {\n    editValue: number;\n}\n\nconst InventoryTable: FC = () => {\n    const { pagination, pageChange, filter, refreshData } = useInventoryTable();\n\n    const stocks = useSelector(({ store }: { store: IStoreState }) => store.stocks);\n\n    const warehouses = useSelector(({ store }: { store: IStoreState }) => store.warehouses);\n\n    const { data: productList, loading, pagination: storePagination } = stocks;\n    const [selectedRowKeys, setSelectedRowKeys] = useState<React.ReactText[]>();\n    const [editingRow, setEditingRow] = useState<IEditRow>();\n    const [localLoading, setLocalLoading] = useState<boolean>(false);\n\n    const columns: ColumnType<any>[] = [\n        {\n            title: 'Tên sản phẩm',\n            dataIndex: ['productId', 'name'],\n            key: 'name',\n            render: (text: string, record: IStock) => <InventoryColumnName stock={record} />,\n        },\n        {\n            title: 'Mã sản phẩm',\n            className: 'column-money',\n            dataIndex: ['productId', 'code'],\n            key: 'code',\n            align: 'center',\n        },\n        {\n            title: 'Tồn kho',\n            dataIndex: 'quantity',\n            key: 'quantity',\n            align: 'center',\n            render: (text: string, record: IStock) => (\n                <InventoryQuantity text={text} record={record} editingRow={editingRow} />\n            ),\n        },\n        {\n            title: 'Thêm bớt',\n            align: 'center',\n            render: (text: string, record: IStock) => (\n                <InventoryUpdateInput\n                    onFocus={() => handleFocusUpdateInventoryInput(record)}\n                    editRow={editingRow}\n                    stock={record}\n                    onChange={handleLocalChangeQuantity}\n                    onSave={handleSaveRow}\n                />\n            ),\n        },\n        {\n            title: '',\n            align: 'center',\n            render: (text: string, record: IStock) => (\n                <InsaButton\n                    type={editingRow?._id === record._id ? 'primary' : 'default'}\n                    onClick={handleSaveRow}\n                    disabled={editingRow?._id !== record._id || editingRow?.editValue === 0}\n                >\n                    Lưu\n                </InsaButton>\n            ),\n        },\n    ];\n\n    const onChangPagination = (page: number) => {\n        pageChange(page);\n    };\n\n    const handleFocusUpdateInventoryInput = (record: IStock) => {\n        selectEditingRow(record);\n    };\n\n    const selectEditingRow = (record: IStock) => {\n        setEditingRow({ ...record, editValue: 0 });\n    };\n\n    const onSelectChange = (models: React.ReactText[]) => {\n        setSelectedRowKeys(models);\n    };\n\n    const handleLocalChangeQuantity = (value: number) => {\n        setEditingRow({ ...editingRow, editValue: value } as IEditRow);\n    };\n\n    const currentWarehouseAddress = useMemo(() => {\n        let currentWarehouse = find(warehouses, ['_id', filter.warehouseId]);\n\n        if (!currentWarehouse) return '';\n\n        let { address, wardName, districtName, provinceName } = currentWarehouse;\n\n        return [address, wardName, districtName, provinceName].join(', ');\n    }, [warehouses, filter.warehouseId]);\n\n    const handleSaveRow = async () => {\n        if (!editingRow) return;\n\n        let { editValue, storeId, _id, quantity } = editingRow;\n\n        if (quantity + editValue < 0) {\n            message.error('Số lượng sản phẩm phải lớn hơn hoặc bằng 0');\n\n            return;\n        }\n\n        try {\n            setLocalLoading(true);\n            await updateStock({ storeId, stockId: _id, quantity: quantity + editValue });\n\n            message.success('Cập nhật số lượng sản phẩm tồn kho thành công');\n            refreshData();\n            setEditingRow(undefined);\n        } catch {\n            message.error('Cập nhật sản phẩm tồn khi thất bại');\n        } finally {\n            setLocalLoading(false);\n        }\n    };\n\n    return (\n        <InsaTable\n            loading={loading || localLoading}\n            columns={columns}\n            dataSource={productList.map((e) => ({\n                ...e,\n                key: e._id,\n            }))}\n            pagination={{\n                pageSize: pagination.limit,\n                current: pagination.page,\n                total: storePagination.total,\n                onChange: onChangPagination,\n            }}\n            bordered\n            hasDefaultColumn={false}\n            rowSelection={{\n                selectedRowKeys,\n                onChange: onSelectChange,\n            }}\n            name=\"Danh sách phiên bản sản phẩm\"\n            className=\"inventory-tbl\"\n            headerExtend={\n                <Row justify=\"space-between\" style={{ width: '100%' }}>\n                    <FilteredTags />\n                    <Space>\n                        <img src={iconLocation} alt=\"icon\" />\n                        <Typography.Text type=\"secondary\">\n                            {currentWarehouseAddress}\n                        </Typography.Text>\n                    </Space>\n                </Row>\n            }\n        />\n    );\n};\nexport default memo(InventoryTable);\n"]},"metadata":{},"sourceType":"module"}