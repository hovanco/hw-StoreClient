{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/customer/list/table.tsx\",\n    _s = $RefreshSig$();\n\nimport { Checkbox, Col, Row, Space } from 'antd';\nimport { compact } from 'lodash';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { InsaTable, SaleChannelLabel } from '../../../components';\nimport AdvanceFilter from './advance-filter';\nimport { useCustomerTable } from './context';\nimport InputSearch from './input-search';\nimport ListFiltered from './list-filtered';\nimport SourceFilter from './source-filter';\nimport TableAction from './table-action';\nimport './table.less';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CustomerTable = () => {\n  _s();\n\n  const history = useHistory();\n  const customers = useSelector(({\n    store\n  }) => store.customers);\n  const isCollapsed = useSelector(state => state.global.isCollapsed);\n  const {\n    data: dataSource,\n    loading,\n    pagination: storePagination\n  } = customers;\n  const {\n    pagination,\n    changePagination\n  } = useCustomerTable();\n  const {\n    page,\n    limit\n  } = pagination;\n  const [path, setPatth] = useState(history.location.search);\n  useEffect(() => {\n    setPatth(history.location.search);\n    console.log(history.location.search);\n  }, [history.location.search]);\n  const columns = [{\n    title: 'Mã khách hàng',\n    align: 'center',\n    render: record => /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: \"#0199fc\"\n      },\n      children: record.code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 38\n    }, this)\n  }, {\n    title: 'Họ tên',\n    align: 'center',\n    dataIndex: 'name'\n  }, {\n    title: 'Số điện thoại',\n    align: 'center',\n    dataIndex: 'phoneNo'\n  }, {\n    title: 'Email',\n    align: 'center',\n    dataIndex: 'email'\n  }, {\n    title: 'Ngày sinh',\n    align: 'center',\n    dataIndex: 'dateOfBirth'\n  }, {\n    title: 'Địa chỉ',\n    align: 'center',\n    render: record => compact([record.wardName, record.districtName, record.provinceName]).join(', ')\n  }, {\n    title: 'Nguồn',\n    align: 'center',\n    dataIndex: 'source',\n    key: 'source',\n    render: source => /*#__PURE__*/_jsxDEV(SaleChannelLabel, {\n      channelId: source\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }, this)\n  }, {\n    title: 'Ngày tạo',\n    align: 'center',\n    dataIndex: 'createdAt',\n    key: 'createdAt',\n    render: createdAt => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: createdAt ? moment(createdAt).format('DD/MM/YYYY') : '---'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)\n  }];\n  const [widthTable, setWidthTable] = useState(0);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n\n  const onSelectChange = selectedRowKeysInCurrentPage => {\n    let selectedRowKeysBeforeInCurrentPage = [];\n    dataSource.forEach(customer => {\n      if (selectedRowKeys.includes(customer._id)) {\n        selectedRowKeysBeforeInCurrentPage.push(customer._id);\n      }\n    });\n    const selectedRowInOtherPage = selectedRowKeys.filter(key => !selectedRowKeysBeforeInCurrentPage.includes(key));\n    setSelectedRowKeys([...selectedRowInOtherPage, ...selectedRowKeysInCurrentPage]);\n  };\n\n  const selectAll = () => {\n    const customerKeys = dataSource.map(customer => customer._id);\n    setSelectedRowKeys(customerKeys);\n  };\n\n  const resetCustomerSelected = () => {\n    setSelectedRowKeys([]);\n  };\n\n  const renderColumnTitle = () => {\n    if (selectedRowKeys.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Checkbox, {\n        onClick: selectAll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(TableAction, {\n      customers: selectedRowKeys,\n      resetCustomerSelected: resetCustomerSelected,\n      widthTable: widthTable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this);\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n    columnTitle: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 30\n      },\n      children: renderColumnTitle()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 22\n    }, this)\n  };\n  useEffect(() => {\n    var _document;\n\n    const antTableHeadEle = (_document = document) === null || _document === void 0 ? void 0 : _document.querySelector('.order-tbl .ant-table-thead');\n    let orderActionsWidth = antTableHeadEle ? antTableHeadEle.clientWidth : 0;\n    setWidthTable(orderActionsWidth);\n  }, [selectedRowKeys]);\n  useEffect(() => {\n    if (selectedRowKeys.length > 0) {\n      setWidthTable(isCollapsed ? widthTable + 120 : widthTable - 120);\n    }\n  }, [isCollapsed]);\n\n  const onChange = async (pagination, filters, sorter) => {\n    let sort = sorter.columnKey || 'createdAt';\n    let direction = sorter.order ? sorter.order.replce('end', '') : 'desc';\n    let {\n      current,\n      pageSize\n    } = pagination;\n    changePagination({\n      sort,\n      direction,\n      page: current,\n      limit: pageSize\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(InsaTable, {\n    loading: loading,\n    rowSelection: rowSelection,\n    columns: columns,\n    dataSource: dataSource.map(e => ({ ...e,\n      key: e._id\n    })),\n    bordered: true,\n    isShowTotal: true,\n    onChange: onChange,\n    pagination: {\n      showSizeChanger: false,\n      pageSize: Number(limit),\n      current: Number(page),\n      total: storePagination.total\n    },\n    name: \"Th\\xF4ng tin kh\\xE1ch h\\xE0ng\",\n    className: \"order-tbl hover\",\n    hasDefaultColumn: false,\n    rowKey: \"_id\",\n    headerExtend: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"order-tbl-header customer-tbl-header\",\n        justify: \"space-between\",\n        align: \"top\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Space, {\n              size: \"middle\",\n              children: [/*#__PURE__*/_jsxDEV(InputSearch, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(AdvanceFilter, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            justify: \"end\",\n            align: \"middle\",\n            children: /*#__PURE__*/_jsxDEV(SourceFilter, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(ListFiltered, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true),\n    onRow: record => {\n      return {\n        onClick: event => history.push(`/customers/${record._id}`, path) // add path => fix pass state when go back\n\n      };\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CustomerTable, \"WaH6ToFgUmKO6tg/834yp4bg4NU=\", false, function () {\n  return [useHistory, useSelector, useSelector, useCustomerTable];\n});\n\n_c = CustomerTable;\nexport default CustomerTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerTable\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/customer/list/table.tsx"],"names":["Checkbox","Col","Row","Space","compact","moment","React","useEffect","useState","useSelector","useHistory","InsaTable","SaleChannelLabel","AdvanceFilter","useCustomerTable","InputSearch","ListFiltered","SourceFilter","TableAction","CustomerTable","history","customers","store","isCollapsed","state","global","data","dataSource","loading","pagination","storePagination","changePagination","page","limit","path","setPatth","location","search","console","log","columns","title","align","render","record","color","code","dataIndex","wardName","districtName","provinceName","join","key","source","createdAt","format","widthTable","setWidthTable","selectedRowKeys","setSelectedRowKeys","onSelectChange","selectedRowKeysInCurrentPage","selectedRowKeysBeforeInCurrentPage","forEach","customer","includes","_id","push","selectedRowInOtherPage","filter","selectAll","customerKeys","map","resetCustomerSelected","renderColumnTitle","length","rowSelection","onChange","columnTitle","width","antTableHeadEle","document","querySelector","orderActionsWidth","clientWidth","filters","sorter","sort","columnKey","direction","order","replce","current","pageSize","e","showSizeChanger","Number","total","onClick","event"],"mappings":"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","sourcesContent":["import { Checkbox, Col, Row, Space } from 'antd';\nimport { ColumnType, TablePaginationConfig } from 'antd/lib/table';\nimport { compact } from 'lodash';\nimport moment from 'moment';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { InsaTable, SaleChannelLabel } from '../../../components';\nimport { ICustomer } from '../../../models';\nimport { IStoreState } from '../../../reducers/storeState/reducer';\nimport { IState } from '../../../store/rootReducer';\nimport AdvanceFilter from './advance-filter';\nimport { useCustomerTable } from './context';\nimport InputSearch from './input-search';\nimport ListFiltered from './list-filtered';\nimport SourceFilter from './source-filter';\nimport TableAction from './table-action';\nimport './table.less';\n\nconst CustomerTable: FC = () => {\n    const history = useHistory();\n    const customers = useSelector(({ store }: { store: IStoreState }) => store.customers);\n    const isCollapsed = useSelector((state: IState) => state.global.isCollapsed);\n    const { data: dataSource, loading, pagination: storePagination } = customers;\n    const { pagination, changePagination } = useCustomerTable();\n\n    const { page, limit } = pagination;\n\n    const [path, setPatth] = useState(history.location.search);\n\n    useEffect(() => {\n\n            setPatth(history.location.search);\n            console.log(history.location.search);\n            \n      }, [history.location.search]);\n\n    const columns: ColumnType<ICustomer>[] = [\n        {\n            title: 'Mã khách hàng',\n            align: 'center',\n            render: (record: any) => <span style={{ color: \"#0199fc\" }}>{record.code}</span>,\n        },\n        {\n            title: 'Họ tên',\n            align: 'center',\n            dataIndex: 'name',\n        },\n        {\n            title: 'Số điện thoại',\n            align: 'center',\n            dataIndex: 'phoneNo',\n        },\n        {\n            title: 'Email',\n            align: 'center',\n            dataIndex: 'email',\n        },\n        {\n            title: 'Ngày sinh',\n            align: 'center',\n            dataIndex: 'dateOfBirth',\n        },\n        {\n            title: 'Địa chỉ',\n            align: 'center',\n            render: (record) =>\n                compact([record.wardName, record.districtName, record.provinceName]).join(', '),\n        },\n        {\n            title: 'Nguồn',\n            align: 'center',\n            dataIndex: 'source',\n            key: 'source',\n            render: (source) => <SaleChannelLabel channelId={source} />,\n        },\n        {\n            title: 'Ngày tạo',\n            align: 'center',\n            dataIndex: 'createdAt',\n            key: 'createdAt',\n            render: (createdAt) => (\n                <span>{createdAt ? moment(createdAt).format('DD/MM/YYYY') : '---'}</span>\n            ),\n        },\n    ];\n\n    const [widthTable, setWidthTable] = useState<number>(0);\n    const [selectedRowKeys, setSelectedRowKeys] = useState<any>([]);\n\n    const onSelectChange = (selectedRowKeysInCurrentPage: any) => {\n        let selectedRowKeysBeforeInCurrentPage: string[] = [];  \n        dataSource.forEach(customer => {\n            if (selectedRowKeys.includes(customer._id)) {\n                selectedRowKeysBeforeInCurrentPage.push(customer._id);\n            }\n        });\n\n        const selectedRowInOtherPage = selectedRowKeys\n            .filter((key: string) => !selectedRowKeysBeforeInCurrentPage.includes(key));\n\n        setSelectedRowKeys([...selectedRowInOtherPage, ...selectedRowKeysInCurrentPage]);\n    };\n\n    const selectAll = () => {\n        const customerKeys = dataSource.map((customer: ICustomer) => customer._id);\n        setSelectedRowKeys(customerKeys);\n    };\n\n    const resetCustomerSelected = () => {\n        setSelectedRowKeys([]);\n    };\n\n    const renderColumnTitle = () => {\n        if (selectedRowKeys.length === 0) {\n            return <Checkbox onClick={selectAll} />;\n        }\n\n        return (\n            <TableAction\n                customers={selectedRowKeys}\n                resetCustomerSelected={resetCustomerSelected}\n                widthTable={widthTable}\n            />\n        );\n    };\n\n    const rowSelection = {\n        selectedRowKeys,\n        onChange: onSelectChange,\n        columnTitle: <div style={{ width: 30 }}>{renderColumnTitle()}</div>,\n    };\n\n    useEffect(() => {\n        const antTableHeadEle: HTMLTableHeaderCellElement | null = document?.querySelector(\n            '.order-tbl .ant-table-thead'\n        );\n        let orderActionsWidth: number = antTableHeadEle ? antTableHeadEle.clientWidth : 0;\n\n        setWidthTable(orderActionsWidth);\n    }, [selectedRowKeys]);\n\n    useEffect(() => {\n        if (selectedRowKeys.length > 0) {\n            setWidthTable(isCollapsed ? widthTable + 120 : widthTable - 120);\n        }\n    }, [isCollapsed]);\n\n    const onChange = async (pagination: TablePaginationConfig, filters: any, sorter: any) => {\n        let sort = sorter.columnKey || 'createdAt';\n        let direction = sorter.order ? sorter.order.replce('end', '') : 'desc';\n        let { current, pageSize } = pagination;\n\n        changePagination({ sort, direction, page: current, limit: pageSize });\n    };\n\n    return (\n        <InsaTable\n            loading={loading}\n            rowSelection={rowSelection}\n            columns={columns}\n            dataSource={dataSource.map((e) => ({\n                ...e,\n                key: e._id,\n            }))}\n            bordered\n            isShowTotal\n            onChange={onChange}\n            pagination={{\n                showSizeChanger: false,\n                pageSize: Number(limit),\n                current: Number(page),\n                total: storePagination.total,\n            }}\n            name=\"Thông tin khách hàng\"\n            className=\"order-tbl hover\"\n            hasDefaultColumn={false}\n            rowKey=\"_id\"\n            headerExtend={\n                <>\n                    <Row\n                        className=\"order-tbl-header customer-tbl-header\"\n                        justify=\"space-between\"\n                        align=\"top\"\n                    >\n                        <Col>\n                            <Row>\n                                <Space size=\"middle\">\n                                    <InputSearch />\n                                    <AdvanceFilter />\n                                </Space>\n                            </Row>\n                        </Col>\n                        <Col>\n                            <Row justify=\"end\" align=\"middle\">\n                                <SourceFilter />\n                            </Row>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <ListFiltered />\n                    </Row>\n                </>\n            }\n            onRow={(record: ICustomer) => {\n                return {\n                    onClick: (event) => history.push(`/customers/${record._id}`, path), // add path => fix pass state when go back\n                };\n            }}\n        />\n    );\n};\n\nexport default CustomerTable;\n"]},"metadata":{},"sourceType":"module"}