{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/order/create/components/btn-submit-order/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, message } from 'antd';\nimport { get, omit, pick } from 'lodash';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport orderApi from '../../../../../api/order-api';\nimport shippingApi from '../../../../../api/shipping-api';\nimport { EPaymentType, ORDER_STATUS, SaleChannelId } from '../../../../../models';\nimport { useOrderNew } from '../../state/context';\nimport { EShipTypes, EStatusPage } from '../../state/interface';\nimport { getFeeForReceiver } from '../../ultil';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  createOrder,\n  updateOrder\n} = orderApi;\n\nconst BtnSubmitOrder = () => {\n  _s();\n\n  const history = useHistory();\n  const store = useSelector(state => state.store.data);\n  const [loading, setLoading] = useState(false);\n  const {\n    order,\n    statusPage,\n    discount,\n    discountBy,\n    products,\n    shipmentFee,\n    customer,\n    warehouseId,\n    infoDelivery,\n    source,\n    shipmentFeeForCustomer,\n    customerNote,\n    noteForDelivery,\n    ship,\n    resetOrder,\n    paymentType,\n    paymentMethod,\n    shipType,\n    delivered\n  } = useOrderNew();\n\n  const getShipmentFee = () => {\n    return shipmentFee || 0;\n  };\n\n  const createNewOrder = async () => {\n    try {\n      setLoading(true);\n      const order = await createOrder({\n        storeId: store._id,\n        data: {\n          products: products.map(product => ({ ...pick(product, ['count', 'price']),\n            productId: product._id\n          })),\n          customer: { ...pick(customer, ['_id', 'name']),\n            phoneNo: (infoDelivery === null || infoDelivery === void 0 ? void 0 : infoDelivery.phoneNo) || (customer === null || customer === void 0 ? void 0 : customer.phoneNo),\n            address: (infoDelivery === null || infoDelivery === void 0 ? void 0 : infoDelivery.address) || (customer === null || customer === void 0 ? void 0 : customer.address),\n            province: (infoDelivery === null || infoDelivery === void 0 ? void 0 : infoDelivery.province) || (customer === null || customer === void 0 ? void 0 : customer.province),\n            district: (infoDelivery === null || infoDelivery === void 0 ? void 0 : infoDelivery.district) || (customer === null || customer === void 0 ? void 0 : customer.district),\n            ward: (infoDelivery === null || infoDelivery === void 0 ? void 0 : infoDelivery.ward) || (customer === null || customer === void 0 ? void 0 : customer.ward)\n          },\n          warehouseId,\n          source,\n          deliveryOptions: {\n            shipmentFee: getShipmentFee(),\n            discount,\n            discountBy,\n            noteForDelivery,\n            shipmentFeeForCustomer: shipmentFeeForCustomer || shipmentFee || 0,\n            serviceId: (ship === null || ship === void 0 ? void 0 : ship.serviceId) || 0,\n            transportType: (ship === null || ship === void 0 ? void 0 : ship.transportType) || 0,\n            customerNote,\n            feeForReceiver: getFeeForReceiver({\n              products,\n              discount,\n              discountBy,\n              shipmentFee,\n              shipmentFeeForCustomer\n            }),\n            shipmentFeeByTotal: true\n          },\n          paymentType,\n          paymentMethod\n        }\n      });\n\n      if (source === SaleChannelId.POS && shipType === EShipTypes.SelfTransport) {\n        await updateOrder({\n          storeId: store._id,\n          orderId: order._id,\n          data: {\n            status: delivered ? ORDER_STATUS.DELIVERED : ORDER_STATUS.DELIVERING\n          }\n        });\n      }\n\n      message.success('Tạo đơn hàng thành công');\n      resetOrder();\n    } catch (error) {\n      message.error('Lỗi tạo đơn hàng');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const cancelOrder = () => new Promise(async (resolver, reject) => {\n    const serviceId = get(order, 'deliveryOptions.shipmentOrderId');\n\n    if (serviceId && order) {\n      try {\n        setLoading(true);\n        const orderNew = await shippingApi.toggleCreateOrderShip({\n          storeId: store._id,\n          orderId: order._id,\n          cancel: true,\n          warehouseId: order.warehouseId._id\n        });\n        return resolver(orderNew);\n      } catch (error) {\n        return reject('Failed');\n      }\n    } else {\n      return resolver(order);\n    }\n  });\n\n  const saveOrder = async orderNew => {\n    try {\n      var _deliveryOptions, _deliveryOptions2;\n\n      const deliveryOptions = {\n        discount,\n        discountBy,\n        serviceId: ship === null || ship === void 0 ? void 0 : ship.serviceId,\n        shipmentFee: getShipmentFee(),\n        shipmentFeeForCustomer,\n        shipmentFeeByTotal: true,\n        transportType: ship === null || ship === void 0 ? void 0 : ship.transportType,\n        customerNote,\n        noteForDelivery,\n        feeForReceiver: getFeeForReceiver({\n          products,\n          discount,\n          discountBy,\n          shipmentFee,\n          shipmentFeeForCustomer\n        }),\n        shipmentOrderId: ((_deliveryOptions = orderNew.deliveryOptions) === null || _deliveryOptions === void 0 ? void 0 : _deliveryOptions.shipmentOrderId) ? (_deliveryOptions2 = orderNew.deliveryOptions) === null || _deliveryOptions2 === void 0 ? void 0 : _deliveryOptions2.shipmentOrderId : undefined\n      };\n\n      const getStatus = () => {\n        if (source === SaleChannelId.POS && EShipTypes.SelfTransport) {\n          return delivered ? ORDER_STATUS.DELIVERED : ORDER_STATUS.DELIVERING;\n        }\n\n        return;\n      };\n\n      const data = {\n        customer: { ...omit(order.customer, ['fbUserId', 'provinceName', 'districtName', 'wardName']),\n          ...pick(infoDelivery, ['name', 'phoneNo', 'address', 'province', 'district', 'ward'])\n        },\n        deliveryOptions,\n        products: products.map(product => ({ ...pick(product, ['count', 'price']),\n          productId: product._id\n        })),\n        warehouseId: get(order, 'warehouseId._id'),\n        // (order as IOrder).(warehouseId as IWarehouse)._id,\n        paymentType,\n        paymentMethod,\n        status: getStatus(),\n        source\n      };\n      await updateOrder({\n        storeId: store._id,\n        orderId: order._id,\n        data\n      });\n      message.success('Đã lưu đơn hàng thành công');\n      history.push(`/orders/order/${order._id}`);\n    } catch (error) {\n      message.error('Lỗi lưu đơn hàng');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmitOrder = async () => {\n    if (statusPage === EStatusPage.NEW) {\n      createNewOrder();\n    } else if (statusPage === EStatusPage.EDIT) {\n      cancelOrder().then(orderNew => {\n        saveOrder(orderNew);\n      }).catch(() => {\n        message.error('Lỗi lưu đơn hàng');\n      });\n    }\n  };\n\n  const validateField = products.length === 0 || !customer || shipType === EShipTypes.SendShipping && !noteForDelivery || typeof paymentType === 'undefined' || [EPaymentType.PayFirst, EPaymentType.PayLater].includes(paymentType) && typeof paymentMethod === 'undefined' || shipType === EShipTypes.SendShipping && !ship;\n  const orderStatus = get(order, 'status');\n  const ORDER_STATUS_ARRAY = [ORDER_STATUS.DELIVERING, ORDER_STATUS.DELIVERED, ORDER_STATUS.RETURNED];\n  const validateOrderStatus = !!orderStatus && ORDER_STATUS_ARRAY.includes(orderStatus);\n\n  const checkDisabled = () => {\n    if (statusPage === EStatusPage.NEW) {\n      return validateField;\n    }\n\n    if (statusPage === EStatusPage.EDIT && validateOrderStatus) {\n      return true;\n    }\n\n    if (statusPage === EStatusPage.EDIT && !validateOrderStatus) {\n      return validateField;\n    }\n\n    return false;\n  };\n\n  const title_btn = 'Lưu';\n  return /*#__PURE__*/_jsxDEV(Button, {\n    style: {\n      minWidth: 100\n    },\n    type: \"primary\",\n    onClick: handleSubmitOrder,\n    loading: loading,\n    disabled: checkDisabled(),\n    children: title_btn\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BtnSubmitOrder, \"b46pch5239FuMoG9dRS4W52xUNU=\", false, function () {\n  return [useHistory, useSelector, useOrderNew];\n});\n\n_c = BtnSubmitOrder;\nexport default BtnSubmitOrder;\n\nvar _c;\n\n$RefreshReg$(_c, \"BtnSubmitOrder\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/order/create/components/btn-submit-order/index.tsx"],"names":["Button","message","get","omit","pick","React","useState","useSelector","useHistory","orderApi","shippingApi","EPaymentType","ORDER_STATUS","SaleChannelId","useOrderNew","EShipTypes","EStatusPage","getFeeForReceiver","createOrder","updateOrder","BtnSubmitOrder","history","store","state","data","loading","setLoading","order","statusPage","discount","discountBy","products","shipmentFee","customer","warehouseId","infoDelivery","source","shipmentFeeForCustomer","customerNote","noteForDelivery","ship","resetOrder","paymentType","paymentMethod","shipType","delivered","getShipmentFee","createNewOrder","storeId","_id","map","product","productId","phoneNo","address","province","district","ward","deliveryOptions","serviceId","transportType","feeForReceiver","shipmentFeeByTotal","POS","SelfTransport","orderId","status","DELIVERED","DELIVERING","success","error","cancelOrder","Promise","resolver","reject","orderNew","toggleCreateOrderShip","cancel","saveOrder","shipmentOrderId","undefined","getStatus","push","handleSubmitOrder","NEW","EDIT","then","catch","validateField","length","SendShipping","PayFirst","PayLater","includes","orderStatus","ORDER_STATUS_ARRAY","RETURNED","validateOrderStatus","checkDisabled","title_btn","minWidth"],"mappings":"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","sourcesContent":["import { Button, message } from 'antd';\nimport { get, omit, pick } from 'lodash';\nimport React, { FC, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport orderApi from '../../../../../api/order-api';\nimport shippingApi from '../../../../../api/shipping-api';\nimport {\n    EPaymentType,\n    ICustomer,\n    IOrder,\n    IWarehouse,\n    ORDER_STATUS,\n    SaleChannelId,\n} from '../../../../../models';\nimport { IState } from '../../../../../store/rootReducer';\nimport { useOrderNew } from '../../state/context';\nimport { EShipTypes, EStatusPage } from '../../state/interface';\nimport { getFeeForReceiver } from '../../ultil';\n\nconst { createOrder, updateOrder } = orderApi;\n\ninterface Props {}\n\nconst BtnSubmitOrder: FC<Props> = () => {\n    const history = useHistory();\n    const store = useSelector((state: IState) => state.store.data);\n    const [loading, setLoading] = useState<boolean>(false);\n    const {\n        order,\n        statusPage,\n        discount,\n        discountBy,\n        products,\n        shipmentFee,\n        customer,\n        warehouseId,\n        infoDelivery,\n        source,\n        shipmentFeeForCustomer,\n        customerNote,\n        noteForDelivery,\n        ship,\n        resetOrder,\n        paymentType,\n        paymentMethod,\n        shipType,\n        delivered,\n    } = useOrderNew();\n\n    const getShipmentFee = () => {\n        return shipmentFee || 0;\n    };\n\n    const createNewOrder = async () => {\n        try {\n            setLoading(true);\n\n            const order = await createOrder({\n                storeId: store._id as string,\n                data: {\n                    products: products.map((product) => ({\n                        ...pick(product, ['count', 'price']),\n                        productId: product._id,\n                    })),\n\n                    customer: {\n                        ...pick(customer as ICustomer, ['_id', 'name']),\n\n                        phoneNo: infoDelivery?.phoneNo || customer?.phoneNo,\n                        address: infoDelivery?.address || (customer?.address as string),\n                        province: infoDelivery?.province || (customer?.province as string),\n                        district: infoDelivery?.district || (customer?.district as string),\n                        ward: infoDelivery?.ward || (customer?.ward as string),\n                    } as ICustomer,\n\n                    warehouseId,\n                    source,\n\n                    deliveryOptions: {\n                        shipmentFee: getShipmentFee(),\n                        discount,\n                        discountBy,\n                        noteForDelivery,\n                        shipmentFeeForCustomer: shipmentFeeForCustomer || shipmentFee || 0,\n                        serviceId: ship?.serviceId || 0,\n                        transportType: ship?.transportType || 0,\n                        customerNote,\n                        feeForReceiver: getFeeForReceiver({\n                            products,\n                            discount,\n                            discountBy,\n                            shipmentFee,\n                            shipmentFeeForCustomer,\n                        }),\n                        shipmentFeeByTotal: true,\n                    },\n                    paymentType,\n                    paymentMethod,\n                },\n            });\n\n            if (source === SaleChannelId.POS && shipType === EShipTypes.SelfTransport) {\n                await updateOrder({\n                    storeId: store._id as string,\n                    orderId: order._id,\n                    data: {\n                        status: delivered ? ORDER_STATUS.DELIVERED : ORDER_STATUS.DELIVERING,\n                    },\n                });\n            }\n\n            message.success('Tạo đơn hàng thành công');\n            resetOrder();\n        } catch (error) {\n            message.error('Lỗi tạo đơn hàng');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const cancelOrder = (): Promise<any> =>\n        new Promise(async (resolver, reject) => {\n            const serviceId = get(order, 'deliveryOptions.shipmentOrderId');\n\n            if (serviceId && order) {\n                try {\n                    setLoading(true);\n                    const orderNew = await shippingApi.toggleCreateOrderShip({\n                        storeId: store._id as string,\n                        orderId: order._id,\n                        cancel: true,\n                        warehouseId: (order.warehouseId as IWarehouse)._id,\n                    });\n\n                    return resolver(orderNew);\n                } catch (error) {\n                    return reject('Failed');\n                }\n            } else {\n                return resolver(order);\n            }\n        });\n\n    const saveOrder = async (orderNew: IOrder) => {\n        try {\n            const deliveryOptions = {\n                discount,\n                discountBy,\n                serviceId: ship?.serviceId,\n                shipmentFee: getShipmentFee(),\n                shipmentFeeForCustomer,\n                shipmentFeeByTotal: true,\n                transportType: ship?.transportType,\n                customerNote,\n                noteForDelivery,\n\n                feeForReceiver: getFeeForReceiver({\n                    products,\n                    discount,\n                    discountBy,\n                    shipmentFee,\n                    shipmentFeeForCustomer,\n                }),\n\n                shipmentOrderId: (orderNew as IOrder).deliveryOptions?.shipmentOrderId\n                    ? (orderNew as IOrder).deliveryOptions?.shipmentOrderId\n                    : undefined,\n            };\n\n            const getStatus = () => {\n                if (source === SaleChannelId.POS && EShipTypes.SelfTransport) {\n                    return delivered ? ORDER_STATUS.DELIVERED : ORDER_STATUS.DELIVERING;\n                }\n\n                return;\n            };\n\n            const data = {\n                customer: {\n                    ...omit((order as IOrder).customer, [\n                        'fbUserId',\n                        'provinceName',\n                        'districtName',\n                        'wardName',\n                    ]),\n\n                    ...pick(infoDelivery, [\n                        'name',\n                        'phoneNo',\n                        'address',\n                        'province',\n                        'district',\n                        'ward',\n                    ]),\n                },\n                deliveryOptions,\n                products: products.map((product) => ({\n                    ...pick(product, ['count', 'price']),\n                    productId: product._id,\n                })),\n                warehouseId: get(order, 'warehouseId._id'), // (order as IOrder).(warehouseId as IWarehouse)._id,\n                paymentType,\n                paymentMethod,\n                status: getStatus(),\n                source,\n            };\n\n            await updateOrder({\n                storeId: store._id as string,\n                orderId: (order as IOrder)._id as string,\n                data,\n            });\n\n            message.success('Đã lưu đơn hàng thành công');\n            history.push(`/orders/order/${(order as IOrder)._id}`);\n        } catch (error) {\n            message.error('Lỗi lưu đơn hàng');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleSubmitOrder = async () => {\n        if (statusPage === EStatusPage.NEW) {\n            createNewOrder();\n        } else if (statusPage === EStatusPage.EDIT) {\n            cancelOrder()\n                .then((orderNew) => {\n                    saveOrder(orderNew);\n                })\n                .catch(() => {\n                    message.error('Lỗi lưu đơn hàng');\n                });\n        }\n    };\n\n    const validateField =\n        products.length === 0 ||\n        !customer ||\n        (shipType === EShipTypes.SendShipping && !noteForDelivery) ||\n        typeof paymentType === 'undefined' ||\n        ([EPaymentType.PayFirst, EPaymentType.PayLater].includes(paymentType) &&\n            typeof paymentMethod === 'undefined') ||\n        (shipType === EShipTypes.SendShipping && !ship);\n\n    const orderStatus = get(order, 'status');\n\n    const ORDER_STATUS_ARRAY = [\n        ORDER_STATUS.DELIVERING,\n        ORDER_STATUS.DELIVERED,\n        ORDER_STATUS.RETURNED,\n    ];\n\n    const validateOrderStatus: boolean = !!orderStatus && ORDER_STATUS_ARRAY.includes(orderStatus);\n\n    const checkDisabled = () => {\n        if (statusPage === EStatusPage.NEW) {\n            return validateField;\n        }\n\n        if (statusPage === EStatusPage.EDIT && validateOrderStatus) {\n            return true;\n        }\n\n        if (statusPage === EStatusPage.EDIT && !validateOrderStatus) {\n            return validateField;\n        }\n\n        return false;\n    };\n\n    const title_btn = 'Lưu';\n\n    return (\n        <Button\n            style={{ minWidth: 100}}\n            type='primary'\n            onClick={handleSubmitOrder}\n            loading={loading}\n            disabled={checkDisabled()}\n        >\n            {title_btn}\n        </Button>\n    );\n};\n\nexport default BtnSubmitOrder;\n"]},"metadata":{},"sourceType":"module"}