{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting/account/state/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useEffect, useMemo, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport staffsApi from '../../../../api/staff-api';\nimport { Loading } from '../../../../components';\nimport { initialState, reducer } from './reducer';\nimport * as types from './types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  state: initialState,\n  dispatch: () => {},\n  loadStaffs: () => {}\n};\nconst Context = /*#__PURE__*/createContext(initialContext);\n\nconst ProviderAccount = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const store = useSelector(state => state.store.data);\n  const loadStaffs = useCallback(async storeId => {\n    try {\n      dispatch({\n        type: types.LOADING\n      });\n      const response = await staffsApi.getStaffs(storeId);\n      dispatch({\n        type: types.LOAD_DONE,\n        payload: response\n      });\n    } catch (error) {\n      dispatch({\n        type: types.LOADING\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (store._id) {\n      loadStaffs(store._id);\n    }\n  }, [store]);\n  const value = useMemo(() => ({\n    state,\n    dispatch,\n    loadStaffs\n  }), [state, dispatch, loadStaffs]);\n\n  if (state.loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProviderAccount, \"6lgLUoZpjSLK/rSBUBOghObs/P8=\", false, function () {\n  return [useSelector];\n});\n\n_c = ProviderAccount;\n\nconst useStaffs = () => {\n  _s2();\n\n  const {\n    state,\n    dispatch,\n    loadStaffs\n  } = useContext(Context);\n\n  const setListStaffs = staffs => {\n    dispatch({\n      type: types.LOAD_DONE,\n      payload: staffs\n    });\n  };\n\n  const addStaff = staff => {\n    dispatch({\n      type: types.ADD_STAFF,\n      payload: staff\n    });\n  };\n\n  const removeStaff = staff => {\n    dispatch({\n      type: types.REMOVE_STAFF,\n      payload: staff\n    });\n  };\n\n  return { ...state,\n    setListStaffs,\n    addStaff,\n    removeStaff,\n    loadStaffs\n  };\n};\n\n_s2(useStaffs, \"Jp65QkpdajFb9Ku3K+6mEe1Ee2U=\");\n\nexport { ProviderAccount, useStaffs };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderAccount\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting/account/state/context.tsx"],"names":["React","createContext","useCallback","useContext","useEffect","useMemo","useReducer","useSelector","staffsApi","Loading","initialState","reducer","types","initialContext","state","dispatch","loadStaffs","Context","ProviderAccount","children","store","data","storeId","type","LOADING","response","getStaffs","LOAD_DONE","payload","error","_id","value","loading","useStaffs","setListStaffs","staffs","addStaff","staff","ADD_STAFF","removeStaff","REMOVE_STAFF"],"mappings":";;;;AAAA,OAAOA,KAAP,IACIC,aADJ,EAIIC,WAJJ,EAKIC,UALJ,EAMIC,SANJ,EAOIC,OAPJ,EAQIC,UARJ,QASO,OATP;AAUA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AAIA,SAASC,YAAT,EAAuBC,OAAvB,QAAsC,WAAtC;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,KAAK,EAAEJ,YADY;AAEnBK,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFC;AAGnBC,EAAAA,UAAU,EAAE,MAAM,CAAE;AAHD,CAAvB;AAMA,MAAMC,OAAO,gBAAGhB,aAAa,CAAWY,cAAX,CAA7B;;AAMA,MAAMK,eAA0B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACjD,QAAM,CAACL,KAAD,EAAQC,QAAR,IAAoBT,UAAU,CAACK,OAAD,EAAUD,YAAV,CAApC;AACA,QAAMU,KAAK,GAAGb,WAAW,CAAEO,KAAD,IAAmBA,KAAK,CAACM,KAAN,CAAYC,IAAhC,CAAzB;AAEA,QAAML,UAAU,GAAGd,WAAW,CAAC,MAAOoB,OAAP,IAA2B;AACtD,QAAI;AACAP,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAEX,KAAK,CAACY;AADP,OAAD,CAAR;AAGA,YAAMC,QAAQ,GAAG,MAAMjB,SAAS,CAACkB,SAAV,CAAoBJ,OAApB,CAAvB;AAEAP,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAEX,KAAK,CAACe,SADP;AAELC,QAAAA,OAAO,EAAEH;AAFJ,OAAD,CAAR;AAIH,KAVD,CAUE,OAAOI,KAAP,EAAc;AACZd,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAEX,KAAK,CAACY;AADP,OAAD,CAAR;AAGH;AACJ,GAhB6B,EAgB3B,EAhB2B,CAA9B;AAkBApB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIgB,KAAK,CAACU,GAAV,EAAe;AACXd,MAAAA,UAAU,CAACI,KAAK,CAACU,GAAP,CAAV;AACH;AACJ,GAJQ,EAIN,CAACV,KAAD,CAJM,CAAT;AAMA,QAAMW,KAAK,GAAG1B,OAAO,CAAC,OAAO;AAAES,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAP,CAAD,EAA0C,CAACF,KAAD,EAAQC,QAAR,EAAkBC,UAAlB,CAA1C,CAArB;;AAEA,MAAIF,KAAK,CAACkB,OAAV,EAAmB;AACf,wBAAO,QAAC,OAAD;AAAS,MAAA,IAAI;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBAAO,QAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAED,KAAzB;AAAA,cAAiCZ;AAAjC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAnCD;;GAAMD,e;UAEYX,W;;;KAFZW,e;;AAqCN,MAAMe,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM;AAAEnB,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAAkCb,UAAU,CAACc,OAAD,CAAlD;;AAEA,QAAMiB,aAAa,GAAIC,MAAD,IAAsB;AACxCpB,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEX,KAAK,CAACe,SADP;AAELC,MAAAA,OAAO,EAAEO;AAFJ,KAAD,CAAR;AAIH,GALD;;AAOA,QAAMC,QAAQ,GAAIC,KAAD,IAAmB;AAChCtB,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEX,KAAK,CAAC0B,SADP;AAELV,MAAAA,OAAO,EAAES;AAFJ,KAAD,CAAR;AAIH,GALD;;AAOA,QAAME,WAAW,GAAIF,KAAD,IAAmB;AACnCtB,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEX,KAAK,CAAC4B,YADP;AAELZ,MAAAA,OAAO,EAAES;AAFJ,KAAD,CAAR;AAIH,GALD;;AAOA,SAAO,EAAE,GAAGvB,KAAL;AAAYoB,IAAAA,aAAZ;AAA2BE,IAAAA,QAA3B;AAAqCG,IAAAA,WAArC;AAAkDvB,IAAAA;AAAlD,GAAP;AACH,CAzBD;;IAAMiB,S;;AA2BN,SAASf,eAAT,EAA0Be,SAA1B","sourcesContent":["import React, {\n    createContext,\n    FC,\n    ReactNode,\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useReducer,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport staffsApi from '../../../../api/staff-api';\nimport { Loading } from '../../../../components';\nimport { IStaff } from '../../../../models';\nimport { IState } from '../../../../store/rootReducer';\nimport { IContext } from './interface';\nimport { initialState, reducer } from './reducer';\nimport * as types from './types';\n\nconst initialContext = {\n    state: initialState,\n    dispatch: () => {},\n    loadStaffs: () => {},\n};\n\nconst Context = createContext<IContext>(initialContext);\n\ninterface Props {\n    children: ReactNode;\n}\n\nconst ProviderAccount: FC<Props> = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const store = useSelector((state: IState) => state.store.data);\n\n    const loadStaffs = useCallback(async (storeId: string) => {\n        try {\n            dispatch({\n                type: types.LOADING,\n            });\n            const response = await staffsApi.getStaffs(storeId);\n\n            dispatch({\n                type: types.LOAD_DONE,\n                payload: response,\n            });\n        } catch (error) {\n            dispatch({\n                type: types.LOADING,\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (store._id) {\n            loadStaffs(store._id);\n        }\n    }, [store]);\n\n    const value = useMemo(() => ({ state, dispatch, loadStaffs }), [state, dispatch, loadStaffs]);\n\n    if (state.loading) {\n        return <Loading full />;\n    }\n\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n\nconst useStaffs = () => {\n    const { state, dispatch, loadStaffs } = useContext(Context);\n\n    const setListStaffs = (staffs: IStaff[]) => {\n        dispatch({\n            type: types.LOAD_DONE,\n            payload: staffs,\n        });\n    };\n\n    const addStaff = (staff: IStaff) => {\n        dispatch({\n            type: types.ADD_STAFF,\n            payload: staff,\n        });\n    };\n\n    const removeStaff = (staff: IStaff) => {\n        dispatch({\n            type: types.REMOVE_STAFF,\n            payload: staff,\n        });\n    };\n\n    return { ...state, setListStaffs, addStaff, removeStaff, loadStaffs };\n};\n\nexport { ProviderAccount, useStaffs };\n"]},"metadata":{},"sourceType":"module"}