{"ast":null,"code":"import axios from './axios-client';\nconst basePath = '/store/v1/stores';\nconst storeApi = {\n  getStores: async () => {\n    const response = await axios({\n      method: 'GET',\n      url: basePath\n    });\n    return response.data;\n  },\n  createStore: async data => {\n    const response = await axios({\n      method: 'POST',\n      url: basePath,\n      data\n    });\n    return response.data;\n  },\n  getCategoryByStore: async (storeId, limit, page, search) => {\n    const response = await axios({\n      method: 'GET',\n      url: `${basePath}/${storeId}/categories`,\n      params: {\n        limit,\n        page,\n        search\n      }\n    });\n    return response.data;\n  },\n  updateStore: async (storeId, data) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}`,\n      data\n    });\n    return response.data;\n  }\n};\nexport default storeApi;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/api/store-api.ts"],"names":["axios","basePath","storeApi","getStores","response","method","url","data","createStore","getCategoryByStore","storeId","limit","page","search","params","updateStore"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AA2BA,MAAMC,QAAQ,GAAG,kBAAjB;AAEA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,SAAS,EAAE,YAA0B;AACjC,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAAC;AACzBK,MAAAA,MAAM,EAAE,KADiB;AAEzBC,MAAAA,GAAG,EAAEL;AAFoB,KAAD,CAA5B;AAKA,WAAOG,QAAQ,CAACG,IAAhB;AACH,GARY;AAUbC,EAAAA,WAAW,EAAE,MAAOD,IAAP,IAOO;AAChB,UAAMH,QAAQ,GAAG,MAAMJ,KAAK,CAAC;AACzBK,MAAAA,MAAM,EAAE,MADiB;AAEzBC,MAAAA,GAAG,EAAEL,QAFoB;AAGzBM,MAAAA;AAHyB,KAAD,CAA5B;AAMA,WAAOH,QAAQ,CAACG,IAAhB;AACH,GAzBY;AA2BbE,EAAAA,kBAAkB,EAAE,OAChBC,OADgB,EAEhBC,KAFgB,EAGhBC,IAHgB,EAIhBC,MAJgB,KAKY;AAC5B,UAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAAC;AACzBK,MAAAA,MAAM,EAAE,KADiB;AAEzBC,MAAAA,GAAG,EAAG,GAAEL,QAAS,IAAGS,OAAQ,aAFH;AAGzBI,MAAAA,MAAM,EAAE;AACJH,QAAAA,KADI;AAEJC,QAAAA,IAFI;AAGJC,QAAAA;AAHI;AAHiB,KAAD,CAA5B;AAUA,WAAOT,QAAQ,CAACG,IAAhB;AACH,GA5CY;AA8CbQ,EAAAA,WAAW,EAAE,OAAOL,OAAP,EAAwBH,IAAxB,KAAoE;AAC7E,UAAMH,QAAQ,GAAG,MAAMJ,KAAK,CAAC;AACzBK,MAAAA,MAAM,EAAE,KADiB;AAEzBC,MAAAA,GAAG,EAAG,GAAEL,QAAS,IAAGS,OAAQ,EAFH;AAGzBH,MAAAA;AAHyB,KAAD,CAA5B;AAMA,WAAOH,QAAQ,CAACG,IAAhB;AACH;AAtDY,CAAjB;AAyDA,eAAeL,QAAf","sourcesContent":["import axios from './axios-client';\nimport { EBusinessType, IStore, IStoreCategory, SaleChannelId } from '../models';\n\nexport interface IDataCreateStore {\n    name: string;\n    address: string;\n    province: string;\n    district: string;\n    ward: string;\n    phoneNo: string;\n    saleChannels?: SaleChannelId[];\n}\n\nexport interface IDataUpdateStore {\n    name?: string;\n    phoneNo?: string;\n    address?: string;\n    province?: string;\n    district?: string;\n    ward?: string;\n    saleChannels?: SaleChannelId[];\n    logoUrl?: string;\n    email?: string;\n    fax?: string;\n    businessType?: typeof EBusinessType;\n}\n\nconst basePath = '/store/v1/stores';\n\nconst storeApi = {\n    getStores: async (): Promise<any> => {\n        const response = await axios({\n            method: 'GET',\n            url: basePath,\n        });\n\n        return response.data;\n    },\n\n    createStore: async (data: {\n        name: string;\n        address: string;\n        province: string;\n        district: string;\n        ward: string;\n        phoneNo: string;\n    }): Promise<any> => {\n        const response = await axios({\n            method: 'POST',\n            url: basePath,\n            data,\n        });\n\n        return response.data;\n    },\n\n    getCategoryByStore: async (\n        storeId: string,\n        limit?: number,\n        page?: number,\n        search?: string\n    ): Promise<IStoreCategory[]> => {\n        const response = await axios({\n            method: 'GET',\n            url: `${basePath}/${storeId}/categories`,\n            params: {\n                limit,\n                page,\n                search,\n            },\n        });\n\n        return response.data;\n    },\n\n    updateStore: async (storeId: string, data: IDataUpdateStore): Promise<IStore> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}`,\n            data,\n        });\n\n        return response.data;\n    },\n};\n\nexport default storeApi;\n"]},"metadata":{},"sourceType":"module"}