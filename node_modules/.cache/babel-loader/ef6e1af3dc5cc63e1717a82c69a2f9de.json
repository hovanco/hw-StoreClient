{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/create-store/form-create-store.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Form, Input } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport storeApi from '../../api/store-api';\nimport { UnlockOutlined, UserOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  createStore,\n  updateStore\n} = storeApi;\nexport let ETypeForm;\n\n(function (ETypeForm) {\n  ETypeForm[\"NEW\"] = \"1\";\n  ETypeForm[\"EDIT\"] = \"2\";\n})(ETypeForm || (ETypeForm = {}));\n\nconst size = 'large';\nconst style = {\n  width: '100%'\n};\n\nconst FormCreateStore = ({\n  type = ETypeForm.NEW\n}) => {\n  _s();\n\n  // const dispatch = useDispatch();\n  // const store = useSelector((state: IState) => state.store.data);\n  // const [form] = useForm();\n  // const location = useLocation();\n  // const regexPhone = /^((\\+84|84|02[0-9])|(0[3|5|7|8|9]))+([0-9]{8})\\b/;\n  // const [disabled, setDisabled] = useState(false);\n  // const [name, setName] = useState(\"\");\n  // const [address, setAddress] = useState(\"\");\n  // const [phoneNo, setPhoneNo] = useState(\"\");\n  // useEffect(() => {\n  //     if (name === \"\" || regexPhone.test(phoneNo) === false || address === \"\") {\n  //         setDisabled(true);\n  //     } else {\n  //         setDisabled(false);\n  //     }\n  // }, [name, phoneNo, address]);\n  // const handleChange = (e) => {\n  //     const { name, value } = e.target;\n  //     console.log(name);\n  //     console.log(\"sdt :\",name.phoneNo);\n  //     console.log(\"name :\",name.name);\n  //     console.log(\"address :\",name.address);\n  //     switch(name) {\n  //         case 'name':\n  //           setName(value);\n  //           console.log(\"name: \", typeof(name));\n  //           break;\n  //         case 'address':\n  //             setAddress(value);\n  //             break;\n  //         case 'phoneNo':\n  //           setPhoneNo(value);\n  //           break;\n  //         default:\n  //     }\n  // };\n  // const onFinish = (values: ETypeForm) => {\n  //     console.log(\"Success:\", values);\n  //     console.log(\"Ok roi ban nha\");\n  //     setDisabled(false);\n  // };\n  // const onFinishFailed = (errorInfo: ValidateErrorEntity) => {\n  //     console.log(\"Failed:\", errorInfo);\n  //     console.log(\"Fail roi ban oi\");\n  //     setDisabled(true);\n  // };\n  // // const [progress, setProgress] = useState<boolean>(true);\n  // // const [loading, setLoading] = useState<boolean>(false);\n  // // const [province, setProvince] = useState<string | undefined>(() => {\n  // //     if (store) {\n  // //         return store.province as string;\n  // //     }\n  // //     return undefined;\n  // // });\n  // // const [district, setDistrict] = useState<string | undefined>(() => {\n  // //     if (store) {\n  // //         return store.district as string;\n  // //     }\n  // //     return undefined;\n  // // });\n  // // const { loadingProvince, provinces } = useProvices();\n  // // const { loadingDistrict, districts } = useDistricts(province, true);\n  // // const { loadingWard, wards } = useWards({ province, district, loading: true });\n  // // const onChangeProvince = (value: string) => {\n  // //     setProvince(value);\n  // //     setDistrict(undefined)\n  // //     removeField('district');\n  // //     removeField('ward')\n  // // };\n  // // const onChangeDistrict = (value: string) => {\n  // //     setDistrict(value);\n  // //     removeField('ward');\n  // // };\n  // // const removeField = (field: string) => {\n  // //     form.setFieldsValue({\n  // //         [field]: undefined,\n  // //     });\n  // // };\n  // // const createNewStore = async (values: IDataCreateStore) => {\n  // //     try {\n  // //         if (localStorage.getItem('shortLiveToken') !== null)\n  // //             values.saleChannels = [SaleChannelId.FACEBOOK];\n  // //         const querySearch: {\n  // //             saleChannel?: SaleChannelId;\n  // //         } = queryString.parse(location.search.replace('?', ''));\n  // //         let data = values;\n  // //         if (querySearch.saleChannel && validChannel(querySearch.saleChannel)) {\n  // //             data = {\n  // //                 ...values,\n  // //                 saleChannels: [querySearch.saleChannel],\n  // //             };\n  // //         }\n  // //         const result = await createStore(data);\n  // //         await updateUserStorePreference({\n  // //             storeId: result._id,\n  // //             hideNewUserGuide: false,\n  // //         });\n  // //         dispatch({\n  // //             type: types.SET_STORE,\n  // //             payload: result,\n  // //         });\n  // //     } catch (error) {\n  // //         if (get(error, 'response.status') === 409) {\n  // //             return message.error('Tên cửa hàng đã tồn tại. Vui lòng nhập tên khác');\n  // //         }\n  // //         return message.error('Lỗi tạo cửa hàng');\n  // //     } finally {\n  // //         setLoading(false);\n  // //     }\n  // // };\n  // // const editStore = async (values: IDataCreateStore) => {\n  // //     try {\n  // //         const result = await updateStore(store._id as string, {\n  // //             ...values,\n  // //         });\n  // //         dispatch({\n  // //             type: types.SET_STORE,\n  // //             payload: result,\n  // //         });\n  // //     } catch (error) {\n  // //         message.error('Lỗi chỉnh sửa cửa hàng');\n  // //     } finally {\n  // //         setLoading(false);\n  // //     }\n  // // };\n  // // const onFinish = (values: IDataCreateStore) => {\n  // //     setLoading(true);\n  // //     if (type === ETypeForm.NEW) {\n  // //         createNewStore(values);\n  // //     } else {\n  // //         editStore(values);\n  // //     }\n  // // };\n  // // useEffect(() => {\n  // //     if (\n  // //         (!loadingDistrict && !loadingWard && type === ETypeForm.EDIT) ||\n  // //         type === ETypeForm.NEW\n  // //     ) {\n  // //         setProgress(false);\n  // //     }\n  // // }, [loadingDistrict, loadingWard, type]);\n  // // if (progress) {\n  // //     return (\n  // //         <div style={{ height: 320 }}>\n  // //             <Loading full />\n  // //         </div>\n  // //     );\n  // // }\n  // return (\n  //     <Form\n  //         layout=\"vertical\"\n  //         // form={form}\n  //         // // onFinish={onFinish}\n  //         // initialValues={{\n  //         //     ...pick(store, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n  //         // }}\n  //         // form={form}\n  //         onFinish={onFinish}\n  //         onFinishFailed={onFinishFailed}\n  //     >\n  //         <Form.Item\n  //             name=\"name\"\n  //             label=\"Tên cửa hàng\"\n  //             rules={[{ required: true, message: 'Vui lòng nhập Tên cửa hàng' }]}\n  //         >\n  //             <Input\n  //                 size={size}\n  //                 placeholder=\"Tên cửa hàng\"\n  //                 autoFocus\n  //                 name=\"name\"\n  //                 value={name}\n  //                 onChange={handleChange}\n  //             />\n  //         </Form.Item>\n  //         <Form.Item\n  //             name=\"phoneNo\"\n  //             label=\"Số điện thoại\"\n  //             rules={[\n  //                 { required: true, message: 'Vui lòng nhập Số điện thoại' },\n  //                 {\n  //                     validator: rules.validatePhone,\n  //                 },\n  //             ]}\n  //         >\n  //             <Input\n  //                 style={style}\n  //                 size={size}\n  //                 placeholder=\"Số điện thoại cửa hàng\"\n  //                 pattern={`${regexPhone}`}\n  //                 name=\"phoneNo\"\n  //                 value={phoneNo}\n  //                 onChange={handleChange}\n  //             />\n  //         </Form.Item>\n  //         {/* <Row gutter={15}>\n  //             <Col md={8}>\n  //                 <Form.Item\n  //                     name=\"province\"\n  //                     label=\"Tỉnh/thành phố\"\n  //                     rules={[\n  //                         {\n  //                             required: true,\n  //                             message: 'Chọn tỉnh/thành phố',\n  //                         },\n  //                     ]}\n  //                 >\n  //                     <Select\n  //                         showSearch\n  //                         style={{ width: '100%' }}\n  //                         optionFilterProp=\"children\"\n  //                         onChange={onChangeProvince}\n  //                         filterOption={(input: string, option: any) =>\n  //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n  //                         }\n  //                         loading={loadingProvince}\n  //                         onFocus={disabledAutosuggestion}\n  //                         placeholder=\"Chọn tỉnh/thành phố\"\n  //                     >\n  //                         <Select.Option value={'-1'} key={'-1'} disabled>\n  //                             Chọn tỉnh/thành phố\n  //                         </Select.Option>\n  //                         {map(provinces, (province: Province) => (\n  //                             <Select.Option value={province.code} key={province.code}>\n  //                                 {province.name}\n  //                             </Select.Option>\n  //                         ))}\n  //                     </Select>\n  //                 </Form.Item>\n  //             </Col>\n  //             <Col md={8}>\n  //                 <Form.Item\n  //                     name=\"district\"\n  //                     label=\"Quận/huyện\"\n  //                     rules={[{ required: true, message: 'Chọn quận/huyện' }]}\n  //                 >\n  //                     <Select\n  //                         size={size}\n  //                         placeholder=\"Chọn quận/huyện\"\n  //                         onChange={onChangeDistrict}\n  //                         showSearch\n  //                         filterOption={(input, option: any) =>\n  //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n  //                         }\n  //                         disabled={!province}\n  //                         loading={loadingDistrict}\n  //                         onFocus={disabledAutosuggestion}\n  //                     >\n  //                         <Select.Option value={'-1'} key={'-1'} disabled>\n  //                             Chọn quận/huyện\n  //                         </Select.Option>\n  //                         {map(districts, (district: District) => (\n  //                             <Select.Option value={district.code} key={district.code}>\n  //                                 {district.name}\n  //                             </Select.Option>\n  //                         ))}\n  //                     </Select>\n  //                 </Form.Item>\n  //             </Col>\n  //             <Col md={8}>\n  //                 <Form.Item\n  //                     name=\"ward\"\n  //                     label=\"Xã/phường\"\n  //                     rules={[{ required: true, message: 'Chọn xã/phường' }]}\n  //                 >\n  //                     <Select\n  //                         size={size}\n  //                         placeholder=\"Chọn xã/phường\"\n  //                         showSearch\n  //                         filterOption={(input, option: any) =>\n  //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n  //                         }\n  //                         disabled={!district}\n  //                         loading={loadingWard}\n  //                         onFocus={disabledAutosuggestion}\n  //                     >\n  //                         <Select.Option value={'-1'} key={'-1'} disabled>\n  //                             Chọn xã/phường\n  //                         </Select.Option>\n  //                         {map(wards, (ward: Ward) => {\n  //                             return (\n  //                                 <Select.Option value={ward.code} key={ward.code}>\n  //                                     {ward.name}\n  //                                 </Select.Option>\n  //                             );\n  //                         })}\n  //                     </Select>\n  //                 </Form.Item>\n  //             </Col>\n  //         </Row> */}\n  //         <Form.Item\n  //             name=\"address\"\n  //             rules={[{ required: true, message: 'Vui lòng nhập Địa chỉ' }]}\n  //             label=\"Địa chỉ\"\n  //         >\n  //             <Input.TextArea\n  //                 autoComplete=\"off\"\n  //                 placeholder=\"Điền địa chỉ cửa hàng\"\n  //                 rows={3}\n  //                 name=\"address\"\n  //                 value={address}\n  //                 onChange={handleChange}\n  //             ></Input.TextArea>\n  //         </Form.Item>\n  //         {/* <Form.Item>\n  //             <Button type=\"primary\" size={size} htmlType=\"submit\" block  disabled={disabled} >\n  //                 {type === ETypeForm.EDIT ? 'Chỉnh sửa cửa hàng' : 'Tạo cửa hàng'}\n  //             </Button>\n  //         </Form.Item> */}\n  //         <Form.Item className=\"submit\">\n  //           <Button type=\"primary\" htmlType=\"submit\" block disabled={disabled}>\n  //             Login\n  //           </Button>\n  //         </Form.Item>\n  //     </Form>\n  // );\n  const [disabled, setDisabled] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [desc, setDesc] = useState('');\n  useEffect(() => {\n    if (username === '' || password === '' || desc === '') {\n      setDisabled(true);\n    } else {\n      setDisabled(false);\n    }\n  }, [username, password, desc]);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    switch (name) {\n      case 'username':\n        setUsername(value);\n        break;\n\n      case 'password':\n        setPassword(value);\n        break;\n\n      case 'desc':\n        setDesc(value);\n        break;\n\n      default:\n    } // e.target.name === 'username'\n    //   ? setUsername(e.target.value)\n    //   : setPassword(e.target.value);\n    // console.log(buildFunc[name](value));\n\n  };\n\n  const onFinish = values => {\n    console.log('Success:', values);\n    setDisabled(false);\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n    setDisabled(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    className: \"login\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"card\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onFinish: onFinish,\n        onFinishFailed: onFinishFailed,\n        size: \"large\",\n        layout: \"vertical\",\n        children: /*#__PURE__*/_jsxDEV(Space, {\n          direction: \"vertical\",\n          size: \"middle\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"username\",\n            rules: [{\n              required: true,\n              message: 'Please input your username!'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              name: \"username\",\n              prefix: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 25\n              }, this),\n              placeholder: \"Username\",\n              value: username,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"desc\",\n            rules: [{\n              required: true,\n              message: 'Please input your desc!'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              name: \"desc\",\n              prefix: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 25\n              }, this),\n              placeholder: \"desc\",\n              value: desc,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"password\",\n            rules: [{\n              required: true,\n              message: 'Please input your password!'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input.Password, {\n              name: \"password\",\n              prefix: /*#__PURE__*/_jsxDEV(UnlockOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 25\n              }, this),\n              placeholder: \"Password\",\n              value: password,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            className: \"submit\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              htmlType: \"submit\",\n              disabled: disabled,\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormCreateStore, \"D9joIdbkZkH21fbzP0z34hc0s88=\");\n\n_c = FormCreateStore;\nexport default FormCreateStore;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormCreateStore\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/create-store/form-create-store.tsx"],"names":["Button","Form","Input","React","useEffect","useState","storeApi","UnlockOutlined","UserOutlined","createStore","updateStore","ETypeForm","size","style","width","FormCreateStore","type","NEW","disabled","setDisabled","username","setUsername","password","setPassword","desc","setDesc","handleChange","e","name","value","target","onFinish","values","console","log","onFinishFailed","errorInfo","required","message"],"mappings":";;;AAAA,SAASA,MAAT,EAAsBC,IAAtB,EAA4BC,KAA5B,QAA+D,MAA/D;AAIA,OAAOC,KAAP,IAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AAIA,OAAOC,QAAP,MAA2C,qBAA3C;AAYA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,mBAA7C;;AAIA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAA+BJ,QAArC;AAEA,WAAYK,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AASZ,MAAMC,IAAI,GAAG,OAAb;AACA,MAAMC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAd;;AAQA,MAAMC,eAA0B,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAGL,SAAS,CAACM;AAAnB,CAAD,KAA8B;AAAA;;AAC7D;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,KAAD,CAAxC;AACF,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,QAAQ,KAAK,EAAb,IAAmBE,QAAQ,KAAK,EAAhC,IAAsCE,IAAI,KAAK,EAAnD,EAAuD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","sourcesContent":["import { Button, Col, Form, Input, message, Row, Select } from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\nimport { get, map, pick } from 'lodash';\nimport * as queryString from 'querystring';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { setFlagsFromString } from 'v8';\nimport storeApi, { IDataCreateStore } from '../../api/store-api';\nimport { updateUserStorePreference } from '../../api/user-store-preference-api';\nimport { Loading } from '../../components';\nimport { disabledAutosuggestion, validChannel } from '../../helper';\nimport rules from '../../helper/rules';\nimport { useDistricts, useProvices, useWards } from '../../hook/useLocation';\nimport { SaleChannelId } from '../../models';\nimport types from '../../reducers/storeState/type';\nimport { IState } from '../../store/rootReducer';\nimport { District, Province, Ward } from './interface';\n\nimport { ValidateErrorEntity } from \"rc-field-form/es/interface\";\nimport { UnlockOutlined, UserOutlined } from '@ant-design/icons';\n\n\n\nconst { createStore, updateStore } = storeApi;\n\nexport enum ETypeForm {\n    NEW = '1',\n    EDIT = '2',\n}\ninterface Props {\n    type?: ETypeForm;\n}\n\n\nconst size = 'large';\nconst style = { width: '100%' };\n\ninterface LoginForm {\n    username: string;\n    password: string;\n    desc: string;\n  }\n\nconst FormCreateStore: FC<Props> = ({ type = ETypeForm.NEW }) => {\n    // const dispatch = useDispatch();\n    // const store = useSelector((state: IState) => state.store.data);\n    // const [form] = useForm();\n    // const location = useLocation();\n\n    // const regexPhone = /^((\\+84|84|02[0-9])|(0[3|5|7|8|9]))+([0-9]{8})\\b/;\n\n\n\n   \n    // const [disabled, setDisabled] = useState(false);\n    // const [name, setName] = useState(\"\");\n    // const [address, setAddress] = useState(\"\");\n    // const [phoneNo, setPhoneNo] = useState(\"\");\n\n\n    \n    // useEffect(() => {\n    //     if (name === \"\" || regexPhone.test(phoneNo) === false || address === \"\") {\n    //         setDisabled(true);\n    //     } else {\n    //         setDisabled(false);\n    //     }\n    // }, [name, phoneNo, address]);\n\n\n    // const handleChange = (e) => {\n\n    //     const { name, value } = e.target;\n\n    //     console.log(name);\n    //     console.log(\"sdt :\",name.phoneNo);\n    //     console.log(\"name :\",name.name);\n    //     console.log(\"address :\",name.address);\n\n\n\n    //     switch(name) {\n    //         case 'name':\n    //           setName(value);\n    //           console.log(\"name: \", typeof(name));\n    //           break;\n    //         case 'address':\n    //             setAddress(value);\n    //             break;\n    //         case 'phoneNo':\n    //           setPhoneNo(value);\n    //           break;\n    //         default:\n    //     }\n\n\n    // };\n\n    \n\n    // const onFinish = (values: ETypeForm) => {\n    //     console.log(\"Success:\", values);\n    //     console.log(\"Ok roi ban nha\");\n    //     setDisabled(false);\n    // };\n\n    // const onFinishFailed = (errorInfo: ValidateErrorEntity) => {\n    //     console.log(\"Failed:\", errorInfo);\n    //     console.log(\"Fail roi ban oi\");\n    //     setDisabled(true);\n    // };\n\n\n\n\n\n\n\n\n    // // const [progress, setProgress] = useState<boolean>(true);\n    // // const [loading, setLoading] = useState<boolean>(false);\n    // // const [province, setProvince] = useState<string | undefined>(() => {\n    // //     if (store) {\n    // //         return store.province as string;\n    // //     }\n    // //     return undefined;\n    // // });\n    // // const [district, setDistrict] = useState<string | undefined>(() => {\n    // //     if (store) {\n    // //         return store.district as string;\n    // //     }\n    // //     return undefined;\n    // // });\n\n    // // const { loadingProvince, provinces } = useProvices();\n    // // const { loadingDistrict, districts } = useDistricts(province, true);\n    // // const { loadingWard, wards } = useWards({ province, district, loading: true });\n\n    // // const onChangeProvince = (value: string) => {\n    // //     setProvince(value);\n    // //     setDistrict(undefined)\n    // //     removeField('district');\n    // //     removeField('ward')\n    // // };\n\n    // // const onChangeDistrict = (value: string) => {\n    // //     setDistrict(value);\n\n    // //     removeField('ward');\n    // // };\n\n    // // const removeField = (field: string) => {\n    // //     form.setFieldsValue({\n    // //         [field]: undefined,\n    // //     });\n    // // };\n\n    // // const createNewStore = async (values: IDataCreateStore) => {\n    // //     try {\n    // //         if (localStorage.getItem('shortLiveToken') !== null)\n    // //             values.saleChannels = [SaleChannelId.FACEBOOK];\n\n    // //         const querySearch: {\n    // //             saleChannel?: SaleChannelId;\n    // //         } = queryString.parse(location.search.replace('?', ''));\n\n    // //         let data = values;\n\n    // //         if (querySearch.saleChannel && validChannel(querySearch.saleChannel)) {\n    // //             data = {\n    // //                 ...values,\n    // //                 saleChannels: [querySearch.saleChannel],\n    // //             };\n    // //         }\n\n    // //         const result = await createStore(data);\n\n    // //         await updateUserStorePreference({\n    // //             storeId: result._id,\n    // //             hideNewUserGuide: false,\n    // //         });\n\n    // //         dispatch({\n    // //             type: types.SET_STORE,\n    // //             payload: result,\n    // //         });\n    // //     } catch (error) {\n    // //         if (get(error, 'response.status') === 409) {\n    // //             return message.error('Tên cửa hàng đã tồn tại. Vui lòng nhập tên khác');\n    // //         }\n    // //         return message.error('Lỗi tạo cửa hàng');\n    // //     } finally {\n    // //         setLoading(false);\n    // //     }\n    // // };\n\n    // // const editStore = async (values: IDataCreateStore) => {\n    // //     try {\n    // //         const result = await updateStore(store._id as string, {\n    // //             ...values,\n    // //         });\n\n    // //         dispatch({\n    // //             type: types.SET_STORE,\n    // //             payload: result,\n    // //         });\n    // //     } catch (error) {\n    // //         message.error('Lỗi chỉnh sửa cửa hàng');\n    // //     } finally {\n    // //         setLoading(false);\n    // //     }\n    // // };\n\n    // // const onFinish = (values: IDataCreateStore) => {\n    // //     setLoading(true);\n    // //     if (type === ETypeForm.NEW) {\n    // //         createNewStore(values);\n    // //     } else {\n    // //         editStore(values);\n    // //     }\n    // // };\n\n    // // useEffect(() => {\n    // //     if (\n    // //         (!loadingDistrict && !loadingWard && type === ETypeForm.EDIT) ||\n    // //         type === ETypeForm.NEW\n    // //     ) {\n    // //         setProgress(false);\n    // //     }\n    // // }, [loadingDistrict, loadingWard, type]);\n\n    // // if (progress) {\n    // //     return (\n    // //         <div style={{ height: 320 }}>\n    // //             <Loading full />\n    // //         </div>\n    // //     );\n    // // }\n\n    // return (\n    //     <Form\n    //         layout=\"vertical\"\n    //         // form={form}\n    //         // // onFinish={onFinish}\n    //         // initialValues={{\n    //         //     ...pick(store, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n    //         // }}\n\n    //         // form={form}\n    //         onFinish={onFinish}\n    //         onFinishFailed={onFinishFailed}\n\n    //     >\n    //         <Form.Item\n    //             name=\"name\"\n    //             label=\"Tên cửa hàng\"\n    //             rules={[{ required: true, message: 'Vui lòng nhập Tên cửa hàng' }]}\n    //         >\n    //             <Input\n    //                 size={size}\n    //                 placeholder=\"Tên cửa hàng\"\n    //                 autoFocus\n\n    //                 name=\"name\"\n    //                 value={name}\n    //                 onChange={handleChange}\n    //             />\n    //         </Form.Item>\n\n    //         <Form.Item\n    //             name=\"phoneNo\"\n    //             label=\"Số điện thoại\"\n    //             rules={[\n    //                 { required: true, message: 'Vui lòng nhập Số điện thoại' },\n    //                 {\n    //                     validator: rules.validatePhone,\n    //                 },\n    //             ]}\n    //         >\n    //             <Input\n    //                 style={style}\n    //                 size={size}\n    //                 placeholder=\"Số điện thoại cửa hàng\"\n\n                    \n    //                 pattern={`${regexPhone}`}\n    //                 name=\"phoneNo\"\n    //                 value={phoneNo}\n    //                 onChange={handleChange}\n    //             />\n    //         </Form.Item>\n\n    //         {/* <Row gutter={15}>\n    //             <Col md={8}>\n    //                 <Form.Item\n    //                     name=\"province\"\n    //                     label=\"Tỉnh/thành phố\"\n    //                     rules={[\n    //                         {\n    //                             required: true,\n    //                             message: 'Chọn tỉnh/thành phố',\n    //                         },\n    //                     ]}\n    //                 >\n    //                     <Select\n    //                         showSearch\n    //                         style={{ width: '100%' }}\n    //                         optionFilterProp=\"children\"\n    //                         onChange={onChangeProvince}\n    //                         filterOption={(input: string, option: any) =>\n    //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    //                         }\n    //                         loading={loadingProvince}\n    //                         onFocus={disabledAutosuggestion}\n    //                         placeholder=\"Chọn tỉnh/thành phố\"\n    //                     >\n    //                         <Select.Option value={'-1'} key={'-1'} disabled>\n    //                             Chọn tỉnh/thành phố\n    //                         </Select.Option>\n\n    //                         {map(provinces, (province: Province) => (\n    //                             <Select.Option value={province.code} key={province.code}>\n    //                                 {province.name}\n    //                             </Select.Option>\n    //                         ))}\n    //                     </Select>\n    //                 </Form.Item>\n    //             </Col>\n\n    //             <Col md={8}>\n    //                 <Form.Item\n    //                     name=\"district\"\n    //                     label=\"Quận/huyện\"\n    //                     rules={[{ required: true, message: 'Chọn quận/huyện' }]}\n\n\n    //                 >\n    //                     <Select\n    //                         size={size}\n    //                         placeholder=\"Chọn quận/huyện\"\n    //                         onChange={onChangeDistrict}\n    //                         showSearch\n    //                         filterOption={(input, option: any) =>\n    //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    //                         }\n    //                         disabled={!province}\n    //                         loading={loadingDistrict}\n    //                         onFocus={disabledAutosuggestion}\n    //                     >\n    //                         <Select.Option value={'-1'} key={'-1'} disabled>\n    //                             Chọn quận/huyện\n    //                         </Select.Option>\n    //                         {map(districts, (district: District) => (\n    //                             <Select.Option value={district.code} key={district.code}>\n    //                                 {district.name}\n    //                             </Select.Option>\n    //                         ))}\n    //                     </Select>\n    //                 </Form.Item>\n    //             </Col>\n\n    //             <Col md={8}>\n    //                 <Form.Item\n    //                     name=\"ward\"\n    //                     label=\"Xã/phường\"\n    //                     rules={[{ required: true, message: 'Chọn xã/phường' }]}\n    //                 >\n    //                     <Select\n    //                         size={size}\n    //                         placeholder=\"Chọn xã/phường\"\n    //                         showSearch\n    //                         filterOption={(input, option: any) =>\n    //                             option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    //                         }\n    //                         disabled={!district}\n    //                         loading={loadingWard}\n    //                         onFocus={disabledAutosuggestion}\n    //                     >\n    //                         <Select.Option value={'-1'} key={'-1'} disabled>\n    //                             Chọn xã/phường\n    //                         </Select.Option>\n    //                         {map(wards, (ward: Ward) => {\n    //                             return (\n    //                                 <Select.Option value={ward.code} key={ward.code}>\n    //                                     {ward.name}\n    //                                 </Select.Option>\n    //                             );\n    //                         })}\n    //                     </Select>\n    //                 </Form.Item>\n    //             </Col>\n    //         </Row> */}\n\n    //         <Form.Item\n    //             name=\"address\"\n    //             rules={[{ required: true, message: 'Vui lòng nhập Địa chỉ' }]}\n    //             label=\"Địa chỉ\"\n    //         >\n    //             <Input.TextArea\n    //                 autoComplete=\"off\"\n    //                 placeholder=\"Điền địa chỉ cửa hàng\"\n    //                 rows={3}\n\n    //                 name=\"address\"\n    //                 value={address}\n    //                 onChange={handleChange}\n    //             ></Input.TextArea>\n    //         </Form.Item>\n\n    //         {/* <Form.Item>\n    //             <Button type=\"primary\" size={size} htmlType=\"submit\" block  disabled={disabled} >\n    //                 {type === ETypeForm.EDIT ? 'Chỉnh sửa cửa hàng' : 'Tạo cửa hàng'}\n    //             </Button>\n    //         </Form.Item> */}\n    //         <Form.Item className=\"submit\">\n    //           <Button type=\"primary\" htmlType=\"submit\" block disabled={disabled}>\n    //             Login\n    //           </Button>\n    //         </Form.Item>\n    //     </Form>\n    // );\n    const [disabled, setDisabled] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [desc, setDesc] = useState('');\n\n  useEffect(() => {\n    if (username === '' || password === '' || desc === '') {\n      setDisabled(true);\n    } else {\n      setDisabled(false);\n    }\n  }, [username, password, desc]);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'username':\n        setUsername(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      case 'desc':\n        setDesc(value);\n        break;\n\n      default: \n    }\n\n    // e.target.name === 'username'\n    //   ? setUsername(e.target.value)\n    //   : setPassword(e.target.value);\n\n    // console.log(buildFunc[name](value));\n  };\n\n  const onFinish = (values: LoginForm) => {\n    console.log('Success:', values);\n    setDisabled(false);\n  };\n\n  const onFinishFailed = (errorInfo: ValidateErrorEntity) => {\n    console.log('Failed:', errorInfo);\n    setDisabled(true);\n  };\n\n  return (\n    <Layout className=\"login\">\n      <Card className=\"card\">\n        <Form\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          size=\"large\"\n          layout=\"vertical\"\n        >\n          <Space direction=\"vertical\" size=\"middle\">\n            <Form.Item\n              name=\"username\"\n              rules={[\n                { required: true, message: 'Please input your username!' }\n              ]}\n            >\n              <Input\n                name=\"username\"\n                prefix={<UserOutlined />}\n                placeholder=\"Username\"\n                value={username}\n                onChange={handleChange}\n              />\n            </Form.Item>\n\n            <Form.Item\n              name=\"desc\"\n              rules={[{ required: true, message: 'Please input your desc!' }]}\n            >\n              <Input\n                name=\"desc\"\n                prefix={<UserOutlined />}\n                placeholder=\"desc\"\n                value={desc}\n                onChange={handleChange}\n              />\n            </Form.Item>\n\n            <Form.Item\n              name=\"password\"\n              rules={[\n                { required: true, message: 'Please input your password!' }\n              ]}\n            >\n              <Input.Password\n                name=\"password\"\n                prefix={<UnlockOutlined />}\n                placeholder=\"Password\"\n                value={password}\n                onChange={handleChange}\n              />\n            </Form.Item>\n\n            <Form.Item className=\"submit\">\n              <Button type=\"primary\" htmlType=\"submit\" disabled={disabled}>\n                Login\n              </Button>\n            </Form.Item>\n          </Space>\n        </Form>\n      </Card>\n    </Layout>\n  );\n};\n\nexport default FormCreateStore;\n"]},"metadata":{},"sourceType":"module"}