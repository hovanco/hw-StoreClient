{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/create-store/form-create-store.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Form, Input } from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport storeApi from '../../api/store-api';\nimport rules from '../../helper/rules';\nimport { useDistricts, useProvices, useWards } from '../../hook/useLocation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  createStore,\n  updateStore\n} = storeApi;\nexport let ETypeForm;\n\n(function (ETypeForm) {\n  ETypeForm[\"NEW\"] = \"1\";\n  ETypeForm[\"EDIT\"] = \"2\";\n})(ETypeForm || (ETypeForm = {}));\n\nconst size = 'large';\nconst style = {\n  width: '100%'\n};\n\nconst FormCreateStore = ({\n  type = ETypeForm.NEW\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const store = useSelector(state => state.store.data);\n  const [form] = useForm();\n  const location = useLocation();\n  const [disabled, setDisabled] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [phoneNo, setPhoneNo] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  useEffect(() => {\n    if (name === \"\" || phoneNo === \"\") {\n      setDisabled(true);\n    } else {\n      setDisabled(false);\n    }\n  }, [name, phoneNo]); // const handleChange = (e:any) => {\n  //     e.target.name === \"name\"\n  //       ? setName(e.target.value)\n  //       : setPhoneNo(e.target.value);\n  // };\n\n  const handleChange = e => {\n    setName(e.target.value);\n    setPhoneNo(e.target.value);\n    setAddress(e.target.value);\n  };\n\n  const onFinish2 = values => {\n    console.log(\"Success:\", values);\n    setDisabled(true);\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log(\"Failed:\", errorInfo);\n    setDisabled(false);\n  };\n\n  const [progress, setProgress] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [province, setProvince] = useState(() => {\n    if (store) {\n      return store.province;\n    }\n\n    return undefined;\n  });\n  const [district, setDistrict] = useState(() => {\n    if (store) {\n      return store.district;\n    }\n\n    return undefined;\n  });\n  const {\n    loadingProvince,\n    provinces\n  } = useProvices();\n  const {\n    loadingDistrict,\n    districts\n  } = useDistricts(province, true);\n  const {\n    loadingWard,\n    wards\n  } = useWards({\n    province,\n    district,\n    loading: true\n  }); // const onChangeProvince = (value: string) => {\n  //     setProvince(value);\n  //     setDistrict(undefined)\n  //     removeField('district');\n  //     removeField('ward')\n  // };\n  // const onChangeDistrict = (value: string) => {\n  //     setDistrict(value);\n  //     removeField('ward');\n  // };\n  // const removeField = (field: string) => {\n  //     form.setFieldsValue({\n  //         [field]: undefined,\n  //     });\n  // };\n  // const createNewStore = async (values: IDataCreateStore) => {\n  //     try {\n  //         if (localStorage.getItem('shortLiveToken') !== null)\n  //             values.saleChannels = [SaleChannelId.FACEBOOK];\n  //         const querySearch: {\n  //             saleChannel?: SaleChannelId;\n  //         } = queryString.parse(location.search.replace('?', ''));\n  //         let data = values;\n  //         if (querySearch.saleChannel && validChannel(querySearch.saleChannel)) {\n  //             data = {\n  //                 ...values,\n  //                 saleChannels: [querySearch.saleChannel],\n  //             };\n  //         }\n  //         const result = await createStore(data);\n  //         await updateUserStorePreference({\n  //             storeId: result._id,\n  //             hideNewUserGuide: false,\n  //         });\n  //         dispatch({\n  //             type: types.SET_STORE,\n  //             payload: result,\n  //         });\n  //     } catch (error) {\n  //         if (get(error, 'response.status') === 409) {\n  //             return message.error('Tên cửa hàng đã tồn tại. Vui lòng nhập tên khác');\n  //         }\n  //         return message.error('Lỗi tạo cửa hàng');\n  //     } finally {\n  //         setLoading(false);\n  //     }\n  // };\n  // const editStore = async (values: IDataCreateStore) => {\n  //     try {\n  //         const result = await updateStore(store._id as string, {\n  //             ...values,\n  //         });\n  //         dispatch({\n  //             type: types.SET_STORE,\n  //             payload: result,\n  //         });\n  //     } catch (error) {\n  //         message.error('Lỗi chỉnh sửa cửa hàng');\n  //     } finally {\n  //         setLoading(false);\n  //     }\n  // };\n  // const onFinish = (values: IDataCreateStore) => {\n  //     setLoading(true);\n  //     if (type === ETypeForm.NEW) {\n  //         createNewStore(values);\n  //     } else {\n  //         editStore(values);\n  //     }\n  // };\n  // useEffect(() => {\n  //     if (\n  //         (!loadingDistrict && !loadingWard && type === ETypeForm.EDIT) ||\n  //         type === ETypeForm.NEW\n  //     ) {\n  //         setProgress(false);\n  //     }\n  // }, [loadingDistrict, loadingWard, type]);\n  // if (progress) {\n  //     return (\n  //         <div style={{ height: 320 }}>\n  //             <Loading full />\n  //         </div>\n  //     );\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    layout: \"vertical\" // form={form}\n    // // onFinish={onFinish}\n    // initialValues={{\n    //     ...pick(store, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n    // }}\n    ,\n    onFinish: onFinish2,\n    onFinishFailed: onFinishFailed,\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"name\",\n      label: \"T\\xEAn c\\u1EEDa h\\xE0ng\",\n      rules: [{\n        required: true,\n        message: 'Vui lòng nhập Tên cửa hàng'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        size: size,\n        placeholder: \"T\\xEAn c\\u1EEDa h\\xE0ng\",\n        autoFocus: true,\n        name: \"name\",\n        value: name,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"phoneNo\",\n      label: \"S\\u1ED1 \\u0111i\\u1EC7n tho\\u1EA1i\",\n      rules: [{\n        required: true,\n        message: 'Vui lòng nhập Số điện thoại'\n      }, {\n        validator: rules.validatePhone\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        style: style,\n        size: size,\n        placeholder: \"S\\u1ED1 \\u0111i\\u1EC7n tho\\u1EA1i c\\u1EEDa h\\xE0ng\",\n        name: \"phoneNo\",\n        value: phoneNo,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"address\",\n      rules: [{\n        required: true,\n        message: 'Vui lòng nhập Địa chỉ'\n      }],\n      label: \"\\u0110\\u1ECBa ch\\u1EC9\",\n      children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n        autoComplete: \"off\",\n        placeholder: \"\\u0110i\\u1EC1n \\u0111\\u1ECBa ch\\u1EC9 c\\u1EEDa h\\xE0ng\",\n        rows: 3,\n        name: \"address\",\n        value: address,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        size: size,\n        htmlType: \"submit\",\n        block: true,\n        loading: loading,\n        disabled: disabled,\n        children: type === ETypeForm.EDIT ? 'Chỉnh sửa cửa hàng' : 'Tạo cửa hàng'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormCreateStore, \"bhfpmlTV03202mgBZ2dxDajypS8=\", false, function () {\n  return [useDispatch, useSelector, useForm, useLocation, useProvices, useDistricts, useWards];\n});\n\n_c = FormCreateStore;\nexport default FormCreateStore;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormCreateStore\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/create-store/form-create-store.tsx"],"names":["Button","Form","Input","useForm","React","useEffect","useState","useDispatch","useSelector","useLocation","storeApi","rules","useDistricts","useProvices","useWards","createStore","updateStore","ETypeForm","size","style","width","FormCreateStore","type","NEW","dispatch","store","state","data","form","location","disabled","setDisabled","name","setName","phoneNo","setPhoneNo","address","setAddress","handleChange","e","target","value","onFinish2","values","console","log","onFinishFailed","errorInfo","progress","setProgress","loading","setLoading","province","setProvince","undefined","district","setDistrict","loadingProvince","provinces","loadingDistrict","districts","loadingWard","wards","required","message","validator","validatePhone","EDIT"],"mappings":"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","sourcesContent":["import { Button, Col, Form, Input, message, Row, Select } from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\nimport { get, map, pick } from 'lodash';\nimport * as queryString from 'querystring';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { setFlagsFromString } from 'v8';\nimport storeApi, { IDataCreateStore } from '../../api/store-api';\nimport { updateUserStorePreference } from '../../api/user-store-preference-api';\nimport { Loading } from '../../components';\nimport { disabledAutosuggestion, validChannel } from '../../helper';\nimport rules from '../../helper/rules';\nimport { useDistricts, useProvices, useWards } from '../../hook/useLocation';\nimport { SaleChannelId } from '../../models';\nimport types from '../../reducers/storeState/type';\nimport { IState } from '../../store/rootReducer';\nimport { District, Province, Ward } from './interface';\n\nimport { ValidateErrorEntity } from \"rc-field-form/es/interface\";\n\n\nconst { createStore, updateStore } = storeApi;\n\nexport enum ETypeForm {\n    NEW = '1',\n    EDIT = '2',\n}\ninterface Props {\n    type?: ETypeForm;\n}\n\n\nconst size = 'large';\nconst style = { width: '100%' };\n\nconst FormCreateStore: FC<Props> = ({ type = ETypeForm.NEW }) => {\n    const dispatch = useDispatch();\n    const store = useSelector((state: IState) => state.store.data);\n    const [form] = useForm();\n    const location = useLocation();\n\n\n\n    const [disabled, setDisabled] = useState(false);\n    const [name, setName] = useState(\"\");\n    const [phoneNo, setPhoneNo] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n\n\n    useEffect(() => {\n        if (name === \"\" || phoneNo === \"\") {\n          setDisabled(true);\n        } else {\n          setDisabled(false);\n        }\n    }, [name, phoneNo]);\n\n\n    // const handleChange = (e:any) => {\n    //     e.target.name === \"name\"\n    //       ? setName(e.target.value)\n    //       : setPhoneNo(e.target.value);\n    // };\n\n    const handleChange = (e:any) => {\n        setName(e.target.value);\n        setPhoneNo(e.target.value);\n        setAddress(e.target.value);\n    }\n\n    const onFinish2 = (values: ETypeForm) => {\n        console.log(\"Success:\", values);\n        setDisabled(true);\n    };\n    \n    const onFinishFailed = (errorInfo: ValidateErrorEntity) => {\n        console.log(\"Failed:\", errorInfo);\n        setDisabled(false);\n    };\n\n\n\n\n\n\n\n\n    const [progress, setProgress] = useState<boolean>(true);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [province, setProvince] = useState<string | undefined>(() => {\n        if (store) {\n            return store.province as string;\n        }\n        return undefined;\n    });\n    const [district, setDistrict] = useState<string | undefined>(() => {\n        if (store) {\n            return store.district as string;\n        }\n        return undefined;\n    });\n\n    const { loadingProvince, provinces } = useProvices();\n    const { loadingDistrict, districts } = useDistricts(province, true);\n    const { loadingWard, wards } = useWards({ province, district, loading: true });\n\n    // const onChangeProvince = (value: string) => {\n    //     setProvince(value);\n    //     setDistrict(undefined)\n    //     removeField('district');\n    //     removeField('ward')\n    // };\n\n    // const onChangeDistrict = (value: string) => {\n    //     setDistrict(value);\n\n    //     removeField('ward');\n    // };\n\n    // const removeField = (field: string) => {\n    //     form.setFieldsValue({\n    //         [field]: undefined,\n    //     });\n    // };\n\n    // const createNewStore = async (values: IDataCreateStore) => {\n    //     try {\n    //         if (localStorage.getItem('shortLiveToken') !== null)\n    //             values.saleChannels = [SaleChannelId.FACEBOOK];\n\n    //         const querySearch: {\n    //             saleChannel?: SaleChannelId;\n    //         } = queryString.parse(location.search.replace('?', ''));\n\n    //         let data = values;\n\n    //         if (querySearch.saleChannel && validChannel(querySearch.saleChannel)) {\n    //             data = {\n    //                 ...values,\n    //                 saleChannels: [querySearch.saleChannel],\n    //             };\n    //         }\n\n    //         const result = await createStore(data);\n\n    //         await updateUserStorePreference({\n    //             storeId: result._id,\n    //             hideNewUserGuide: false,\n    //         });\n\n    //         dispatch({\n    //             type: types.SET_STORE,\n    //             payload: result,\n    //         });\n    //     } catch (error) {\n    //         if (get(error, 'response.status') === 409) {\n    //             return message.error('Tên cửa hàng đã tồn tại. Vui lòng nhập tên khác');\n    //         }\n    //         return message.error('Lỗi tạo cửa hàng');\n    //     } finally {\n    //         setLoading(false);\n    //     }\n    // };\n\n    // const editStore = async (values: IDataCreateStore) => {\n    //     try {\n    //         const result = await updateStore(store._id as string, {\n    //             ...values,\n    //         });\n\n    //         dispatch({\n    //             type: types.SET_STORE,\n    //             payload: result,\n    //         });\n    //     } catch (error) {\n    //         message.error('Lỗi chỉnh sửa cửa hàng');\n    //     } finally {\n    //         setLoading(false);\n    //     }\n    // };\n\n    // const onFinish = (values: IDataCreateStore) => {\n    //     setLoading(true);\n    //     if (type === ETypeForm.NEW) {\n    //         createNewStore(values);\n    //     } else {\n    //         editStore(values);\n    //     }\n    // };\n\n    // useEffect(() => {\n    //     if (\n    //         (!loadingDistrict && !loadingWard && type === ETypeForm.EDIT) ||\n    //         type === ETypeForm.NEW\n    //     ) {\n    //         setProgress(false);\n    //     }\n    // }, [loadingDistrict, loadingWard, type]);\n\n    // if (progress) {\n    //     return (\n    //         <div style={{ height: 320 }}>\n    //             <Loading full />\n    //         </div>\n    //     );\n    // }\n\n    return (\n        <Form\n            layout=\"vertical\"\n            // form={form}\n            // // onFinish={onFinish}\n            // initialValues={{\n            //     ...pick(store, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n            // }}\n\n\n            onFinish={onFinish2}\n            onFinishFailed={onFinishFailed}\n\n        >\n            <Form.Item\n                name=\"name\"\n                label=\"Tên cửa hàng\"\n                rules={[{ required: true, message: 'Vui lòng nhập Tên cửa hàng' }]}\n            >\n                <Input \n                    size={size} \n                    placeholder=\"Tên cửa hàng\" \n                    autoFocus \n\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                />\n            </Form.Item>\n\n            <Form.Item\n                name=\"phoneNo\"\n                label=\"Số điện thoại\"\n                rules={[\n                    { required: true, message: 'Vui lòng nhập Số điện thoại' },\n                    {\n                        validator: rules.validatePhone,\n                    },\n                ]}\n            >\n                <Input \n                    style={style} \n                    size={size} \n                    placeholder=\"Số điện thoại cửa hàng\" \n\n                    name=\"phoneNo\"\n                    value={phoneNo}\n                    onChange={handleChange}\n                />\n            </Form.Item>\n\n            {/* <Row gutter={15}>\n                <Col md={8}>\n                    <Form.Item\n                        name=\"province\"\n                        label=\"Tỉnh/thành phố\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Chọn tỉnh/thành phố',\n                            },\n                        ]}\n                    >\n                        <Select\n                            showSearch\n                            style={{ width: '100%' }}\n                            optionFilterProp=\"children\"\n                            onChange={onChangeProvince}\n                            filterOption={(input: string, option: any) =>\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                            }\n                            loading={loadingProvince}\n                            onFocus={disabledAutosuggestion}\n                            placeholder=\"Chọn tỉnh/thành phố\"\n                        >\n                            <Select.Option value={'-1'} key={'-1'} disabled>\n                                Chọn tỉnh/thành phố\n                            </Select.Option>\n\n                            {map(provinces, (province: Province) => (\n                                <Select.Option value={province.code} key={province.code}>\n                                    {province.name}\n                                </Select.Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                </Col>\n\n                <Col md={8}>\n                    <Form.Item\n                        name=\"district\"\n                        label=\"Quận/huyện\"\n                        rules={[{ required: true, message: 'Chọn quận/huyện' }]}\n                    >\n                        <Select\n                            size={size}\n                            placeholder=\"Chọn quận/huyện\"\n                            onChange={onChangeDistrict}\n                            showSearch\n                            filterOption={(input, option: any) =>\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                            }\n                            disabled={!province}\n                            loading={loadingDistrict}\n                            onFocus={disabledAutosuggestion}\n                        >\n                            <Select.Option value={'-1'} key={'-1'} disabled>\n                                Chọn quận/huyện\n                            </Select.Option>\n                            {map(districts, (district: District) => (\n                                <Select.Option value={district.code} key={district.code}>\n                                    {district.name}\n                                </Select.Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                </Col>\n\n                <Col md={8}>\n                    <Form.Item\n                        name=\"ward\"\n                        label=\"Xã/phường\"\n                        rules={[{ required: true, message: 'Chọn xã/phường' }]}\n                    >\n                        <Select\n                            size={size}\n                            placeholder=\"Chọn xã/phường\"\n                            showSearch\n                            filterOption={(input, option: any) =>\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                            }\n                            disabled={!district}\n                            loading={loadingWard}\n                            onFocus={disabledAutosuggestion}\n                        >\n                            <Select.Option value={'-1'} key={'-1'} disabled>\n                                Chọn xã/phường\n                            </Select.Option>\n                            {map(wards, (ward: Ward) => {\n                                return (\n                                    <Select.Option value={ward.code} key={ward.code}>\n                                        {ward.name}\n                                    </Select.Option>\n                                );\n                            })}\n                        </Select>\n                    </Form.Item>\n                </Col>\n            </Row> */}\n\n            <Form.Item\n                name=\"address\"\n                rules={[{ required: true, message: 'Vui lòng nhập Địa chỉ' }]}\n                label=\"Địa chỉ\"\n            >\n                <Input.TextArea\n                    autoComplete=\"off\"\n                    placeholder=\"Điền địa chỉ cửa hàng\"\n                    rows={3}\n\n                    name=\"address\"\n                    value={address}\n                    onChange={handleChange}\n                ></Input.TextArea>\n            </Form.Item>\n\n            <Form.Item>\n                <Button type=\"primary\" size={size} htmlType=\"submit\" block loading={loading} disabled={disabled} >\n                    {type === ETypeForm.EDIT ? 'Chỉnh sửa cửa hàng' : 'Tạo cửa hàng'}\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default FormCreateStore;\n"]},"metadata":{},"sourceType":"module"}