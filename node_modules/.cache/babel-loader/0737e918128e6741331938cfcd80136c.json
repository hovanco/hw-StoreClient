{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport warehouseApi from '../../api/warehouse-api';\n\nfunction useWarehouses(warehouseId) {\n  _s();\n\n  const store = useSelector(state => state.store.data);\n  const [loading, setLoading] = useState(true);\n  const [warehouses, setWarehouses] = useState([]);\n  useEffect(() => {\n    async function loadWarehouses(storeId) {\n      setLoading(true);\n\n      try {\n        const response = await warehouseApi.getWarehouses(storeId);\n        setWarehouses(response.data);\n      } catch (error) {} finally {\n        setLoading(false);\n      }\n    }\n\n    if (store._id) {\n      loadWarehouses(store._id);\n    }\n  }, [store._id]);\n  const warehouse = warehouseId ? warehouses.find(w => w._id === warehouseId) : undefined;\n  return {\n    loading,\n    warehouse,\n    warehouses\n  };\n}\n\n_s(useWarehouses, \"mXSrsG2ZmY0YHgGzCCrxNFXuq7k=\", false, function () {\n  return [useSelector];\n});\n\nexport { useWarehouses };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/components/warehouses/useWarehouse.tsx"],"names":["useEffect","useState","useSelector","warehouseApi","useWarehouses","warehouseId","store","state","data","loading","setLoading","warehouses","setWarehouses","loadWarehouses","storeId","response","getWarehouses","error","_id","warehouse","find","w","undefined"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;AAIA,SAASC,aAAT,CAAuBC,WAAvB,EAA6C;AAAA;;AACzC,QAAMC,KAAK,GAAGJ,WAAW,CAAEK,KAAD,IAAmBA,KAAK,CAACD,KAAN,CAAYE,IAAhC,CAAzB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAU,IAAV,CAAtC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAe,EAAf,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,cAAf,CAA8BC,OAA9B,EAA+C;AAC3CJ,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACA,cAAMK,QAAQ,GAAG,MAAMZ,YAAY,CAACa,aAAb,CAA2BF,OAA3B,CAAvB;AAEAF,QAAAA,aAAa,CAACG,QAAQ,CAACP,IAAV,CAAb;AACH,OAJD,CAIE,OAAOS,KAAP,EAAc,CACf,CALD,SAKU;AACNP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ;;AAED,QAAIJ,KAAK,CAACY,GAAV,EAAe;AACXL,MAAAA,cAAc,CAACP,KAAK,CAACY,GAAP,CAAd;AACH;AACJ,GAhBQ,EAgBN,CAACZ,KAAK,CAACY,GAAP,CAhBM,CAAT;AAkBA,QAAMC,SAAS,GAAGd,WAAW,GAAGM,UAAU,CAACS,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACH,GAAF,KAAUb,WAAjC,CAAH,GAAmDiB,SAAhF;AAEA,SAAO;AAAEb,IAAAA,OAAF;AAAWU,IAAAA,SAAX;AAAsBR,IAAAA;AAAtB,GAAP;AACH;;GA1BQP,a;UACSF,W;;;AA2BlB,SAASE,aAAT","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport warehouseApi from '../../api/warehouse-api';\nimport { IWarehouse } from '../../models';\nimport { IState } from '../../store/rootReducer';\n\nfunction useWarehouses(warehouseId?: string) {\n    const store = useSelector((state: IState) => state.store.data);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [warehouses, setWarehouses] = useState<IWarehouse[]>([]);\n\n    useEffect(() => {\n        async function loadWarehouses(storeId: string) {\n            setLoading(true);\n            try {\n                const response = await warehouseApi.getWarehouses(storeId);\n\n                setWarehouses(response.data);\n            } catch (error) {\n            } finally {\n                setLoading(false);\n            }\n        }\n\n        if (store._id) {\n            loadWarehouses(store._id);\n        }\n    }, [store._id]);\n\n    const warehouse = warehouseId ? warehouses.find((w) => w._id === warehouseId) : undefined;\n\n    return { loading, warehouse, warehouses };\n}\n\nexport { useWarehouses };\n"]},"metadata":{},"sourceType":"module"}