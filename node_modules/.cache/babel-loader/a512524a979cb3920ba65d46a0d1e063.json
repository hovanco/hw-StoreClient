{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/report/report-sale/state/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useMemo, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport reportApi from '../../../../api/report-api';\nimport { initialState, reducer } from './reducer';\nimport types from './types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst intialContext = {\n  state: initialState,\n  dispatch: () => {}\n};\nconst ContextReportSale = /*#__PURE__*/createContext(intialContext);\n\nconst ProviderReportSale = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = useMemo(() => ({\n    state,\n    dispatch\n  }), [state, dispatch]);\n  return /*#__PURE__*/_jsxDEV(ContextReportSale.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProviderReportSale, \"qvH2RyWsybU3q3wEgwaMp2xbVH0=\");\n\n_c = ProviderReportSale;\n\nconst useReportSale = () => {\n  _s2();\n\n  const store = useSelector(state => state.store.data);\n  const value = useContext(ContextReportSale);\n  const {\n    state,\n    dispatch\n  } = value;\n\n  const selectTab = tab => {\n    dispatch({\n      type: types.SELECT_TAB,\n      payload: tab\n    });\n  };\n\n  const selectType = type => {\n    dispatch({\n      type: types.SELECT_FILTER,\n      payload: type\n    });\n  };\n\n  const selectTimes = times => {\n    dispatch({\n      type: types.SELECT_TIMES,\n      payload: times\n    });\n  };\n\n  const loadData = async ({\n    tab,\n    filter,\n    startTime,\n    endTime\n  }) => {\n    let isLoadDatta = false;\n    dispatch({\n      type: types.LOADING\n    });\n    isLoadDatta = isLoadDatta ? false : true;\n\n    if (isLoadDatta) {\n      try {\n        const response = await reportApi.reportDetail({\n          type: tab,\n          storeId: store._id,\n          // startTime: 1601485200000,\n          // endTime: 1604163599999,\n          startTime,\n          endTime,\n          filter\n        });\n        dispatch({\n          type: types.LOAD_DATA,\n          payload: response\n        });\n      } catch {\n        dispatch({\n          type: types.LOAD_DATA,\n          payload: []\n        });\n      } finally {\n        isLoadDatta = false;\n      }\n    }\n  };\n\n  return { ...state,\n    selectTab,\n    selectType,\n    selectTimes,\n    loadData\n  };\n};\n\n_s2(useReportSale, \"UDMAgZiYKm3/sTe6wJDnifGQIP0=\", false, function () {\n  return [useSelector];\n});\n\nexport { ProviderReportSale, useReportSale };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderReportSale\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/report/report-sale/state/context.tsx"],"names":["React","createContext","useContext","useMemo","useReducer","useSelector","reportApi","initialState","reducer","types","intialContext","state","dispatch","ContextReportSale","ProviderReportSale","children","value","useReportSale","store","data","selectTab","tab","type","SELECT_TAB","payload","selectType","SELECT_FILTER","selectTimes","times","SELECT_TIMES","loadData","filter","startTime","endTime","isLoadDatta","LOADING","response","reportDetail","storeId","_id","LOAD_DATA"],"mappings":"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","sourcesContent":["import React, { createContext, FC, ReactNode, useContext, useMemo, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport reportApi from '../../../../api/report-api';\nimport { IState } from '../../../../store/rootReducer';\nimport { EFilter, ETab, IContext } from './interface';\nimport { initialState, reducer } from './reducer';\nimport types from './types';\n\nconst intialContext = {\n    state: initialState,\n    dispatch: () => {},\n};\n\nconst ContextReportSale = createContext<IContext>(intialContext);\n\ninterface Props {\n    children: ReactNode;\n}\n\nconst ProviderReportSale: FC<Props> = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n    return <ContextReportSale.Provider value={value}>{children}</ContextReportSale.Provider>;\n};\n\nconst useReportSale = () => {\n    const store = useSelector((state: IState) => state.store.data);\n    const value = useContext(ContextReportSale);\n\n    const { state, dispatch } = value;\n\n    const selectTab = (tab: ETab) => {\n        dispatch({\n            type: types.SELECT_TAB,\n            payload: tab,\n        });\n    };\n\n    const selectType = (type: string) => {\n        dispatch({\n            type: types.SELECT_FILTER,\n            payload: type,\n        });\n    };\n\n    const selectTimes = (times: { startTime: number; endTime: number }) => {\n        dispatch({\n            type: types.SELECT_TIMES,\n            payload: times,\n        });\n    };\n\n    const loadData = async ({\n        tab,\n        filter,\n        startTime,\n        endTime,\n    }: {\n        tab: ETab;\n        filter: EFilter;\n        startTime: number;\n        endTime: number;\n    }) => {\n        let isLoadDatta = false;\n\n        dispatch({\n            type: types.LOADING,\n        });\n\n        isLoadDatta = isLoadDatta ? false : true;\n\n        if (isLoadDatta) {\n            try {\n                const response = await reportApi.reportDetail({\n                    type: tab,\n                    storeId: store._id as string,\n                    // startTime: 1601485200000,\n                    // endTime: 1604163599999,\n                    startTime,\n                    endTime,\n                    filter,\n                });\n\n                dispatch({\n                    type: types.LOAD_DATA,\n                    payload: response,\n                });\n            } catch {\n                dispatch({\n                    type: types.LOAD_DATA,\n                    payload: [],\n                });\n            } finally {\n                isLoadDatta = false;\n            }\n        }\n    };\n\n    return { ...state, selectTab, selectType, selectTimes, loadData };\n};\n\nexport { ProviderReportSale, useReportSale };\n"]},"metadata":{},"sourceType":"module"}