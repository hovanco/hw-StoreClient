{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting/sale-channel/state/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useMemo, useReducer } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Loading } from '../../../../components';\nimport { SALE_CHANNEL_DATA } from '../../../../constants/sale-channels';\nimport * as types from './types';\nimport { initialState, reducer } from './reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  state: initialState,\n  dispatch: () => {}\n};\nconst Context = /*#__PURE__*/createContext(initialContext);\n\nconst ProviderSaleChannel = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const store = useSelector(state => state.store.data);\n  const loading = useSelector(state => state.store.loadingStore);\n  const enableSaleChannels = useSelector(({\n    store\n  }) => store.enableSaleChannels);\n  useEffect(() => {\n    if (store._id) {\n      dispatch({\n        type: types.LOADING\n      });\n      const saleChannels = SALE_CHANNEL_DATA.filter(item => enableSaleChannels.includes(item.id)).map(item => {\n        const existChannel = ((store === null || store === void 0 ? void 0 : store.saleChannels) || []).includes(item.id);\n\n        if (existChannel) {\n          return { ...item,\n            used: true\n          };\n        }\n\n        return item;\n      });\n      dispatch({\n        type: types.LOAD_DONE,\n        payload: saleChannels\n      });\n    }\n  }, [store._id, store.saleChannels, enableSaleChannels]);\n  const value = useMemo(() => ({\n    state,\n    dispatch\n  }), [state, dispatch]);\n\n  if (state.loading || loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProviderSaleChannel, \"3jLku667URrh+ZLRNbDqsez3hX4=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\n_c = ProviderSaleChannel;\n\nconst useSaleChannel = () => {\n  _s2();\n\n  const {\n    state\n  } = useContext(Context);\n  return { ...state\n  };\n};\n\n_s2(useSaleChannel, \"1KanyRZ80sTgEeQF1ogKen7i0wM=\");\n\nexport { ProviderSaleChannel, useSaleChannel };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderSaleChannel\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting/sale-channel/state/context.tsx"],"names":["React","createContext","useContext","useEffect","useMemo","useReducer","useSelector","Loading","SALE_CHANNEL_DATA","types","initialState","reducer","initialContext","state","dispatch","Context","ProviderSaleChannel","children","store","data","loading","loadingStore","enableSaleChannels","_id","type","LOADING","saleChannels","filter","item","includes","id","map","existChannel","used","LOAD_DONE","payload","value","useSaleChannel"],"mappings":"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","sourcesContent":["import React, {\n    createContext,\n    FC,\n    ReactNode,\n    useContext,\n    useEffect,\n    useMemo,\n    useReducer,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { Loading } from '../../../../components';\nimport { SALE_CHANNEL_DATA } from '../../../../constants/sale-channels';\nimport { IStoreState } from '../../../../reducers/storeState/reducer';\nimport { IState } from '../../../../store/rootReducer';\nimport * as types from './types';\nimport { IContext } from './interface';\nimport { initialState, reducer } from './reducer';\n\nconst initialContext = {\n    state: initialState,\n    dispatch: () => {},\n};\n\nconst Context = createContext<IContext>(initialContext);\n\ninterface Props {\n    children: ReactNode;\n}\n\nconst ProviderSaleChannel: FC<Props> = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const store = useSelector((state: IState) => state.store.data);\n    const loading = useSelector((state: IState) => state.store.loadingStore);\n    const enableSaleChannels = useSelector(\n        ({ store }: { store: IStoreState }) => store.enableSaleChannels\n    );\n\n    useEffect(() => {\n        if (store._id) {\n            dispatch({\n                type: types.LOADING,\n            });\n\n            const saleChannels = SALE_CHANNEL_DATA.filter((item) =>\n                enableSaleChannels.includes(item.id)\n            ).map((item) => {\n                const existChannel = (store?.saleChannels || []).includes(item.id);\n                if (existChannel) {\n                    return {\n                        ...item,\n                        used: true,\n                    };\n                }\n\n                return item;\n            });\n\n            dispatch({\n                type: types.LOAD_DONE,\n                payload: saleChannels,\n            });\n        }\n    }, [store._id, store.saleChannels, enableSaleChannels]);\n\n    const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n    if (state.loading || loading) {\n        return <Loading full />;\n    }\n\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n\nconst useSaleChannel = () => {\n    const { state } = useContext(Context);\n\n    return { ...state };\n};\n\nexport { ProviderSaleChannel, useSaleChannel };\n"]},"metadata":{},"sourceType":"module"}