{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/components/search-dropdown/index.tsx\",\n    _s = $RefreshSig$();\n\nimport cls from 'classnames';\nimport React, { memo, useRef } from 'react';\nimport useClickOutside from '../../hook/useClickOutside';\nimport useVisble from '../../hook/useVisible';\nimport './search-dropdown.less';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchDropdown = ({\n  children,\n  input,\n  className\n}) => {\n  _s();\n\n  const elRef = useRef();\n  const {\n    visible,\n    setVisible\n  } = useVisble(false);\n  useClickOutside(elRef, () => {\n    setVisible(false);\n  });\n\n  const setHideVisible = () => {\n    setVisible(false);\n  };\n\n  const classNames = `search-dropdown ${className}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: elRef,\n    className: classNames,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      onClick: () => setVisible(true),\n      children: /*#__PURE__*/React.cloneElement(input, {\n        setFocus: () => {\n          setVisible(true);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cls('dropdown', {\n        visible\n      }),\n      children: /*#__PURE__*/React.cloneElement(children, {\n        setHideVisible\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchDropdown, \"SaXtBs7AdAldKdHblD0sEFlM7kI=\", false, function () {\n  return [useVisble, useClickOutside];\n});\n\n_c = SearchDropdown;\nexport default _c2 = /*#__PURE__*/memo(SearchDropdown);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SearchDropdown\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/components/search-dropdown/index.tsx"],"names":["cls","React","memo","useRef","useClickOutside","useVisble","SearchDropdown","children","input","className","elRef","visible","setVisible","setHideVisible","classNames","cloneElement","setFocus"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAoBC,IAApB,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAO,wBAAP;;;AAQA,MAAMC,cAAyB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA;AAAnB,CAAD,KAAoC;AAAA;;AAClE,QAAMC,KAAK,GAAGP,MAAM,EAApB;AACA,QAAM;AAAEQ,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA0BP,SAAS,CAAC,KAAD,CAAzC;AAEAD,EAAAA,eAAe,CAACM,KAAD,EAAQ,MAAM;AACzBE,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAFc,CAAf;;AAIA,QAAMC,cAAc,GAAG,MAAM;AACzBD,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAFD;;AAIA,QAAME,UAAU,GAAI,mBAAkBL,SAAU,EAAhD;AAEA,sBACI;AAAK,IAAA,GAAG,EAAEC,KAAV;AAAiB,IAAA,SAAS,EAAEI,UAA5B;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,OAAO,EAAE,MAAMF,UAAU,CAAC,IAAD,CAAhD;AAAA,6BACKX,KAAK,CAACc,YAAN,CAAmBP,KAAnB,EAA0B;AACvBQ,QAAAA,QAAQ,EAAE,MAAM;AACZJ,UAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AAHsB,OAA1B;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eASI;AAAK,MAAA,SAAS,EAAEZ,GAAG,CAAC,UAAD,EAAa;AAAEW,QAAAA;AAAF,OAAb,CAAnB;AAAA,6BACKV,KAAK,CAACc,YAAN,CAAmBR,QAAnB,EAA6B;AAC1BM,QAAAA;AAD0B,OAA7B;AADL;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CA/BD;;GAAMP,c;UAE8BD,S,EAEhCD,e;;;KAJEE,c;AAiCN,kCAAeJ,IAAI,CAACI,cAAD,CAAnB","sourcesContent":["import cls from 'classnames';\nimport React, { FC, memo, ReactElement, useRef } from 'react';\nimport useClickOutside from '../../hook/useClickOutside';\nimport useVisble from '../../hook/useVisible';\nimport './search-dropdown.less';\n\ninterface Props {\n    children: ReactElement;\n    input: ReactElement;\n    className?: string;\n}\n\nconst SearchDropdown: FC<Props> = ({ children, input, className }) => {\n    const elRef = useRef<any>();\n    const { visible, setVisible } = useVisble(false);\n\n    useClickOutside(elRef, () => {\n        setVisible(false);\n    });\n\n    const setHideVisible = () => {\n        setVisible(false);\n    };\n\n    const classNames = `search-dropdown ${className}`;\n\n    return (\n        <div ref={elRef} className={classNames}>\n            <div className=\"input\" onClick={() => setVisible(true)}>\n                {React.cloneElement(input, {\n                    setFocus: () => {\n                        setVisible(true);\n                    },\n                })}\n            </div>\n\n            <div className={cls('dropdown', { visible })}>\n                {React.cloneElement(children, {\n                    setHideVisible,\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default memo(SearchDropdown);\n"]},"metadata":{},"sourceType":"module"}