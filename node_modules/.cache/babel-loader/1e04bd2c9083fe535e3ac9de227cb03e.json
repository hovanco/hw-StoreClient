{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/product-new/product-form-properties/modal-update-variant-quantity/table.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { formatterInput, parserInput } from '../../../../../helper/format-money';\nimport { InsaTable } from '../../../../../components';\nimport { InputNumber } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TableUpdateVariantQuantity = ({\n  localStocks,\n  setLocalStocks\n}) => {\n  _s();\n\n  const warehouses = useSelector(state => state.store.warehouses);\n  const handleStockChange = useCallback((stockId, warehouseId, quantity) => {\n    let newLocalStocks = localStocks.map(item => {\n      if (item._id === stockId) item[warehouseId] = quantity;\n      return item;\n    });\n    setLocalStocks(newLocalStocks);\n  }, // eslint-disable-next-line\n  [localStocks]);\n  const columns = useMemo(() => {\n    let result = warehouses.map((item, idx) => {\n      return {\n        title: item.name,\n        dataIndex: item._id,\n        align: 'center',\n        key: item._id,\n        width: 150,\n        render: (text, record) => /*#__PURE__*/_jsxDEV(InputNumber, {\n          formatter: formatterInput,\n          parser: parserInput,\n          value: record[item === null || item === void 0 ? void 0 : item._id],\n          onChange: value => handleStockChange(record._id, item._id, Number(value) || 0),\n          min: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      };\n    });\n    result.unshift({\n      title: '',\n      dataIndex: 'name',\n      width: 200,\n      align: 'center',\n      key: 'name',\n      fixed: 'left',\n      render: (text, record) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"variant-name\",\n          children: record.productId.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"variant-attributes\",\n          children: record.productId.attributes.map(item => item.tags[0]).join(' - ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    });\n    return result; // eslint-disable-next-line\n  }, [warehouses, handleStockChange]);\n  return /*#__PURE__*/_jsxDEV(InsaTable, {\n    dataSource: localStocks,\n    columns: columns,\n    footer: undefined,\n    rowKey: \"_id\",\n    pagination: false,\n    title: undefined,\n    bordered: true,\n    scroll: {\n      x: 600,\n      y: 300\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TableUpdateVariantQuantity, \"bK+K3IhAiny1uMH3iqX3n+J09IM=\", false, function () {\n  return [useSelector];\n});\n\n_c = TableUpdateVariantQuantity;\nexport default TableUpdateVariantQuantity;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableUpdateVariantQuantity\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/product/product-new/product-form-properties/modal-update-variant-quantity/table.tsx"],"names":["React","useMemo","useCallback","useSelector","formatterInput","parserInput","InsaTable","InputNumber","TableUpdateVariantQuantity","localStocks","setLocalStocks","warehouses","state","store","handleStockChange","stockId","warehouseId","quantity","newLocalStocks","map","item","_id","columns","result","idx","title","name","dataIndex","align","key","width","render","text","record","value","Number","unshift","fixed","productId","attributes","tags","join","undefined","x","y"],"mappings":"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","sourcesContent":["import React, { FC, useMemo, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { IState } from '../../../../../store/rootReducer';\nimport { IWarehouse, IAttribute } from '../../../../../models';\nimport { formatterInput, parserInput } from '../../../../../helper/format-money';\n\nimport { InsaTable } from '../../../../../components';\nimport { InputNumber } from 'antd';\n\ninterface Props {\n    localStocks: any;\n    setLocalStocks: any;\n}\n\nconst TableUpdateVariantQuantity: FC<Props> = ({ localStocks, setLocalStocks }) => {\n    const warehouses = useSelector((state: IState) => state.store.warehouses);\n\n    const handleStockChange = useCallback(\n        (stockId: string, warehouseId: string, quantity: number) => {\n            let newLocalStocks = localStocks.map((item: any) => {\n                if (item._id === stockId) item[warehouseId] = quantity;\n\n                return item;\n            });\n\n            setLocalStocks(newLocalStocks);\n        },\n        // eslint-disable-next-line\n        [localStocks]\n    );\n\n    const columns = useMemo(() => {\n        let result: any = warehouses.map((item: IWarehouse, idx: number) => {\n            return {\n                title: item.name,\n                dataIndex: item._id,\n                align: 'center',\n                key: item._id,\n                width: 150,\n                render: (text: string, record: any) => (\n                    <InputNumber\n                        formatter={formatterInput}\n                        parser={parserInput}\n                        value={record[item?._id as string]}\n                        onChange={(value: string | number | undefined) =>\n                            handleStockChange(record._id, item._id as string, Number(value) || 0)\n                        }\n                        min={0}\n                    />\n                ),\n            };\n        });\n\n        result.unshift({\n            title: '',\n            dataIndex: 'name',\n            width: 200,\n            align: 'center',\n            key: 'name',\n            fixed: 'left',\n            render: (text: string, record: any) => (\n                <div>\n                    <div className=\"variant-name\">{record.productId.name}</div>\n                    <div className=\"variant-attributes\">\n                        {record.productId.attributes\n                            .map((item: IAttribute) => item.tags[0])\n                            .join(' - ')}\n                    </div>\n                </div>\n            ),\n        });\n\n        return result;\n        // eslint-disable-next-line\n    }, [warehouses, handleStockChange]);\n\n    return (\n        <InsaTable\n            dataSource={localStocks}\n            columns={columns}\n            footer={undefined}\n            rowKey=\"_id\"\n            pagination={false}\n            title={undefined}\n            bordered\n            scroll={{ x: 600, y: 300 }}\n        />\n    );\n};\n\nexport default TableUpdateVariantQuantity;\n"]},"metadata":{},"sourceType":"module"}