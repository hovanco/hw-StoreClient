{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting-profile/index.tsx\",\n    _s = $RefreshSig$();\n\nimport _ from 'lodash';\nimport { Col, Row, Space, Typography, Card, message, Form } from 'antd';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { InsaButton, PageTopWrapper } from '../../components';\nimport { DefaultLayout } from '../../layout';\nimport theme from '../../theme';\nimport constants from '../../constants';\nimport { uploadImagesRequest } from '../../api/upload-api';\nimport FormProfile from './form-profile';\nimport { updateUserInfo } from '../../api/user';\nimport { loadUserSuccess } from '../../reducers/authState/authAction';\nimport './style.less';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SettingProfilePage() {\n  _s();\n\n  const user = useSelector(({\n    auth\n  }) => auth.user);\n  const token = useSelector(state => state.auth.token);\n  const {\n    data: storeObj\n  } = useSelector(state => state.store);\n  const dispatch = useDispatch();\n  const [avatar, setAvatar] = useState(() => _.get(user, 'picture', ''));\n  const [fileImage, setFileImage] = useState();\n  const [formUser] = Form.useForm();\n\n  const getImageUrl = () => {\n    if (fileImage && typeof fileImage === 'string') {\n      return `${constants.URL_IMG}${fileImage}`;\n    }\n\n    return avatar;\n  };\n\n  const handleUpload = async e => {\n    try {\n      const files = Array.from(e.target.files).map(file => {\n        return file;\n      });\n      e.target.value = null;\n\n      if (!files) {\n        return;\n      }\n\n      const accessToken = _.get(token, 'accessToken');\n\n      const res = await uploadImagesRequest({\n        token: accessToken,\n        storeId: storeObj._id,\n        files\n      });\n\n      if (Array.isArray(res)) {\n        setFileImage(res[0].key);\n      }\n    } catch (error) {}\n  };\n\n  const handleDeleteAvatar = () => {\n    setFileImage('');\n    setAvatar('');\n  };\n\n  const handleSaveProfile = async () => {\n    try {\n      console.log(fileImage);\n      const dataForm = formUser.getFieldsValue();\n      console.log(dataForm);\n      const newData = {\n        name: dataForm.name,\n        picture: fileImage ? `${constants.URL_IMG}${fileImage}` : avatar,\n        phoneNo: dataForm.phoneNo\n      };\n      await updateUserInfo(newData);\n      dispatch(loadUserSuccess({ ...user,\n        ...newData\n      }));\n      message.success('Cập nhật thông tin tài khoản thành công');\n    } catch (error) {\n      message.error('Cập nhật thông tin tài khoản thất bại');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DefaultLayout, {\n    title: \"T\\xC0I KHO\\u1EA2N C\\u1EE6A T\\xD4I\",\n    children: [/*#__PURE__*/_jsxDEV(PageTopWrapper, {\n      leftContent: /*#__PURE__*/_jsxDEV(Typography.Title, {\n        level: 3,\n        children: \"T\\xC0I KHO\\u1EA2N C\\u1EE6A T\\xD4I\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 30\n      }, this),\n      rightContent: /*#__PURE__*/_jsxDEV(Space, {\n        children: /*#__PURE__*/_jsxDEV(InsaButton, {\n          type: \"primary\",\n          style: {\n            width: 80\n          },\n          onClick: handleSaveProfile,\n          children: \"L\\u01B0u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        padding: theme.spacing.m\n      },\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        span: 20,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          type: \"inner\",\n          title: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: 16\n            },\n            children: \"Th\\xF4ng tin t\\xE0i kho\\u1EA3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this),\n          className: \"setting-profile\",\n          children: /*#__PURE__*/_jsxDEV(FormProfile, {\n            user: user,\n            formUser: formUser,\n            getImageUrl: getImageUrl,\n            handleUpload: handleUpload,\n            handleDeleteAvatar: handleDeleteAvatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SettingProfilePage, \"CbyaYpqiEoUGSE0PyAeYwfNNYdA=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, Form.useForm];\n});\n\n_c = SettingProfilePage;\nexport default SettingProfilePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingProfilePage\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/pages/setting-profile/index.tsx"],"names":["_","Col","Row","Space","Typography","Card","message","Form","React","useState","useDispatch","useSelector","InsaButton","PageTopWrapper","DefaultLayout","theme","constants","uploadImagesRequest","FormProfile","updateUserInfo","loadUserSuccess","SettingProfilePage","user","auth","token","state","data","storeObj","store","dispatch","avatar","setAvatar","get","fileImage","setFileImage","formUser","useForm","getImageUrl","URL_IMG","handleUpload","e","files","Array","from","target","map","file","value","accessToken","res","storeId","_id","isArray","key","error","handleDeleteAvatar","handleSaveProfile","console","log","dataForm","getFieldsValue","newData","name","picture","phoneNo","success","width","padding","spacing","m","fontSize"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { Col, Row, Space, Typography, Card, message, Form } from 'antd';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport iconQuestion from '../../assets/images/ic-question.svg';\nimport { InsaButton, PageTopWrapper } from '../../components';\nimport { DefaultLayout } from '../../layout';\nimport { IStorageState } from '../../reducers/authState/authReducer';\nimport theme from '../../theme';\nimport constants from '../../constants';\nimport { IState } from '../../store/rootReducer';\nimport { uploadImagesRequest } from '../../api/upload-api';\nimport FormProfile from './form-profile';\nimport { updateUserInfo } from '../../api/user';\nimport { loadUserSuccess } from '../../reducers/authState/authAction';\nimport './style.less';\n\nfunction SettingProfilePage() {\n    const user = useSelector(({ auth }: { auth: IStorageState }) => auth.user);\n    const token = useSelector((state: IState) => state.auth.token);\n    const { data: storeObj } = useSelector((state: IState) => state.store);\n\n    const dispatch = useDispatch();\n\n    const [avatar, setAvatar] = useState<string>(() => _.get(user, 'picture', ''));\n\n    const [fileImage, setFileImage] = useState<any>();\n\n    const [formUser] = Form.useForm();\n\n    const getImageUrl = (): string => {\n        if (fileImage && typeof fileImage === 'string') {\n            return `${constants.URL_IMG}${fileImage}`;\n        }\n        return avatar;\n    };\n\n    const handleUpload = async (e: any) => {\n        try {\n            const files = Array.from(e.target.files).map((file: any) => {\n                return file;\n            });\n            e.target.value = null;\n\n            if (!files) {\n                return;\n            }\n\n            const accessToken = _.get(token, 'accessToken');\n\n            const res = await uploadImagesRequest({\n                token: accessToken,\n                storeId: storeObj._id as string,\n                files,\n            });\n\n            if (Array.isArray(res)) {\n                setFileImage(res[0].key)\n            }\n        } catch (error) {}\n    };\n\n    const handleDeleteAvatar = () => {\n        setFileImage('');\n        setAvatar('');\n    }\n\n    const handleSaveProfile = async () => {\n        try {\n            console.log(fileImage);\n            const dataForm = formUser.getFieldsValue();\n            console.log(dataForm);\n            const newData = {\n                name: dataForm.name,\n                picture: fileImage ? `${constants.URL_IMG}${fileImage}` : avatar,\n                phoneNo: dataForm.phoneNo,\n            };\n            await updateUserInfo(newData);\n            dispatch(loadUserSuccess({ ...user, ...newData }));\n            message.success('Cập nhật thông tin tài khoản thành công');\n        } catch (error) {\n            message.error('Cập nhật thông tin tài khoản thất bại')\n        }\n    }\n\n    return (\n        <DefaultLayout title=\"TÀI KHOẢN CỦA TÔI\">\n            <PageTopWrapper\n                leftContent={<Typography.Title level={3}>TÀI KHOẢN CỦA TÔI</Typography.Title>}\n                rightContent={\n                    <Space>\n                        {/* <InsaButton type=\"primary\" danger\n                            icon={\n                                <img\n                                    style={{ marginRight: 10 }}\n                                    src={iconTrash}\n                                    alt=\"icon\"\n                                />\n                            }\n                        >\n                            Gỡ tài khoản\n                        </InsaButton> */}\n                        <InsaButton type=\"primary\" style={{ width: 80 }} onClick={handleSaveProfile}>\n                            Lưu\n                        </InsaButton>\n                        {/* TODO: Show after add feature */}\n                        {/* <InsaButton\n                            icon={\n                                <img\n                                    style={{ marginRight: 10 }}\n                                    src={iconQuestion}\n                                    alt=\"icon\"\n                                />\n                            }\n                        >\n                            Trợ giúp\n                        </InsaButton> */}\n                    </Space>\n                }\n            />\n\n            <Row\n                style={{\n                    padding: theme.spacing.m,\n                }}\n                justify='center'\n            >\n                <Col span={20}>\n                    <Card\n                        type=\"inner\"\n                        title={\n                            <span style={{ fontSize: 16 }}>Thông tin tài khoản</span>\n                        }\n                        className=\"setting-profile\"\n                    >\n                        <FormProfile\n                            user={user}\n                            formUser={formUser}\n                            getImageUrl={getImageUrl}\n                            handleUpload={handleUpload}\n                            handleDeleteAvatar={handleDeleteAvatar}\n                        />\n                    </Card>\n                </Col>\n            </Row>\n        </DefaultLayout>\n    );\n}\n\nexport default SettingProfilePage;\n"]},"metadata":{},"sourceType":"module"}