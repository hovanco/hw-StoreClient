{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/StoreClient/src/components/drag-drop-list/card.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useImperativeHandle, useRef } from 'react';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = /*#__PURE__*/React.forwardRef(_c = _s(({\n  text,\n  index,\n  connectDragSource,\n  connectDropTarget,\n  renderItem\n}, ref) => {\n  _s();\n\n  const elementRef = useRef(null);\n  connectDragSource(elementRef);\n  connectDropTarget(elementRef);\n  useImperativeHandle(ref, () => ({\n    getNode: () => elementRef.current\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: elementRef,\n    className: \"drag-item\",\n    children: renderItem ? renderItem(text, index) : text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 13\n  }, this);\n}, \"Beo0+aZ8hKq6/qHkVlUlM0TgBAc=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = Card;\nexport default DropTarget(props => props.accepts || [], {\n  hover(props, monitor, component) {\n    if (!component) {\n      return null;\n    } // node = HTML Div element from imperative API\n\n\n    const node = component.getNode();\n\n    if (!node) {\n      return null;\n    }\n\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index; // Don't replace items with themselves\n\n    if (dragIndex === hoverIndex) {\n      return;\n    } // Time to actually perform the action\n\n\n    props.moveCard(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n\n    monitor.getItem().index = hoverIndex;\n  }\n\n}, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget()\n}))(DragSource(props => {\n  var _props$accepts;\n\n  return (props === null || props === void 0 ? void 0 : (_props$accepts = props.accepts) === null || _props$accepts === void 0 ? void 0 : _props$accepts[0]) || '';\n}, {\n  beginDrag: props => ({\n    id: props.id,\n    index: props.index\n  }),\n  endDrag: props => {\n    props.onDragEnd({\n      id: props.id,\n      index: props.index\n    });\n  }\n}, (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  isDragging: monitor.isDragging()\n}))(Card));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Card$React.forwardRef\");\n$RefreshReg$(_c2, \"Card\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/StoreClient/src/components/drag-drop-list/card.tsx"],"names":["React","useImperativeHandle","useRef","DragSource","DropTarget","Card","forwardRef","text","index","connectDragSource","connectDropTarget","renderItem","ref","elementRef","getNode","current","props","accepts","hover","monitor","component","node","dragIndex","getItem","hoverIndex","moveCard","connect","dropTarget","beginDrag","id","endDrag","onDragEnd","dragSource","isDragging"],"mappings":"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","sourcesContent":["import React, { useImperativeHandle, useRef } from 'react';\nimport {\n    ConnectDropTarget,\n    ConnectDragSource,\n    DropTargetMonitor,\n    DragSourceMonitor,\n    DragSource,\n    DropTarget,\n    DropTargetConnector,\n    DragSourceConnector,\n} from 'react-dnd';\n\nexport interface CardProps {\n    id: any;\n    text: string;\n    index: number;\n    moveCard: (dragIndex: number, hoverIndex: number) => void;\n    onDragEnd: ({ id, index }: { id: any; index: number }) => void;\n    renderItem?: Function;\n    accepts?: string[];\n\n    connectDragSource: ConnectDragSource;\n    connectDropTarget: ConnectDropTarget;\n}\n\ninterface CardInstance {\n    getNode(): HTMLDivElement | null;\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n    ({ text, index, connectDragSource, connectDropTarget, renderItem }, ref) => {\n        const elementRef = useRef(null);\n        connectDragSource(elementRef);\n        connectDropTarget(elementRef);\n\n        useImperativeHandle<any, CardInstance>(ref, () => ({\n            getNode: () => elementRef.current,\n        }));\n\n        return (\n            <div ref={elementRef} className=\"drag-item\">\n                {renderItem ? renderItem(text, index) : text}\n            </div>\n        );\n    }\n);\n\nexport default DropTarget(\n    (props: CardProps) => props.accepts || [],\n    {\n        hover(props: CardProps, monitor: DropTargetMonitor, component: CardInstance) {\n            if (!component) {\n                return null;\n            }\n            // node = HTML Div element from imperative API\n            const node = component.getNode();\n            if (!node) {\n                return null;\n            }\n\n            const dragIndex = monitor.getItem().index;\n            const hoverIndex = props.index;\n\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return;\n            }\n\n            // Time to actually perform the action\n            props.moveCard(dragIndex, hoverIndex);\n\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n            monitor.getItem().index = hoverIndex;\n        },\n    },\n    (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n        connectDropTarget: connect.dropTarget(),\n    })\n)(\n    DragSource(\n        (props: CardProps) => props?.accepts?.[0] || '',\n        {\n            beginDrag: (props: CardProps) => ({\n                id: props.id,\n                index: props.index,\n            }),\n            endDrag: (props: CardProps) => {\n                props.onDragEnd({ id: props.id, index: props.index });\n            },\n        },\n        (connect: DragSourceConnector, monitor: DragSourceMonitor) => ({\n            connectDragSource: connect.dragSource(),\n            isDragging: monitor.isDragging(),\n        })\n    )(Card)\n);\n"]},"metadata":{},"sourceType":"module"}